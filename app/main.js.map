{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/app/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { app, App } from 'electron';\nimport * as log from 'electron-log';\n\nimport { AppConfig, Window } from '../config/app';\n\nimport { MainConfig } from '../config/main';\nimport { SettingManager } from '../settings/main';\nimport { notifyAllWindows, WindowOpenerParams } from '../main/window';\nimport { listen } from '../ipc/main';\nimport {\n  Backend,\n  ModelManager,\n  BackendClass as DatabaseBackendClass,\n} from '../db/main/base';\n\nimport { makeWindowEndpoint } from '../ipc/main';\nimport { openWindow, closeWindow } from '../main/window';\n\n\nexport interface MainApp<A extends AppConfig, M extends MainConfig<A>> {\n  /* Object returned by initMain. */\n\n  app: App\n  isMacOS: boolean\n  isDevelopment: boolean\n  managers: Record<keyof A[\"data\"], ModelManager<any, any>>\n  databases: Record<keyof M[\"databases\"], Backend>\n  openWindow: (windowName: keyof A[\"windows\"]) => void\n  settings: SettingManager\n}\n\n\nexport const initMain = async <C extends MainConfig<any>>(config: C): Promise<MainApp<any, C>> => {\n\n  // Prevent windows from closing while app is initialized\n  app.on('window-all-closed', (e: any) => e.preventDefault());\n\n  log.catchErrors({ showDialog: true });\n\n  if (config.app.singleInstance) {\n    // Ensure only one instance of the app can run at a time on given userâ€™s machine\n    // by exiting any future instances\n    if (!app.requestSingleInstanceLock()) {\n      app.exit(0);\n    }\n  }\n\n\n  /* Helper functions */\n\n  function _openWindow(windowName: keyof typeof config.app.windows, extraComponentParams: string = '') {\n    log.verbose(\"C/main: Opening window\", windowName);\n\n    const defaultParams = config.app.windows[windowName].openerParams;\n\n    const openerParams = {\n      ...defaultParams,\n      componentParams: `${defaultParams.componentParams}&${extraComponentParams}`,\n    };\n\n    return openWindow({\n      ...openerParams,\n      component: windowName,\n      config: config.app,\n    });\n  }\n\n  function _closeWindow(windowName: keyof typeof config.app.windows) {\n    log.verbose(`C/main: Closing window ${String(windowName)}`);\n\n    closeWindow(config.app.windows[windowName].openerParams.title);\n  }\n\n  function _requestSettings(settingIDs: string[]): Promise<void> {\n    /* Open settings window, prompting the user\n       to fill in parameters required for application\n       to perform a function.\n       The window is expected to use commitSetting IPC calls,\n       which is how default settings widgets work. */\n\n    const settingsWindow = config.app.windows[config.app.settingsWindowID];\n    if (settingsWindow) {\n      return new Promise<void>(async (resolve, reject) => {\n\n        const openedWindow = await _openWindow(\n          config.app.settingsWindowID,\n          `requiredSettings=${settingIDs.join(',')}`);\n\n        openedWindow.on('closed', () => {\n          const missingRequiredSettings = settingIDs.\n            map((settingID) =>  settings.getValue(settingID)).\n            filter((settingVal) => settingVal === undefined);\n          if (missingRequiredSettings.length > 0) {\n            log.warn(\n              \"C/main: User closed settings window with missing settings left\",\n              missingRequiredSettings)\n            reject();\n          } else {\n            log.verbose(\"C/main: User provider all missing settings\")\n            resolve();\n          }\n        })\n\n      });\n    } else {\n      throw new Error(\"Settings were requested, but settings window is not specified\");\n    }\n  }\n\n  // TODO: This workaround may or may not be necessary\n  if (config.disableGPU) {\n    app.disableHardwareAcceleration();\n  }\n\n  // Catch unhandled errors in electron-log\n  log.catchErrors({ showDialog: true });\n\n  await app.whenReady();\n\n  // Show splash window, if configured\n  const splashWindow = config.app.windows[config.app.splashWindowID];\n  if (splashWindow) {\n    _openWindow(config.app.splashWindowID);\n  }\n\n  const isMacOS = process.platform === 'darwin';\n  const isDevelopment = process.env.NODE_ENV !== 'production' || config.app.forceDevelopmentMode;\n\n  const settings = new SettingManager(config.appDataPath, config.settingsFileName);\n  settings.setUpIPC();\n\n\n  // Prepare database backends & request configuration if needed\n\n  log.debug(\"C/initMain: DB: Reading backend config\", config.databases);\n\n  type BackendInfo = {\n    dbName: string\n    backendClass: DatabaseBackendClass<any, any, any>\n    backendOptions: any\n  };\n  let dbBackendClasses: BackendInfo[];\n  dbBackendClasses = (await Promise.all(Object.entries(config.databases).map(\n    async ([dbName, dbConf]) => {\n      log.debug(\"C/initMain: DB: Reading backend config\", dbName, dbConf);\n\n      const DBBackendClass = dbConf.backend;\n      if (DBBackendClass.registerSettingsForConfigurableOptions) {\n        DBBackendClass.registerSettingsForConfigurableOptions(settings, dbConf.options, dbName);\n      }\n      return {\n        dbName: dbName,\n        backendClass: DBBackendClass,\n        backendOptions: dbConf.options,\n      };\n    }\n  )));\n\n\n  // Request settings from user via an initial configuration window, if required\n\n  const missingSettings = await settings.listMissingRequiredSettings();\n  // List of IDs of settings that need to be filled out.\n\n  if (missingSettings.length > 0) {\n    log.verbose(\"C/initMain: Missing settings present, requesting from the user\", missingSettings);\n    await _requestSettings(missingSettings);\n  } else {\n    log.debug(\"C/initMain: No missing settings found\");\n  }\n\n\n  // Construct database backend instances\n\n  type DBs = MainApp<any, C>[\"databases\"];\n  let databases: DBs\n\n  try {\n    databases = (await Promise.all(dbBackendClasses.map(\n      async ({ dbName, backendClass, backendOptions }) => {\n        const DBBackendClass = backendClass;\n\n        log.verbose(\"C/initMain: DB: Completing backend options from\", backendOptions);\n\n        let options: any;\n        if (DBBackendClass.completeOptionsFromSettings) {\n          options = await DBBackendClass.completeOptionsFromSettings(\n            settings,\n            backendOptions,\n            dbName);\n        } else {\n          options = backendOptions;\n        }\n\n        log.verbose(\"C/initMain: DB: Initializing backend with options\", backendOptions);\n\n        const backend = new DBBackendClass(\n           options,\n           async (payload: any) => await reportBackendStatusToAllWindows(dbName, payload));\n\n        if (backend.setUpIPC) {\n          backend.setUpIPC(dbName);\n        }\n\n        return { [dbName]: backend };\n      }\n    ))).reduce((val, acc) => ({ ...acc, ...val }), {} as Partial<DBs>) as DBs;\n  } catch (e) {\n    log.error(\"C/initMain: Failed to initialize database backends\");\n    throw e;\n  }\n\n\n  // Initialize model managers\n\n  log.debug(\"C/initMain: Initializing data model managers\", config.managers)\n\n  type Managers = MainApp<any, C>[\"managers\"];\n  let managers: Managers;\n\n  managers = (await Promise.all(Object.entries(config.managers).map(\n    async ([modelName, managerConf]) => {\n      const modelInfo = config.app.data[modelName];\n\n      log.verbose(\"C/initMain: Initializing model manager for DB\", managerConf.dbName, databases);\n\n      const db = databases[managerConf.dbName];\n      const ManagerClass = managerConf.options.cls;\n      const manager = new ManagerClass(\n        db, managerConf.options, modelInfo,\n        async (changedIDs?: any[]) => await reportModifiedDataToAllWindows(modelName, changedIDs?.map(id => `${id}`)));\n\n      if (manager.setUpIPC) {\n        manager.setUpIPC(modelName);\n      }\n\n      return { [modelName]: manager };\n    }\n  )))\n  .reduce((val, acc) => ({ ...acc, ...val }), {} as Partial<Managers>) as Managers;\n\n\n  listen<{}, { databases: (keyof MainApp<any, C>[\"databases\"])[] }>\n  ('list-databases', async () => {\n    return {\n      databases: Object.keys(databases),\n    };\n  });\n\n\n  listen<{ id: keyof typeof config.app.windows, params?: Omit<WindowOpenerParams, 'component'> }, {}>\n  ('open-predefined-window', async ({ id, params }) => {\n    const paramsWithDefaults = { ...config.app.windows[id].openerParams, ...params || {}, component: id, config: config.app };\n    openWindow(paramsWithDefaults);\n    return {};\n  });\n\n\n  listen<WindowOpenerParams, {}>\n  ('open-arbitrary-window', async (params) => {\n    openWindow(params);\n    return {};\n  });\n\n\n  // Initialize window-opening endpoints\n  for (const [windowName, window] of Object.entries(config.app.windows)) {\n    makeWindowEndpoint(windowName, () => ({\n      ...(window as Window).openerParams,\n      component: windowName,\n      config: config.app,\n    }));\n  }\n\n\n  // Open main window\n  await _openWindow('default');\n\n  if (splashWindow) {\n    _closeWindow(config.app.splashWindowID);\n  }\n\n  // DB backend initialization happens after the app is ready,\n  // since it may require user input (and hence GUI interaction)\n  // of sensitive data not suitable for settings,\n  // namely authentication keys if data source requires auth.\n  // TODO: Teaching the framework to encrypt settings\n  // might let us make authentication data entry\n  // part of required settings entry\n  // and start data source initialization early.\n  for (const [backendID, backend] of Object.entries(databases)) {\n    log.debug(\"C/initMain: Initializing DB backend\", backendID);\n    await backend.init();\n  }\n\n  const initializedMain: MainApp<typeof config.app, typeof config> = {\n    app,\n    isMacOS,\n    isDevelopment,\n    managers,\n    databases,\n    settings,\n    openWindow: _openWindow,\n  };\n\n  return initializedMain;\n};\n\n\nconst reportBackendStatusToAllWindows = async (dbName: string, payload: object) => {\n  return await notifyAllWindows(`db-${dbName}-status`, payload);\n};\n\n\nconst reportModifiedDataToAllWindows = async (modelName: string, changedIDs?: string[]) => {\n  // TODO: If too many update calls with one ID affect performance,\n  // debounce this function, combining shorter ID lists and reporting more of them at once\n  //log.debug(\"C/main: Reporting modified data\", modelName, changedIDs);\n  return await notifyAllWindows(`model-${modelName}-objects-changed`, { ids: changedIDs });\n};\n"]}