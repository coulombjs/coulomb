{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/config/main.ts"],"names":[],"mappings":"","sourcesContent":["import { AppConfig, ModelInfo } from './app';\nimport { Model, AnyIDType } from '../db/models';\nimport {\n  BackendClass as DatabaseBackendClass,\n  Backend as DatabaseBackend,\n  ManagedDataChangeReporter,\n  ModelManager,\n} from '../db/main/base';\n\n\nexport interface MainConfig<App extends AppConfig> {\n  app: App\n  singleInstance: boolean\n  disableGPU: boolean\n  appDataPath: string\n  settingsFileName: string\n  databases: {\n    default: DatabaseConfig\n    [dbName: string]: DatabaseConfig\n  }\n  managers: {\n    [DT in keyof App[\"data\"]]: ManagerConfig<any>\n  }\n}\n\n\n// Databases\n\ninterface DatabaseConfig {\n  backend: DatabaseBackendClass<any, any, any>\n\n  // If not all options are supplied in configuration in code,\n  // the missing ones will be required from the user via initial configuration window.\n  options: any\n}\n\n\n// Model managers\n\nexport interface ManagerClass<\n  M extends Model,\n  IDType extends AnyIDType,\n  Options extends ManagerOptions<M>,\n  DB extends DatabaseBackend> {\n\n  new (\n    db: DB,\n    managerConfig: Options,\n    modelInfo: ModelInfo,\n    reportChangedData: ManagedDataChangeReporter<IDType>): ModelManager<M, IDType>\n}\n\nexport interface ManagerOptions<M extends Model> {\n  /* Options specific to Isomorphic Git-YAML model manager.\n     TODO: Should be moved into isogit-yaml module. */\n\n  // Model manager class resolver\n  cls: ManagerClass<M, any, any, any>\n}\n\nexport interface ManagerConfig<M> {\n  // The corresponding key in MainConfig[\"databases\"]\n  dbName: string\n\n  // Any options to be passed to manager constructor,\n  // must conform to class in corresponding ManagerOptions\n  options: ManagerOptions<M>\n}\n"]}