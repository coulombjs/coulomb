import * as log from 'electron-log';
import * as fs from 'fs-extra';
import * as path from 'path';
import { listen } from '../../../ipc/main';
import { Setting } from '../../../settings/main';
import { UniqueConstraintError } from '../../errors';
import { VersionedFilesystemBackend, } from '../../main/base';
import { IsoGitWrapper } from './isogit';
const DEFAULT_SYNC_INTERVAL = 50000;
class Backend extends VersionedFilesystemBackend {
    constructor(opts, reportBackendStatus) {
        super();
        this.opts = opts;
        this.reportBackendStatus = reportBackendStatus;
        this.gitSyncInterval = null;
        this.fs = opts.fsWrapper;
        this.git = new IsoGitWrapper(fs, this.opts.repoURL, this.opts.upstreamRepoURL, this.opts.username, { name: this.opts.authorName, email: this.opts.authorEmail }, this.opts.workDir, this.opts.corsProxyURL, 
        // The status of this backend is reduced to Git repo status now.
        // Potentially it should include filesystem-related status as well,
        // reporting issues with e.g. insufficient disk space.
        this.reportBackendStatus);
        this.managers = [];
        this.gitSyncIntervalDelay = opts.syncInterval || DEFAULT_SYNC_INTERVAL;
        this.synchronize = this.synchronize.bind(this);
    }
    async describe() {
        return {
            verboseName: "Git+YAML",
            verboseNameLong: "Git-versioned YAML file tree",
            gitRepo: this.opts.repoURL,
            gitUsername: this.opts.username,
            status: this.git.getStatus(),
        };
    }
    static registerSettingsForConfigurableOptions(settings, initialOptions, dbID) {
        const paneLabelPostfix = dbID !== 'default' ? ` for “${dbID}”` : '';
        const settingIDPrefix = `db_${dbID}_`;
        const paneID = `db_${dbID}`;
        settings.configurePane({
            id: paneID,
            label: `Database settings${paneLabelPostfix}`,
            icon: 'git-merge',
        });
        settings.register(new Setting(paneID, `${settingIDPrefix}gitRepoUrl`, 'text', initialOptions.repoURL === undefined, "Git repository URL"));
        settings.register(new Setting(paneID, `${settingIDPrefix}gitUsername`, 'text', initialOptions.username === undefined, "Git username"));
        settings.register(new Setting(paneID, `${settingIDPrefix}gitAuthorName`, 'text', initialOptions.authorName === undefined, "Git author name"));
        settings.register(new Setting(paneID, `${settingIDPrefix}gitAuthorEmail`, 'text', initialOptions.authorEmail === undefined, "Git author email"));
    }
    static async completeOptionsFromSettings(settings, availableOptions, dbID) {
        const settingIDPrefix = `db_${dbID}_`;
        async function getSetting(settingID) {
            return await settings.getValue(`${settingIDPrefix}${settingID}`);
        }
        const fsWrapperClass = (await availableOptions.fsWrapperClass()).default;
        return {
            workDir: availableOptions.workDir,
            corsProxyURL: availableOptions.corsProxyURL,
            upstreamRepoURL: availableOptions.upstreamRepoURL,
            fsWrapperClass: availableOptions.fsWrapperClass,
            fsWrapper: new fsWrapperClass(availableOptions.workDir),
            repoURL: ((await getSetting('gitRepoUrl'))
                || availableOptions.repoURL),
            username: ((await getSetting('gitUsername'))
                || availableOptions.username),
            authorName: ((await getSetting('gitAuthorName'))
                || availableOptions.authorName),
            authorEmail: ((await getSetting('gitAuthorEmail'))
                || availableOptions.authorEmail),
        };
    }
    async registerManager(manager) {
        this.managers.push(manager);
    }
    async init(forceReset = false) {
        let doInitialize;
        try {
            if (forceReset === true) {
                log.warn("C/db/isogit-yaml: Git is being force reinitialized");
                doInitialize = true;
            }
            else if (!(await this.git.isUsingRemoteURLs({
                origin: this.opts.repoURL,
                upstream: this.opts.upstreamRepoURL
            }))) {
                log.warn("C/db/isogit-yaml: Git has mismatching remote URLs, reinitializing");
                doInitialize = true;
            }
            else {
                log.info("C/db/isogit-yaml: Git is already initialized");
                doInitialize = false;
            }
        }
        catch (e) {
            doInitialize = true;
        }
        if (doInitialize) {
            await this.git.destroy();
        }
        if (this.gitSyncInterval) {
            clearInterval(this.gitSyncInterval);
        }
        //this.gitSyncInterval = setInterval(this.synchronize, this.gitSyncIntervalDelay);
        //await this.synchronize();
    }
    async read(objID, metaFields) {
        return await this.fs.read(this.getRef(objID), metaFields);
    }
    async readVersion(objID, version) {
        // NOTE: This will fail with YAMLDirectoryWrapper.
        // objID must refer to a single file.
        // TODO: Support compound objects (directories)
        // by moving the file data parsing logic into manager
        // and adding Backend.readTree().
        const blob = await this.git.readFileBlobAtCommit(this.getRef(objID), version);
        return this.fs.parseData(blob);
    }
    async create(obj, objPath, metaFields) {
        if (await this.fs.exists(objPath)) {
            throw new UniqueConstraintError("filesystem path", objPath);
        }
        log.debug("Creating bject", objPath);
        await this.fs.write(objPath, obj, metaFields);
    }
    async commit(objIDs, message) {
        await this.resetOrphanedFileChanges();
        const paths = (await this.readUncommittedFileInfo()).
            filter(fileinfo => gitPathMatches(objIDs, fileinfo.path)).
            map(fileinfo => fileinfo.path);
        if (paths.length > 0) {
            // TODO: Make Git track which files got committed (had changes),
            // and return paths
            await this.git.stageAndCommit(paths, message);
        }
    }
    async discard(objIDs) {
        const paths = (await this.readUncommittedFileInfo()).
            filter(fileinfo => gitPathMatches(objIDs, fileinfo.path)).
            map(fileinfo => fileinfo.path);
        if (paths.length > 0) {
            await this.git.resetFiles(paths);
        }
    }
    async listUncommitted() {
        const files = await this.readUncommittedFileInfo();
        const objIDs = files.
            map(fileinfo => fileinfo.path);
        // Discard duplicates from the list
        return objIDs.filter(function (objID, idx, self) {
            return idx === self.indexOf(objID);
        });
    }
    async listIDs(query) {
        return await this.fs.listIDs({ subdir: query.subdir });
    }
    async getIndex(subdir, idField, onlyIDs) {
        const idsToSelect = onlyIDs !== undefined
            ? onlyIDs.map(id => this.getRef(id))
            : undefined;
        const objs = await this.fs.readAll({ subdir, onlyIDs: idsToSelect });
        var idx = {};
        for (const obj of objs) {
            idx[`${obj[idField]}`] = obj;
        }
        return idx;
    }
    async update(objID, newData, idField) {
        await this.fs.write(this.getRef(objID), newData);
    }
    async delete(objID) {
        await this.fs.write(this.getRef(objID), undefined);
    }
    async resetOrphanedFileChanges() {
        /* Remove from filesystem any files under our FS backend path
           that the backend cannot account for,
           but which may appear as unstaged changes to Git. */
        const orphanFilePaths = (await this.readUncommittedFileInfo()).
            map(fileinfo => fileinfo.path).
            filter(filepath => this.managers.map(mgr => mgr.managesFileAtPath(filepath)).indexOf(true) < 0);
        if (orphanFilePaths.length > 0) {
            log.warn("C/db/isogit-yaml: Resetting orphaned files", orphanFilePaths);
            await this.git.resetFiles(orphanFilePaths);
        }
    }
    async readUncommittedFileInfo() {
        /* Returns a list of objects that map Git-relative paths to actual object IDs.
           Where object ID is undefined, that implies file is “orphaned”
           (not recognized as belonging to any object managed by this store). */
        const changedFiles = await this.git.listChangedFiles(['.']);
        return await Promise.all(changedFiles.map(fp => {
            return { path: fp };
        }));
    }
    getRef(objID) {
        /* Returns FS backend reference from DB backend object ID. */
        return `${objID}`;
    }
    async synchronize() {
        await this.git.synchronize();
        for (const mgr of this.managers) {
            mgr.reportUpdatedData();
        }
    }
    async checkUncommitted() {
        return await this.git.checkUncommitted();
    }
    setUpIPC(dbID) {
        super.setUpIPC(dbID);
        log.verbose("C/db/isogit-yaml: Setting up IPC");
        const prefix = `db-${dbID}`;
        listen(`${prefix}-count-uncommitted`, async () => {
            return { numUncommitted: (await this.git.listChangedFiles()).length };
        });
        listen(`${prefix}-git-trigger-sync`, async () => {
            this.synchronize();
            return { started: true };
        });
        listen(`${prefix}-git-discard-unstaged`, async () => {
            await this.git.resetFiles();
            return { success: true };
        });
        listen(`${prefix}-git-update-status`, async () => {
            return { hasUncommittedChanges: await this.checkUncommitted() };
        });
        listen(`${prefix}-git-set-password`, async ({ password }) => {
            // WARNING: Don’t log password
            log.verbose("C/db/isogit-yaml: received git-set-password request");
            this.git.setPassword(password);
            this.synchronize();
            return { success: true };
        });
        listen(`${prefix}-git-config-get`, async () => {
            log.verbose("C/db/isogit-yaml: received git-config request");
            return {
                originURL: await this.git.getOriginUrl(),
                name: await this.git.configGet('user.name'),
                email: await this.git.configGet('user.email'),
                username: await this.git.configGet('credentials.username'),
            };
        });
    }
}
export const BackendClass = Backend;
export default Backend;
function gitPathMatches(objIDs, gitPath) {
    if (objIDs.indexOf(gitPath) >= 0) {
        return true;
    }
    const parsed = path.parse(gitPath);
    // Backend operates file references as paths without extensions.
    // FS wrapper expands paths, adding extension if necessary.
    // Git, however, doesn’t know about the extensions.
    // For YAML files with extensions (not directories),
    // try comparing with extensions removed.
    return objIDs.indexOf(path.join(parsed.dir, parsed.name)) >= 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kYi9pc29naXQteWFtbC9tYWluL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEdBQUcsTUFBTSxjQUFjLENBQUM7QUFDcEMsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFFN0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQWtCLE1BQU0sd0JBQXdCLENBQUM7QUFHakUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBSXJELE9BQU8sRUFHTCwwQkFBMEIsR0FHM0IsTUFBTSxpQkFBaUIsQ0FBQztBQUl6QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBR3pDLE1BQU0scUJBQXFCLEdBQUcsS0FBSyxDQUFDO0FBK0JwQyxNQUFNLE9BQVEsU0FBUSwwQkFBMEI7SUFTOUMsWUFDWSxJQUFvQixFQUNwQixtQkFBMEM7UUFFcEQsS0FBSyxFQUFFLENBQUM7UUFIRSxTQUFJLEdBQUosSUFBSSxDQUFnQjtRQUNwQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXVCO1FBTjlDLG9CQUFlLEdBQTBCLElBQUksQ0FBQztRQVVwRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLGFBQWEsQ0FDMUIsRUFBRSxFQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQ2xCLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJ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QU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUU7Z0JBQ3hDLElBQUksRUFBRSxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQztnQkFDM0MsS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO2dCQUM3QyxRQUFRLEVBQUUsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsQ0FBQzthQUUzRCxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQTJFLE9BQU8sQ0FBQTtBQUUzRyxlQUFlLE9BQU8sQ0FBQztBQUd2QixTQUFTLGNBQWMsQ0FBQyxNQUFnQixFQUFFLE9BQWU7SUFDdkQsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNoQyxPQUFPLElBQUksQ0FBQztLQUNiO0lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUVuQyxnRUFBZ0U7SUFDaEUsMkRBQTJEO0lBQzNELG1EQUFtRDtJQUNuRCxvREFBb0Q7SUFDcEQseUNBQXlDO0lBQ3pDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsb2cgZnJvbSAnZWxlY3Ryb24tbG9nJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGxpc3RlbiB9IGZyb20gJy4uLy4uLy4uL2lwYy9tYWluJztcbmltcG9ydCB7IFNldHRpbmcsIFNldHRpbmdNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vLi4vc2V0dGluZ3MvbWFpbic7XG5cbmltcG9ydCB7IEluZGV4IH0gZnJvbSAnLi4vLi4vcXVlcnknO1xuaW1wb3J0IHsgVW5pcXVlQ29uc3RyYWludEVycm9yIH0gZnJvbSAnLi4vLi4vZXJyb3JzJztcblxuaW1wb3J0IHsgRmlsZXN5c3RlbVdyYXBwZXIgfSBmcm9tICcuLi8uLi9tYWluL2ZzLXdyYXBwZXInO1xuXG5pbXBvcnQge1xuICBCYWNrZW5kQ2xhc3MgYXMgQmFzZUJhY2tlbmRDbGFzcyxcbiAgQmFja2VuZFN0YXR1c1JlcG9ydGVyIGFzIEJhc2VCYWNrZW5kU3RhdHVzUmVwb3J0ZXIsXG4gIFZlcnNpb25lZEZpbGVzeXN0ZW1CYWNrZW5kLFxuICBNb2RlbE1hbmFnZXIsXG4gIEZpbGVzeXN0ZW1NYW5hZ2VyLFxufSBmcm9tICcuLi8uLi9tYWluL2Jhc2UnO1xuXG5pbXBvcnQgeyBCYWNrZW5kRGVzY3JpcHRpb24sIEJhY2tlbmRTdGF0dXMgfSBmcm9tICcuLi9iYXNlJztcblxuaW1wb3J0IHsgSXNvR2l0V3JhcHBlciB9IGZyb20gJy4vaXNvZ2l0JztcblxuXG5jb25zdCBERUZBVUxUX1NZTkNfSU5URVJWQUwgPSA1MDAwMDtcblxuXG5pbnRlcmZhY2UgRml4ZWRCYWNrZW5kT3B0aW9ucyB7XG4gIC8qIFNldHRpbmdzIHN1cHBsaWVkIGJ5IHRoZSBkZXZlbG9wZXIgKi9cblxuICB3b3JrRGlyOiBzdHJpbmdcbiAgY29yc1Byb3h5VVJMOiBzdHJpbmdcbiAgdXBzdHJlYW1SZXBvVVJMOiBzdHJpbmdcbiAgZnNXcmFwcGVyQ2xhc3M6ICgpID0+IFByb21pc2U8eyBkZWZhdWx0OiBuZXcgKGJhc2VEaXI6IHN0cmluZykgPT4gRmlsZXN5c3RlbVdyYXBwZXI8YW55PiB9PlxuXG4gIHN5bmNJbnRlcnZhbD86IG51bWJlclxuICAvLyBIb3cgb2Z0ZW4gdG8gdHJ5IHRvIHN5bmNocm9uaXplIEdpdCByZW1vdGUgaW4gYmFja2dyb3VuZCwgaW4gbXMuXG4gIC8vIFN5bmNocm9uaXphdGlvbiB3aWxsIGJlIHNraXBwZWQgaWYgYW5vdGhlciBvbmUgaXMgYWxyZWFkeSBydW5uaW5nLlxufVxuaW50ZXJmYWNlIENvbmZpZ3VyYWJsZUJhY2tlbmRPcHRpb25zIHtcbiAgLyogU2V0dGluZ3MgdGhhdCB1c2VyIGNhbiBvciBtdXN0IHNwZWNpZnkgKi9cbiAgcmVwb1VSTDogc3RyaW5nXG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgYXV0aG9yTmFtZTogc3RyaW5nXG4gIGF1dGhvckVtYWlsOiBzdHJpbmdcbn1cbnR5cGUgQmFja2VuZE9wdGlvbnMgPSBGaXhlZEJhY2tlbmRPcHRpb25zICYgQ29uZmlndXJhYmxlQmFja2VuZE9wdGlvbnMgJiB7XG4gIGZzV3JhcHBlcjogRmlsZXN5c3RlbVdyYXBwZXI8YW55PlxufVxudHlwZSBJbml0aWFsQmFja2VuZE9wdGlvbnMgPSBGaXhlZEJhY2tlbmRPcHRpb25zICYgUGFydGlhbDxDb25maWd1cmFibGVCYWNrZW5kT3B0aW9ucz5cblxuXG50eXBlIEJhY2tlbmRTdGF0dXNSZXBvcnRlciA9IEJhc2VCYWNrZW5kU3RhdHVzUmVwb3J0ZXI8QmFja2VuZFN0YXR1cz5cblxuXG5jbGFzcyBCYWNrZW5kIGV4dGVuZHMgVmVyc2lvbmVkRmlsZXN5c3RlbUJhY2tlbmQge1xuICAvKiBDb21iaW5lcyBhIGZpbGVzeXN0ZW0gc3RvcmFnZSB3aXRoIEdpdC4gKi9cblxuICBwcml2YXRlIGdpdDogSXNvR2l0V3JhcHBlcjtcbiAgcHJpdmF0ZSBnaXRTeW5jSW50ZXJ2YWxEZWxheTogbnVtYmVyO1xuICBwcml2YXRlIGdpdFN5bmNJbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBmczogRmlsZXN5c3RlbVdyYXBwZXI8YW55PjtcbiAgcHJpdmF0ZSBtYW5hZ2VyczogKEZpbGVzeXN0ZW1NYW5hZ2VyICYgTW9kZWxNYW5hZ2VyPGFueSwgYW55LCBhbnk+KVtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHJpdmF0ZSBvcHRzOiBCYWNrZW5kT3B0aW9ucyxcbiAgICAgIHByaXZhdGUgcmVwb3J0QmFja2VuZFN0YXR1czogQmFja2VuZFN0YXR1c1JlcG9ydGVyKSB7XG5cbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5mcyA9IG9wdHMuZnNXcmFwcGVyO1xuXG4gICAgdGhpcy5naXQgPSBuZXcgSXNvR2l0V3JhcHBlcihcbiAgICAgIGZzLFxuICAgICAgdGhpcy5vcHRzLnJlcG9VUkwsXG4gICAgICB0aGlzLm9wdHMudXBzdHJlYW1SZXBvVVJMLFxuICAgICAgdGhpcy5vcHRzLnVzZXJuYW1lLFxuICAgICAgeyBuYW1lOiB0aGlzLm9wdHMuYXV0aG9yTmFtZSwgZW1haWw6IHRoaXMub3B0cy5hdXRob3JFbWFpbCB9LFxuICAgICAgdGhpcy5vcHRzLndvcmtEaXIsXG4gICAgICB0aGlzLm9wdHMuY29yc1Byb3h5VVJMLFxuXG4gICAgICAvLyBUaGUgc3RhdHVzIG9mIHRoaXMgYmFja2VuZCBpcyByZWR1Y2VkIHRvIEdpdCByZXBvIHN0YXR1cyBub3cuXG4gICAgICAvLyBQb3RlbnRpYWxseSBpdCBzaG91bGQgaW5jbHVkZSBmaWxlc3lzdGVtLXJlbGF0ZWQgc3RhdHVzIGFzIHdlbGwsXG4gICAgICAvLyByZXBvcnRpbmcgaXNzdWVzIHdpdGggZS5nLiBpbnN1ZmZpY2llbnQgZGlzayBzcGFjZS5cbiAgICAgIHRoaXMucmVwb3J0QmFja2VuZFN0YXR1cyxcbiAgICApO1xuXG4gICAgdGhpcy5tYW5hZ2VycyA9IFtdO1xuXG4gICAgdGhpcy5naXRTeW5jSW50ZXJ2YWxEZWxheSA9IG9wdHMuc3luY0ludGVydmFsIHx8IERFRkFVTFRfU1lOQ19JTlRFUlZBTDtcbiAgICB0aGlzLnN5bmNocm9uaXplID0gdGhpcy5zeW5jaHJvbml6ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGRlc2NyaWJlKCk6IFByb21pc2U8QmFja2VuZERlc2NyaXB0aW9uPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZlcmJvc2VOYW1lOiBcIkdpdCtZQU1MXCIsXG4gICAgICB2ZXJib3NlTmFtZUxvbmc6IFwiR2l0LXZlcnNpb25lZCBZQU1MIGZpbGUgdHJlZVwiLFxuICAgICAgZ2l0UmVwbzogdGhpcy5vcHRzLnJlcG9VUkwsXG4gICAgICBnaXRVc2VybmFtZTogdGhpcy5vcHRzLnVzZXJuYW1lLFxuICAgICAgc3RhdHVzOiB0aGlzLmdpdC5nZXRTdGF0dXMoKSxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyU2V0dGluZ3NGb3JDb25maWd1cmFibGVPcHRpb25zKFxuICAgICAgc2V0dGluZ3M6IFNldHRpbmdNYW5hZ2VyLFxuICAgICAgaW5pdGlhbE9wdGlvbnM6IEluaXRpYWxCYWNrZW5kT3B0aW9ucyxcbiAgICAgIGRiSUQ6IHN0cmluZykge1xuXG4gICAgY29uc3QgcGFuZUxhYmVsUG9zdGZpeCA9IGRiSUQgIT09ICdkZWZhdWx0JyA/IGAgZm9yIOKAnCR7ZGJJRH3igJ1gIDogJyc7XG4gICAgY29uc3Qgc2V0dGluZ0lEUHJlZml4ID0gYGRiXyR7ZGJJRH1fYDtcbiAgICBjb25zdCBwYW5lSUQgPSBgZGJfJHtkYklEfWA7XG5cbiAgICBzZXR0aW5ncy5jb25maWd1cmVQYW5lKHtcbiAgICAgIGlkOiBwYW5lSUQsXG4gICAgICBsYWJlbDogYERhdGFiYXNlIHNldHRpbmdzJHtwYW5lTGFiZWxQb3N0Zml4fWAsXG4gICAgICBpY29uOiAnZ2l0LW1lcmdlJyxcbiAgICB9KTtcblxuICAgIHNldHRpbmdzLnJlZ2lzdGVyKG5ldyBTZXR0aW5nPHN0cmluZz4oXG4gICAgICBwYW5lSUQsXG4gICAgICBgJHtzZXR0aW5nSURQcmVmaXh9Z2l0UmVwb1VybGAsXG4gICAgICAndGV4dCcsXG4gICAgICBpbml0aWFsT3B0aW9ucy5yZXBvVVJMID09PSB1bmRlZmluZWQsXG4gICAgICBcIkdpdCByZXBvc2l0b3J5IFVSTFwiLFxuICAgICkpO1xuXG4gICAgc2V0dGluZ3MucmVnaXN0ZXIobmV3IFNldHRpbmc8c3RyaW5nPihcbiAgICAgIHBhbmVJRCxcbiAgICAgIGAke3NldHRpbmdJRFByZWZpeH1naXRVc2VybmFtZWAsXG4gICAgICAndGV4dCcsXG4gICAgICBpbml0aWFsT3B0aW9ucy51c2VybmFtZSA9PT0gdW5kZWZpbmVkLFxuICAgICAgXCJHaXQgdXNlcm5hbWVcIixcbiAgICApKTtcblxuICAgIHNldHRpbmdzLnJlZ2lzdGVyKG5ldyBTZXR0aW5nPHN0cmluZz4oXG4gICAgICBwYW5lSUQsXG4gICAgICBgJHtzZXR0aW5nSURQcmVmaXh9Z2l0QXV0aG9yTmFtZWAsXG4gICAgICAndGV4dCcsXG4gICAgICBpbml0aWFsT3B0aW9ucy5hdXRob3JOYW1lID09PSB1bmRlZmluZWQsXG4gICAgICBcIkdpdCBhdXRob3IgbmFtZVwiLFxuICAgICkpO1xuXG4gICAgc2V0dGluZ3MucmVnaXN0ZXIobmV3IFNldHRpbmc8c3RyaW5nPihcbiAgICAgIHBhbmVJRCxcbiAgICAgIGAke3NldHRpbmdJRFByZWZpeH1naXRBdXRob3JFbWFpbGAsXG4gICAgICAndGV4dCcsXG4gICAgICBpbml0aWFsT3B0aW9ucy5hdXRob3JFbWFpbCA9PT0gdW5kZWZpbmVkLFxuICAgICAgXCJHaXQgYXV0aG9yIGVtYWlsXCIsXG4gICAgKSk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGFzeW5jIGNvbXBsZXRlT3B0aW9uc0Zyb21TZXR0aW5ncyhcbiAgICAgIHNldHRpbmdzOiBTZXR0aW5nTWFuYWdlcixcbiAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IEluaXRpYWxCYWNrZW5kT3B0aW9ucyxcbiAgICAgIGRiSUQ6IHN0cmluZykge1xuXG4gICAgY29uc3Qgc2V0dGluZ0lEUHJlZml4ID0gYGRiXyR7ZGJJRH1fYDtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIGdldFNldHRpbmc8VD4oc2V0dGluZ0lEOiBzdHJpbmcpOiBQcm9taXNlPFQ+IHtcbiAgICAgIHJldHVybiBhd2FpdCBzZXR0aW5ncy5nZXRWYWx1ZShgJHtzZXR0aW5nSURQcmVmaXh9JHtzZXR0aW5nSUR9YCkgYXMgVDtcbiAgICB9XG5cbiAgICBjb25zdCBmc1dyYXBwZXJDbGFzcyA9IChhd2FpdCBhdmFpbGFibGVPcHRpb25zLmZzV3JhcHBlckNsYXNzKCkpLmRlZmF1bHQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgd29ya0RpcjogYXZhaWxhYmxlT3B0aW9ucy53b3JrRGlyLFxuICAgICAgY29yc1Byb3h5VVJMOiBhdmFpbGFibGVPcHRpb25zLmNvcnNQcm94eVVSTCxcbiAgICAgIHVwc3RyZWFtUmVwb1VSTDogYXZhaWxhYmxlT3B0aW9ucy51cHN0cmVhbVJlcG9VUkwsXG4gICAgICBmc1dyYXBwZXJDbGFzczogYXZhaWxhYmxlT3B0aW9ucy5mc1dyYXBwZXJDbGFzcyxcbiAgICAgIGZzV3JhcHBlcjogbmV3IGZzV3JhcHBlckNsYXNzKGF2YWlsYWJsZU9wdGlvbnMud29ya0RpciksXG5cbiAgICAgIHJlcG9VUkw6IChcbiAgICAgICAgKGF3YWl0IGdldFNldHRpbmc8c3RyaW5nPignZ2l0UmVwb1VybCcpKVxuICAgICAgICB8fCBhdmFpbGFibGVPcHRpb25zLnJlcG9VUkwpIGFzIHN0cmluZyxcbiAgICAgIHVzZXJuYW1lOiAoXG4gICAgICAgIChhd2FpdCBnZXRTZXR0aW5nPHN0cmluZz4oJ2dpdFVzZXJuYW1lJykpXG4gICAgICAgIHx8IGF2YWlsYWJsZU9wdGlvbnMudXNlcm5hbWUpIGFzIHN0cmluZyxcbiAgICAgIGF1dGhvck5hbWU6IChcbiAgICAgICAgKGF3YWl0IGdldFNldHRpbmc8c3RyaW5nPignZ2l0QXV0aG9yTmFtZScpKVxuICAgICAgICB8fCBhdmFpbGFibGVPcHRpb25zLmF1dGhvck5hbWUpIGFzIHN0cmluZyxcbiAgICAgIGF1dGhvckVtYWlsOiAoXG4gICAgICAgIChhd2FpdCBnZXRTZXR0aW5nPHN0cmluZz4oJ2dpdEF1dGhvckVtYWlsJykpXG4gICAgICAgIHx8IGF2YWlsYWJsZU9wdGlvbnMuYXV0aG9yRW1haWwpIGFzIHN0cmluZyxcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcmVnaXN0ZXJNYW5hZ2VyKG1hbmFnZXI6IEZpbGVzeXN0ZW1NYW5hZ2VyICYgTW9kZWxNYW5hZ2VyPGFueSwgYW55LCBhbnk+KSB7XG4gICAgdGhpcy5tYW5hZ2Vycy5wdXNoKG1hbmFnZXIpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGluaXQoZm9yY2VSZXNldCA9IGZhbHNlKSB7XG4gICAgbGV0IGRvSW5pdGlhbGl6ZTogYm9vbGVhbjtcblxuICAgIHRyeSB7XG4gICAgICBpZiAoZm9yY2VSZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICBsb2cud2FybihcIkMvZGIvaXNvZ2l0LXlhbWw6IEdpdCBpcyBiZWluZyBmb3JjZSByZWluaXRpYWxpemVkXCIpO1xuICAgICAgICBkb0luaXRpYWxpemUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghKGF3YWl0IHRoaXMuZ2l0LmlzVXNpbmdSZW1vdGVVUkxzKHtcbiAgICAgICAgICBvcmlnaW46IHRoaXMub3B0cy5yZXBvVVJMLFxuICAgICAgICAgIHVwc3RyZWFtOiB0aGlzLm9wdHMudXBzdHJlYW1SZXBvVVJMfSkpKSB7XG4gICAgICAgIGxvZy53YXJuKFwiQy9kYi9pc29naXQteWFtbDogR2l0IGhhcyBtaXNtYXRjaGluZyByZW1vdGUgVVJMcywgcmVpbml0aWFsaXppbmdcIik7XG4gICAgICAgIGRvSW5pdGlhbGl6ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuaW5mbyhcIkMvZGIvaXNvZ2l0LXlhbWw6IEdpdCBpcyBhbHJlYWR5IGluaXRpYWxpemVkXCIpO1xuICAgICAgICBkb0luaXRpYWxpemUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkb0luaXRpYWxpemUgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChkb0luaXRpYWxpemUpIHtcbiAgICAgIGF3YWl0IHRoaXMuZ2l0LmRlc3Ryb3koKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5naXRTeW5jSW50ZXJ2YWwpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5naXRTeW5jSW50ZXJ2YWwpO1xuICAgIH1cblxuICAgIC8vdGhpcy5naXRTeW5jSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCh0aGlzLnN5bmNocm9uaXplLCB0aGlzLmdpdFN5bmNJbnRlcnZhbERlbGF5KTtcblxuICAgIC8vYXdhaXQgdGhpcy5zeW5jaHJvbml6ZSgpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWQob2JqSUQ6IHN0cmluZywgbWV0YUZpZWxkcz86IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZnMucmVhZCh0aGlzLmdldFJlZihvYmpJRCksIG1ldGFGaWVsZHMpIGFzIG9iamVjdDtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkVmVyc2lvbihvYmpJRDogc3RyaW5nLCB2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgICAvLyBOT1RFOiBUaGlzIHdpbGwgZmFpbCB3aXRoIFlBTUxEaXJlY3RvcnlXcmFwcGVyLlxuICAgIC8vIG9iaklEIG11c3QgcmVmZXIgdG8gYSBzaW5nbGUgZmlsZS5cblxuICAgIC8vIFRPRE86IFN1cHBvcnQgY29tcG91bmQgb2JqZWN0cyAoZGlyZWN0b3JpZXMpXG4gICAgLy8gYnkgbW92aW5nIHRoZSBmaWxlIGRhdGEgcGFyc2luZyBsb2dpYyBpbnRvIG1hbmFnZXJcbiAgICAvLyBhbmQgYWRkaW5nIEJhY2tlbmQucmVhZFRyZWUoKS5cblxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCB0aGlzLmdpdC5yZWFkRmlsZUJsb2JBdENvbW1pdCh0aGlzLmdldFJlZihvYmpJRCksIHZlcnNpb24pO1xuICAgIHJldHVybiB0aGlzLmZzLnBhcnNlRGF0YShibG9iKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBjcmVhdGU8TyBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4+KG9iajogTywgb2JqUGF0aDogc3RyaW5nLCBtZXRhRmllbGRzPzogKGtleW9mIE8pW10pIHtcbiAgICBpZiAoYXdhaXQgdGhpcy5mcy5leGlzdHMob2JqUGF0aCkpIHtcbiAgICAgIHRocm93IG5ldyBVbmlxdWVDb25zdHJhaW50RXJyb3IoXCJmaWxlc3lzdGVtIHBhdGhcIiwgb2JqUGF0aCk7XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhcIkNyZWF0aW5nIGJqZWN0XCIsIG9ialBhdGgpXG5cbiAgICBhd2FpdCB0aGlzLmZzLndyaXRlKG9ialBhdGgsIG9iaiwgbWV0YUZpZWxkcyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgY29tbWl0KG9iaklEczogc3RyaW5nW10sIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGF3YWl0IHRoaXMucmVzZXRPcnBoYW5lZEZpbGVDaGFuZ2VzKCk7XG5cbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gPSAoYXdhaXQgdGhpcy5yZWFkVW5jb21taXR0ZWRGaWxlSW5mbygpKS5cbiAgICAgIGZpbHRlcihmaWxlaW5mbyA9PiBnaXRQYXRoTWF0Y2hlcyhvYmpJRHMsIGZpbGVpbmZvLnBhdGgpKS5cbiAgICAgIG1hcChmaWxlaW5mbyA9PiBmaWxlaW5mby5wYXRoKTtcblxuICAgIGlmIChwYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBUT0RPOiBNYWtlIEdpdCB0cmFjayB3aGljaCBmaWxlcyBnb3QgY29tbWl0dGVkIChoYWQgY2hhbmdlcyksXG4gICAgICAvLyBhbmQgcmV0dXJuIHBhdGhzXG4gICAgICBhd2FpdCB0aGlzLmdpdC5zdGFnZUFuZENvbW1pdChwYXRocywgbWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGRpc2NhcmQob2JqSURzOiBzdHJpbmdbXSkge1xuXG4gICAgY29uc3QgcGF0aHM6IHN0cmluZ1tdID0gKGF3YWl0IHRoaXMucmVhZFVuY29tbWl0dGVkRmlsZUluZm8oKSkuXG4gICAgICBmaWx0ZXIoZmlsZWluZm8gPT4gZ2l0UGF0aE1hdGNoZXMob2JqSURzLCBmaWxlaW5mby5wYXRoKSkuXG4gICAgICBtYXAoZmlsZWluZm8gPT4gZmlsZWluZm8ucGF0aCk7XG5cbiAgICBpZiAocGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgYXdhaXQgdGhpcy5naXQucmVzZXRGaWxlcyhwYXRocyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RVbmNvbW1pdHRlZCgpIHtcbiAgICBjb25zdCBmaWxlcyA9IGF3YWl0IHRoaXMucmVhZFVuY29tbWl0dGVkRmlsZUluZm8oKTtcblxuICAgIGNvbnN0IG9iaklEczogc3RyaW5nW10gPSBmaWxlcy5cbiAgICAgIG1hcChmaWxlaW5mbyA9PiBmaWxlaW5mby5wYXRoKTtcblxuICAgIC8vIERpc2NhcmQgZHVwbGljYXRlcyBmcm9tIHRoZSBsaXN0XG4gICAgcmV0dXJuIG9iaklEcy5maWx0ZXIoZnVuY3Rpb24gKG9iaklELCBpZHgsIHNlbGYpIHtcbiAgICAgIHJldHVybiBpZHggPT09IHNlbGYuaW5kZXhPZihvYmpJRCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdElEcyhxdWVyeTogeyBzdWJkaXI6IHN0cmluZyB9KSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZnMubGlzdElEcyh7IHN1YmRpcjogcXVlcnkuc3ViZGlyIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEluZGV4KHN1YmRpcjogc3RyaW5nLCBpZEZpZWxkOiBzdHJpbmcsIG9ubHlJRHM/OiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IGlkc1RvU2VsZWN0ID0gb25seUlEcyAhPT0gdW5kZWZpbmVkXG4gICAgICA/IG9ubHlJRHMubWFwKGlkID0+IHRoaXMuZ2V0UmVmKGlkKSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgY29uc3Qgb2JqcyA9IGF3YWl0IHRoaXMuZnMucmVhZEFsbCh7IHN1YmRpciwgb25seUlEczogaWRzVG9TZWxlY3QgfSk7XG5cbiAgICB2YXIgaWR4OiBJbmRleDxhbnk+ID0ge307XG4gICAgZm9yIChjb25zdCBvYmogb2Ygb2Jqcykge1xuICAgICAgaWR4W2Ake29ialtpZEZpZWxkXX1gXSA9IG9iajtcbiAgICB9XG5cbiAgICByZXR1cm4gaWR4O1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHVwZGF0ZShvYmpJRDogc3RyaW5nLCBuZXdEYXRhOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBpZEZpZWxkOiBzdHJpbmcpIHtcbiAgICBhd2FpdCB0aGlzLmZzLndyaXRlKHRoaXMuZ2V0UmVmKG9iaklEKSwgbmV3RGF0YSk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVsZXRlKG9iaklEOiBzdHJpbmcpIHtcbiAgICBhd2FpdCB0aGlzLmZzLndyaXRlKHRoaXMuZ2V0UmVmKG9iaklEKSwgdW5kZWZpbmVkKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZXNldE9ycGhhbmVkRmlsZUNoYW5nZXMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLyogUmVtb3ZlIGZyb20gZmlsZXN5c3RlbSBhbnkgZmlsZXMgdW5kZXIgb3VyIEZTIGJhY2tlbmQgcGF0aFxuICAgICAgIHRoYXQgdGhlIGJhY2tlbmQgY2Fubm90IGFjY291bnQgZm9yLFxuICAgICAgIGJ1dCB3aGljaCBtYXkgYXBwZWFyIGFzIHVuc3RhZ2VkIGNoYW5nZXMgdG8gR2l0LiAqL1xuXG4gICAgY29uc3Qgb3JwaGFuRmlsZVBhdGhzID0gKGF3YWl0IHRoaXMucmVhZFVuY29tbWl0dGVkRmlsZUluZm8oKSkuXG4gICAgbWFwKGZpbGVpbmZvID0+IGZpbGVpbmZvLnBhdGgpLlxuICAgIGZpbHRlcihmaWxlcGF0aCA9PiB0aGlzLm1hbmFnZXJzLm1hcChtZ3IgPT4gbWdyLm1hbmFnZXNGaWxlQXRQYXRoKGZpbGVwYXRoKSkuaW5kZXhPZih0cnVlKSA8IDApO1xuXG4gICAgaWYgKG9ycGhhbkZpbGVQYXRocy5sZW5ndGggPiAwKSB7XG4gICAgICBsb2cud2FybihcIkMvZGIvaXNvZ2l0LXlhbWw6IFJlc2V0dGluZyBvcnBoYW5lZCBmaWxlc1wiLCBvcnBoYW5GaWxlUGF0aHMpO1xuICAgICAgYXdhaXQgdGhpcy5naXQucmVzZXRGaWxlcyhvcnBoYW5GaWxlUGF0aHMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVhZFVuY29tbWl0dGVkRmlsZUluZm8oKTogUHJvbWlzZTx7IHBhdGg6IHN0cmluZyB9W10+IHtcbiAgICAvKiBSZXR1cm5zIGEgbGlzdCBvZiBvYmplY3RzIHRoYXQgbWFwIEdpdC1yZWxhdGl2ZSBwYXRocyB0byBhY3R1YWwgb2JqZWN0IElEcy5cbiAgICAgICBXaGVyZSBvYmplY3QgSUQgaXMgdW5kZWZpbmVkLCB0aGF0IGltcGxpZXMgZmlsZSBpcyDigJxvcnBoYW5lZOKAnVxuICAgICAgIChub3QgcmVjb2duaXplZCBhcyBiZWxvbmdpbmcgdG8gYW55IG9iamVjdCBtYW5hZ2VkIGJ5IHRoaXMgc3RvcmUpLiAqL1xuXG4gICAgY29uc3QgY2hhbmdlZEZpbGVzOiBzdHJpbmdbXSA9IGF3YWl0IHRoaXMuZ2l0Lmxpc3RDaGFuZ2VkRmlsZXMoWycuJ10pO1xuICAgIHJldHVybiBhd2FpdCBQcm9taXNlLmFsbChjaGFuZ2VkRmlsZXMubWFwKGZwID0+IHtcbiAgICAgIHJldHVybiB7IHBhdGg6IGZwIH07XG4gICAgfSkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSZWYob2JqSUQ6IHN0cmluZyB8IG51bWJlcik6IHN0cmluZyB7XG4gICAgLyogUmV0dXJucyBGUyBiYWNrZW5kIHJlZmVyZW5jZSBmcm9tIERCIGJhY2tlbmQgb2JqZWN0IElELiAqL1xuICAgIHJldHVybiBgJHtvYmpJRH1gO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzeW5jaHJvbml6ZSgpIHtcbiAgICBhd2FpdCB0aGlzLmdpdC5zeW5jaHJvbml6ZSgpO1xuXG4gICAgZm9yIChjb25zdCBtZ3Igb2YgdGhpcy5tYW5hZ2Vycykge1xuICAgICAgbWdyLnJlcG9ydFVwZGF0ZWREYXRhKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBjaGVja1VuY29tbWl0dGVkKCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdpdC5jaGVja1VuY29tbWl0dGVkKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0VXBJUEMoZGJJRDogc3RyaW5nKSB7XG4gICAgc3VwZXIuc2V0VXBJUEMoZGJJRCk7XG5cbiAgICBsb2cudmVyYm9zZShcIkMvZGIvaXNvZ2l0LXlhbWw6IFNldHRpbmcgdXAgSVBDXCIpO1xuXG4gICAgY29uc3QgcHJlZml4ID0gYGRiLSR7ZGJJRH1gO1xuXG4gICAgbGlzdGVuPHt9LCB7IG51bVVuY29tbWl0dGVkOiBudW1iZXIgfT5cbiAgICAoYCR7cHJlZml4fS1jb3VudC11bmNvbW1pdHRlZGAsIGFzeW5jICgpID0+IHtcbiAgICAgIHJldHVybiB7IG51bVVuY29tbWl0dGVkOiAoYXdhaXQgdGhpcy5naXQubGlzdENoYW5nZWRGaWxlcygpKS5sZW5ndGggfTtcbiAgICB9KTtcblxuICAgIGxpc3Rlbjx7fSwgeyBzdGFydGVkOiB0cnVlIH0+XG4gICAgKGAke3ByZWZpeH0tZ2l0LXRyaWdnZXItc3luY2AsIGFzeW5jICgpID0+IHtcbiAgICAgIHRoaXMuc3luY2hyb25pemUoKTtcbiAgICAgIHJldHVybiB7IHN0YXJ0ZWQ6IHRydWUgfTtcbiAgICB9KTtcblxuICAgIGxpc3Rlbjx7fSwgeyBzdWNjZXNzOiB0cnVlIH0+XG4gICAgKGAke3ByZWZpeH0tZ2l0LWRpc2NhcmQtdW5zdGFnZWRgLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCB0aGlzLmdpdC5yZXNldEZpbGVzKCk7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH07XG4gICAgfSk7XG5cbiAgICBsaXN0ZW48e30sIHsgaGFzVW5jb21taXR0ZWRDaGFuZ2VzOiBib29sZWFuIH0+XG4gICAgKGAke3ByZWZpeH0tZ2l0LXVwZGF0ZS1zdGF0dXNgLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4geyBoYXNVbmNvbW1pdHRlZENoYW5nZXM6IGF3YWl0IHRoaXMuY2hlY2tVbmNvbW1pdHRlZCgpIH07XG4gICAgfSk7XG5cbiAgICBsaXN0ZW48eyBwYXNzd29yZDogc3RyaW5nIH0sIHsgc3VjY2VzczogdHJ1ZSB9PlxuICAgIChgJHtwcmVmaXh9LWdpdC1zZXQtcGFzc3dvcmRgLCBhc3luYyAoeyBwYXNzd29yZCB9KSA9PiB7XG4gICAgICAvLyBXQVJOSU5HOiBEb27igJl0IGxvZyBwYXNzd29yZFxuICAgICAgbG9nLnZlcmJvc2UoXCJDL2RiL2lzb2dpdC15YW1sOiByZWNlaXZlZCBnaXQtc2V0LXBhc3N3b3JkIHJlcXVlc3RcIik7XG5cbiAgICAgIHRoaXMuZ2l0LnNldFBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICAgIHRoaXMuc3luY2hyb25pemUoKTtcblxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0pO1xuXG4gICAgbGlzdGVuPHt9LCB7IG9yaWdpblVSTDogc3RyaW5nIHwgbnVsbCwgbmFtZTogc3RyaW5nIHwgbnVsbCwgZW1haWw6IHN0cmluZyB8IG51bGwsIHVzZXJuYW1lOiBzdHJpbmcgfCBudWxsIH0+XG4gICAgKGAke3ByZWZpeH0tZ2l0LWNvbmZpZy1nZXRgLCBhc3luYyAoKSA9PiB7XG4gICAgICBsb2cudmVyYm9zZShcIkMvZGIvaXNvZ2l0LXlhbWw6IHJlY2VpdmVkIGdpdC1jb25maWcgcmVxdWVzdFwiKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG9yaWdpblVSTDogYXdhaXQgdGhpcy5naXQuZ2V0T3JpZ2luVXJsKCksXG4gICAgICAgIG5hbWU6IGF3YWl0IHRoaXMuZ2l0LmNvbmZpZ0dldCgndXNlci5uYW1lJyksXG4gICAgICAgIGVtYWlsOiBhd2FpdCB0aGlzLmdpdC5jb25maWdHZXQoJ3VzZXIuZW1haWwnKSxcbiAgICAgICAgdXNlcm5hbWU6IGF3YWl0IHRoaXMuZ2l0LmNvbmZpZ0dldCgnY3JlZGVudGlhbHMudXNlcm5hbWUnKSxcbiAgICAgICAgLy8gUGFzc3dvcmQgbXVzdCBub3QgYmUgcmV0dXJuZWQsIG9mIGNvdXJzZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgQmFja2VuZENsYXNzOiBCYXNlQmFja2VuZENsYXNzPEluaXRpYWxCYWNrZW5kT3B0aW9ucywgQmFja2VuZE9wdGlvbnMsIEJhY2tlbmRTdGF0dXM+ID0gQmFja2VuZFxuXG5leHBvcnQgZGVmYXVsdCBCYWNrZW5kO1xuXG5cbmZ1bmN0aW9uIGdpdFBhdGhNYXRjaGVzKG9iaklEczogc3RyaW5nW10sIGdpdFBhdGg6IHN0cmluZykge1xuICBpZiAob2JqSURzLmluZGV4T2YoZ2l0UGF0aCkgPj0gMCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnN0IHBhcnNlZCA9IHBhdGgucGFyc2UoZ2l0UGF0aCk7XG5cbiAgLy8gQmFja2VuZCBvcGVyYXRlcyBmaWxlIHJlZmVyZW5jZXMgYXMgcGF0aHMgd2l0aG91dCBleHRlbnNpb25zLlxuICAvLyBGUyB3cmFwcGVyIGV4cGFuZHMgcGF0aHMsIGFkZGluZyBleHRlbnNpb24gaWYgbmVjZXNzYXJ5LlxuICAvLyBHaXQsIGhvd2V2ZXIsIGRvZXNu4oCZdCBrbm93IGFib3V0IHRoZSBleHRlbnNpb25zLlxuICAvLyBGb3IgWUFNTCBmaWxlcyB3aXRoIGV4dGVuc2lvbnMgKG5vdCBkaXJlY3RvcmllcyksXG4gIC8vIHRyeSBjb21wYXJpbmcgd2l0aCBleHRlbnNpb25zIHJlbW92ZWQuXG4gIHJldHVybiBvYmpJRHMuaW5kZXhPZihwYXRoLmpvaW4ocGFyc2VkLmRpciwgcGFyc2VkLm5hbWUpKSA+PSAwO1xufSJdfQ==