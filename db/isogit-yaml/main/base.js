import * as log from 'electron-log';
import * as fs from 'fs-extra';
import { ipcMain } from 'electron';
import { listen } from '../../../ipc/main';
import { Setting } from '../../../settings/main';
import { UniqueConstraintError } from '../../errors';
import { YAMLDirectoryWrapper } from './yaml';
import { IsoGitWrapper } from './isogit';
export const Backend = class Backend {
    constructor(opts, reportBackendStatus) {
        this.opts = opts;
        this.reportBackendStatus = reportBackendStatus;
        this.fs = new YAMLDirectoryWrapper(this.opts.workDir);
        this.git = new IsoGitWrapper(fs, this.opts.repoURL, this.opts.upstreamRepoURL, this.opts.workDir, this.opts.corsProxyURL);
        this.managers = [];
        this.synchronize = this.synchronize.bind(this);
        // this.collections = Object.entries(this.opts.collections).map(([collectionID, collectionOptions]) => {
        //   return { [collectionID]: { index: {}, opts: collectionOptions } } as Partial<Collections>;
        // }).reduce((val, acc) => ({ ...acc, ...val }), {} as Partial<Collections>) as Collections;
    }
    static registerSettingsForConfigurableOptions(settings, initialOptions, dbID) {
        const paneLabelPostfix = dbID !== 'default' ? ` for “${dbID}”` : '';
        const settingIDPrefix = `db_${dbID}_`;
        const paneID = `db_${dbID}`;
        settings.configurePane({
            id: paneID,
            label: `Database settings${paneLabelPostfix}`,
            icon: 'git-merge',
        });
        settings.register(new Setting(paneID, `${settingIDPrefix}gitRepoUrl`, 'text', initialOptions.repoURL === undefined, "Git repository URL"));
        settings.register(new Setting(paneID, `${settingIDPrefix}gitUsername`, 'text', initialOptions.username === undefined, "Git username"));
        settings.register(new Setting(paneID, `${settingIDPrefix}gitAuthorName`, 'text', initialOptions.authorName === undefined, "Git author name"));
        settings.register(new Setting(paneID, `${settingIDPrefix}gitAuthorEmail`, 'text', initialOptions.authorEmail === undefined, "Git author email"));
    }
    static async completeOptionsFromSettings(settings, availableOptions, dbID) {
        const settingIDPrefix = `db_${dbID}_`;
        async function getSetting(settingID) {
            return await settings.getValue(`${settingIDPrefix}${settingID}`);
        }
        return {
            workDir: availableOptions.workDir,
            corsProxyURL: availableOptions.corsProxyURL,
            upstreamRepoURL: availableOptions.upstreamRepoURL,
            repoURL: ((await getSetting('gitRepoUrl'))
                || availableOptions.repoURL),
            username: ((await getSetting('gitUsername'))
                || availableOptions.username),
            authorName: ((await getSetting('gitAuthorName'))
                || availableOptions.authorName),
            authorEmail: ((await getSetting('gitAuthorEmail'))
                || availableOptions.authorEmail),
        };
    }
    async registerManager(manager) {
        this.managers.push(manager);
    }
    async init(forceReset = false) {
        let doInitialize;
        if (forceReset === true) {
            log.warn("C/db/isogit-yaml: Git is being force reinitialized");
            doInitialize = true;
        }
        else if (!(await this.git.isInitialized())) {
            log.warn("C/db/isogit-yaml: Git is not initialized yet");
            doInitialize = true;
        }
        else if (!(await this.git.isUsingRemoteURLs({
            origin: this.opts.repoURL,
            upstream: this.opts.upstreamRepoURL
        }))) {
            log.warn("C/db/isogit-yaml: Git has mismatching remote URLs, reinitializing");
            doInitialize = true;
        }
        else {
            log.info("C/db/isogit-yaml: Git is already initialized");
            doInitialize = false;
        }
        if (doInitialize) {
            await this.git.forceInitialize();
        }
        await this.git.loadAuth();
    }
    async read(objID, metaFields) {
        return await this.fs.read(this.getRef(objID), metaFields);
    }
    async create(obj, objPath, metaFields) {
        if (await this.fs.exists(objPath)) {
            throw new UniqueConstraintError("filesystem path", objPath);
        }
        await this.fs.write(objPath, obj, metaFields);
    }
    async commit(objIDs, message) {
        await this.resetOrphanedFileChanges();
        const paths = (await this.readUncommittedFileInfo()).
            filter(fileinfo => objIDs.indexOf(fileinfo.path) >= 0).
            map(fileinfo => fileinfo.path);
        if (paths.length > 0) {
            await this.git.stageAndCommit(paths, message);
        }
    }
    async discard(objIDs) {
        const paths = (await this.readUncommittedFileInfo()).
            filter(fileinfo => objIDs.indexOf(fileinfo.path) >= 0).
            map(fileinfo => fileinfo.path);
        if (paths.length > 0) {
            await this.git.resetFiles(paths);
        }
    }
    async listUncommitted() {
        const files = await this.readUncommittedFileInfo();
        const objIDs = files.
            map(fileinfo => fileinfo.path);
        // Discard duplicates from the list
        return objIDs.filter(function (objID, idx, self) {
            return idx === self.indexOf(objID);
        });
    }
    async readAll(idField) {
        const objs = await this.fs.readAll();
        var idx = {};
        for (const obj of objs) {
            idx[`${obj[idField]}`] = obj;
        }
        return idx;
    }
    async update(objID, newData, idField) {
        if (objID !== newData[idField]) {
            throw new Error("Updating object IDs is not supported at the moment.");
        }
        await this.fs.write(this.getRef(objID), newData);
    }
    async delete(objID) {
        await this.fs.write(this.getRef(objID), undefined);
    }
    async resetOrphanedFileChanges() {
        /* Remove from filesystem any files under our FS backend path
           that the backend cannot account for,
           but which may appear as unstaged changes to Git. */
        const orphanFilePaths = (await this.readUncommittedFileInfo()).
            map(fileinfo => fileinfo.path).
            filter(filepath => this.managers.map(mgr => mgr.managesFileAtPath(filepath)).indexOf(true) >= 0);
        if (orphanFilePaths.length > 0) {
            log.warn("C/db/isogit-yaml: Resetting orphaned files", orphanFilePaths);
            await this.git.resetFiles(orphanFilePaths);
        }
    }
    async readUncommittedFileInfo() {
        /* Returns a list of objects that map Git-relative paths to actual object IDs.
           Where object ID is undefined, that implies file is “orphaned”
           (not recognized as belonging to any object managed by this store). */
        const changedFiles = await this.git.listChangedFiles(['.']);
        return await Promise.all(changedFiles.map(fp => {
            return { path: fp };
        }));
    }
    getRef(objID) {
        /* Returns FS backend reference given object ID. */
        return `${objID}`;
    }
    async synchronize() {
        return await this.git.synchronize(this.reportBackendStatus);
    }
    async checkUncommitted() {
        return await this.git.checkUncommitted(this.reportBackendStatus);
    }
    setUpIPC(dbID) {
        log.verbose("C/db/isogit-yaml: Setting up IPC");
        const prefix = `db-${dbID}`;
        ipcMain.on(`${prefix}-git-trigger-sync`, this.synchronize);
        ipcMain.on(`${prefix}-git-discard-unstaged`, () => this.git.resetFiles());
        ipcMain.on(`${prefix}-git-update-status`, this.checkUncommitted);
        listen(`${prefix}-git-config-set`, async ({ name, email, username }) => {
            log.verbose("C/db/isogit-yaml: received git-config-set request");
            await this.git.configSet('user.name', name);
            await this.git.configSet('user.email', email);
            await this.git.configSet('credentials.username', username);
            await this.git.loadAuth();
            // ^ this.git.auth.username = username
            this.synchronize();
            return { success: true };
        });
        listen(`${prefix}-git-set-password`, async ({ password }) => {
            // WARNING: Don’t log password
            log.verbose("C/db/isogit-yaml: received git-set-password request");
            this.git.setPassword(password);
            this.synchronize();
            return { success: true };
        });
        listen(`${prefix}-git-config-get`, async () => {
            log.verbose("C/db/isogit-yaml: received git-config request");
            return {
                originURL: await this.git.getOriginUrl(),
                name: await this.git.configGet('user.name'),
                email: await this.git.configGet('user.email'),
                username: await this.git.configGet('credentials.username'),
            };
        });
    }
};
export default Backend;
//# sourceMappingURL=data:application/json;base64,