{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../../src/db/isogit-yaml/main/base.ts"],"names":[],"mappings":"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","sourcesContent":["import * as log from 'electron-log';\nimport * as fs from 'fs-extra';\nimport * as path from 'path';\nimport * as keytar from 'keytar';\n\nimport { listen } from '../../../ipc/main';\nimport { Setting, SettingManager } from '../../../settings/main';\n\nimport { Index } from '../../query';\nimport { UniqueConstraintError } from '../../errors';\n\nimport { FilesystemWrapper } from '../../main/fs-wrapper';\n\nimport {\n  BackendClass as BaseBackendClass,\n  BackendStatusReporter as BaseBackendStatusReporter,\n  VersionedFilesystemBackend,\n  ModelManager,\n  FilesystemManager,\n} from '../../main/base';\n\nimport { BackendDescription, BackendStatus } from '../base';\n\nimport { IsoGitWrapper } from './isogit';\n\n\ninterface FixedBackendOptions {\n  /* Settings supplied by the developer */\n\n  workDir: string\n  corsProxyURL?: string\n  upstreamRepoURL?: string\n  fsWrapperClass: new (baseDir: string) => FilesystemWrapper<any>\n}\ninterface ConfigurableBackendOptions {\n  /* Settings that user can or must specify */\n  repoURL: string\n  username: string\n  authorName: string\n  authorEmail: string\n}\ntype BackendOptions = FixedBackendOptions & ConfigurableBackendOptions & {\n  fsWrapper: FilesystemWrapper<any>\n}\ntype InitialBackendOptions = FixedBackendOptions & Partial<ConfigurableBackendOptions>\n\n\ntype BackendStatusReporter = BaseBackendStatusReporter<BackendStatus>\n\n\nclass Backend extends VersionedFilesystemBackend {\n  /* Combines a filesystem storage with Git. */\n\n  private git: IsoGitWrapper;\n  private fs: FilesystemWrapper<any>;\n  private managers: (FilesystemManager & ModelManager<any, any, any>)[];\n\n  private keytarCredentialsKey: {\n    service: string\n    account: string\n  }\n\n  constructor(\n      private opts: BackendOptions,\n      private reportBackendStatus: BackendStatusReporter) {\n\n    super();\n\n    this.fs = opts.fsWrapper;\n\n    this.git = new IsoGitWrapper(\n      fs,\n      this.opts.repoURL,\n      this.opts.upstreamRepoURL,\n      this.opts.username,\n      { name: this.opts.authorName, email: this.opts.authorEmail },\n      this.opts.workDir,\n      this.opts.corsProxyURL,\n\n      // The status of this backend is reduced to Git repo status now.\n      // Potentially it should include filesystem-related status as well,\n      // reporting issues with e.g. insufficient disk space.\n      this.reportBackendStatus,\n    );\n\n    this.managers = [];\n\n    this.keytarCredentialsKey = {\n      service: `repo-${this.opts.repoURL}`,\n      account: this.opts.username,\n    };\n\n    this.synchronize = this.synchronize.bind(this);\n  }\n\n  public async getLocalFilesystemPath(id: string) {\n    return this.fs.expandPath(id);\n  }\n\n  public async getCurrentCommitterInformation(): Promise<{ username: string, name: string, email: string }> {\n    return {\n      username: this.opts.username,\n      name: this.opts.authorName,\n      email: this.opts.authorEmail,\n    };\n  }\n\n  public async describe(): Promise<BackendDescription> {\n    return {\n      verboseName: \"Git+YAML\",\n      verboseNameLong: \"Git-versioned YAML file tree\",\n      gitRepo: this.opts.repoURL,\n      gitUsername: this.opts.username,\n      localClonePath: this.opts.workDir,\n      status: this.git.getStatus(),\n    }\n  }\n\n  public static registerSettingsForConfigurableOptions(\n      settings: SettingManager,\n      initialOptions: InitialBackendOptions,\n      dbID: string) {\n\n    const paneLabelPostfix = dbID !== 'default' ? ` for “${dbID}”` : '';\n    const settingIDPrefix = `db_${dbID}_`;\n    const paneID = `db_${dbID}`;\n\n    settings.configurePane({\n      id: paneID,\n      label: `Database settings${paneLabelPostfix}`,\n      icon: 'git-merge',\n    });\n\n    settings.register(new Setting<string>(\n      paneID,\n      `${settingIDPrefix}gitRepoUrl`,\n      'text',\n      initialOptions.repoURL === undefined,\n      \"Git repository URL\",\n      \"E.g., https://github.com/<username>/<repository name>\",\n    ));\n\n    settings.register(new Setting<string>(\n      paneID,\n      `${settingIDPrefix}gitUsername`,\n      'text',\n      initialOptions.username === undefined,\n      \"Git username\",\n    ));\n\n    settings.register(new Setting<string>(\n      paneID,\n      `${settingIDPrefix}gitAuthorName`,\n      'text',\n      initialOptions.authorName === undefined,\n      \"Git author name\",\n    ));\n\n    settings.register(new Setting<string>(\n      paneID,\n      `${settingIDPrefix}gitAuthorEmail`,\n      'text',\n      initialOptions.authorEmail === undefined,\n      \"Git author email\",\n    ));\n  }\n\n  public static async completeOptionsFromSettings(\n      settings: SettingManager,\n      availableOptions: InitialBackendOptions,\n      dbID: string) {\n\n    const settingIDPrefix = `db_${dbID}_`;\n\n    async function getSetting<T>(settingID: string): Promise<T> {\n      return await settings.getValue(`${settingIDPrefix}${settingID}`) as T;\n    }\n\n    const fsWrapperClass = availableOptions.fsWrapperClass;\n\n    return {\n      workDir: availableOptions.workDir,\n      corsProxyURL: availableOptions.corsProxyURL,\n      upstreamRepoURL: availableOptions.upstreamRepoURL,\n      fsWrapperClass: availableOptions.fsWrapperClass,\n      fsWrapper: new fsWrapperClass(availableOptions.workDir),\n\n      repoURL: (\n        (await getSetting<string>('gitRepoUrl'))\n        || availableOptions.repoURL) as string,\n      username: (\n        (await getSetting<string>('gitUsername'))\n        || availableOptions.username) as string,\n      authorName: (\n        (await getSetting<string>('gitAuthorName'))\n        || availableOptions.authorName) as string,\n      authorEmail: (\n        (await getSetting<string>('gitAuthorEmail'))\n        || availableOptions.authorEmail) as string,\n    }\n  }\n\n  public async registerManager(manager: FilesystemManager & ModelManager<any, any, any>) {\n    this.managers.push(manager);\n  }\n\n  public async init(forceReset = false) {\n    let doInitialize: boolean;\n\n    try {\n      if (forceReset === true) {\n        log.warn(\"C/db/isogit-yaml: Git is being force reinitialized\");\n        doInitialize = true;\n      } else if (!(await this.git.isUsingRemoteURLs({ origin: this.opts.repoURL }))) {\n        log.warn(\"C/db/isogit-yaml: Git has mismatching remote URL(s), reinitializing\");\n        doInitialize = true;\n      } else {\n        log.info(\"C/db/isogit-yaml: Git is already initialized\");\n        doInitialize = false;\n      }\n    } catch (e) {\n      doInitialize = true;\n    }\n\n    if (doInitialize) {\n      await this.git.destroy();\n    }\n\n    const pwd = await keytar.getPassword(\n      this.keytarCredentialsKey.service,\n      this.keytarCredentialsKey.account);\n\n    if (pwd !== null && pwd.trim() !== '') {\n      await this.git.setPassword(pwd);\n    }\n\n    await this.synchronize();\n  }\n\n  public async read(objID: string, metaFields?: string[]) {\n    return await this.fs.read(this.getRef(objID), metaFields) as object;\n  }\n\n  public async readVersion(objID: string, version: string) {\n    // NOTE: This will fail with YAMLDirectoryWrapper.\n    // objID must refer to a single file.\n\n    // TODO: Support compound objects (directories)\n    // by moving the file data parsing logic into manager\n    // and adding Backend.readTree().\n\n    const blob = await this.git.readFileBlobAtCommit(this.getRef(objID), version);\n    return this.fs.parseData(blob);\n  }\n\n  public async create<O extends Record<string, any>>(obj: O, objPath: string, metaFields?: (keyof O)[]) {\n    if (await this.fs.exists(objPath)) {\n      throw new UniqueConstraintError(\"filesystem path\", objPath);\n    }\n\n    await this.fs.write(objPath, obj, metaFields);\n  }\n\n  public async commitAll(msg: string, removing: boolean) {\n    // NOTE: Use with care.\n\n    await this.git.stageAndCommit(['.'], msg, removing);\n  }\n\n  public async commit(objIDs: string[], message: string, removing = false) {\n    await this.resetOrphanedFileChanges();\n\n    const uncommitted = await this.readUncommittedFileInfo();\n\n    const paths: string[] = uncommitted.\n      filter(fileinfo => gitPathMatches(objIDs, fileinfo.path)).\n      map(fileinfo => fileinfo.path);\n\n    log.debug(\"C/db: Committing objects\", objIDs, uncommitted, paths, message);\n\n    if (paths.length > 0) {\n      // TODO: Make Git track which files got committed (had changes),\n      // and return paths\n      await this.git.stageAndCommit(paths, message, removing);\n    }\n  }\n\n  public async discard(objIDs: string[]) {\n    const paths: string[] = (await this.readUncommittedFileInfo()).\n      filter(fileinfo => gitPathMatches(objIDs, fileinfo.path)).\n      map(fileinfo => fileinfo.path);\n\n    if (paths.length > 0) {\n      await this.git.resetFiles(paths);\n    }\n  }\n\n  public async listUncommitted() {\n    const files = await this.readUncommittedFileInfo();\n\n    const objIDs: string[] = files.\n      map(fileinfo => fileinfo.path);\n\n    // Discard duplicates from the list\n    return objIDs.filter(function (objID, idx, self) {\n      return idx === self.indexOf(objID);\n    });\n  }\n\n  public async listIDs(query: { subdir: string }) {\n    return await this.fs.listIDs({ subdir: query.subdir });\n  }\n\n  public async getIndex(subdir: string, idField: string, onlyIDs?: string[], metaFields?: string[]) {\n    const idsToSelect = onlyIDs !== undefined\n      ? onlyIDs.map(id => this.getRef(id))\n      : undefined;\n\n    const objs = await this.fs.readAll({ subdir, onlyIDs: idsToSelect }, metaFields);\n\n    var idx: Index<any> = {};\n    for (const obj of objs) {\n      idx[`${obj[idField]}`] = obj;\n    }\n\n    return idx;\n  }\n\n  public async update(objID: string, newData: Record<string, any>, metaFields?: string[]) {\n    await this.fs.write(this.getRef(objID), newData, metaFields);\n  }\n\n  public async delete(objID: string) {\n    await this.fs.write(this.getRef(objID), undefined);\n  }\n\n  public async resetOrphanedFileChanges(): Promise<void> {\n    /* Remove from filesystem any files under our FS backend path\n       that the backend cannot account for,\n       but which may appear as unstaged changes to Git. */\n\n    const orphanFilePaths = (await this.readUncommittedFileInfo()).\n    map(fileinfo => fileinfo.path).\n    filter(filepath => this.managers.map(mgr => mgr.managesFileAtPath(filepath)).indexOf(true) < 0);\n\n    if (orphanFilePaths.length > 0) {\n      log.warn(\"C/db/isogit-yaml: Resetting orphaned files\", orphanFilePaths);\n      await this.git.resetFiles(orphanFilePaths);\n    }\n  }\n\n  private async readUncommittedFileInfo(): Promise<{ path: string }[]> {\n    /* Returns a list of objects that map Git-relative paths to actual object IDs.\n       Where object ID is undefined, that implies file is “orphaned”\n       (not recognized as belonging to any object managed by this store). */\n\n    const changedFiles: string[] = await this.git.listChangedFiles(['.']);\n    return await Promise.all(changedFiles.map(fp => {\n      return { path: fp };\n    }));\n  }\n\n  private getRef(objID: string | number): string {\n    /* Returns FS backend reference from DB backend object ID. */\n    return `${objID}`;\n  }\n\n  private async synchronize() {\n    await this.git.synchronize();\n\n    for (const mgr of this.managers) {\n      log.debug(\"C/initMain: Initializing manager\");\n      await mgr.init();\n      await mgr.reportUpdatedData();\n    }\n  }\n\n  private async checkUncommitted() {\n    return await this.git.checkUncommitted();\n  }\n\n  public setUpIPC(dbID: string) {\n    super.setUpIPC(dbID);\n\n    log.verbose(\"C/db/isogit-yaml: Setting up IPC\");\n\n    const prefix = `db-${dbID}`;\n\n    listen<{}, { numUncommitted: number }>\n    (`${prefix}-count-uncommitted`, async () => {\n      return { numUncommitted: (await this.git.listChangedFiles()).length };\n    });\n\n    listen<{}, { started: true }>\n    (`${prefix}-git-trigger-sync`, async () => {\n      this.synchronize();\n      return { started: true };\n    });\n\n    listen<{}, { success: true }>\n    (`${prefix}-git-discard-unstaged`, async () => {\n      await this.git.resetFiles();\n      return { success: true };\n    });\n\n    listen<{}, { hasUncommittedChanges: boolean }>\n    (`${prefix}-git-update-status`, async () => {\n      return { hasUncommittedChanges: await this.checkUncommitted() };\n    });\n\n    listen<{ password: string }, { success: true }>\n    (`${prefix}-git-set-password`, async ({ password }) => {\n      // WARNING: Don’t log password\n      log.verbose(\"C/db/isogit-yaml: received git-set-password request\");\n\n      await this.git.setPassword(password);\n\n      await keytar.setPassword(\n        this.keytarCredentialsKey.service,\n        this.keytarCredentialsKey.account,\n        password);\n\n      return { success: true };\n    });\n\n    listen<{}, { success: true }>\n    (`${prefix}-git-request-push`, async () => {\n      this.git.requestPush();\n      return { success: true };\n    });\n\n    listen<{}, { username: string, email: string, name: string }>\n    (`${prefix}-get-current-committer-info`, async () => {\n      const authorInfo = await this.getCurrentCommitterInformation();\n      return {\n        username: authorInfo.username,\n        email: authorInfo.email,\n        name: authorInfo.name,\n      };\n    });\n\n    listen<{}, { originURL: string | null, username: string | null }>\n    (`${prefix}-git-config-get`, async () => {\n      log.verbose(\"C/db/isogit-yaml: received git-config request\");\n      return {\n        originURL: await this.git.getOriginUrl(),\n        // name: await this.git.configGet('user.name'),\n        // email: await this.git.configGet('user.email'),\n        username: await this.git.configGet('credentials.username'),\n        // Password must not be returned, of course\n      };\n    });\n  }\n}\n\nexport const BackendClass: BaseBackendClass<InitialBackendOptions, BackendOptions, BackendStatus> = Backend\n\nexport default Backend;\n\n\nfunction gitPathMatches(objIDs: string[], gitPath: string) {\n  if (objIDs.indexOf(gitPath) >= 0) {\n    return true;\n  }\n  const parsed = path.parse(gitPath);\n\n  // Backend operates file references as paths without extensions.\n  // FS wrapper expands paths, adding extension if necessary.\n  // Git, however, doesn’t know about the extensions.\n  // For YAML files with extensions (not directories),\n  // try comparing with extensions removed.\n\n  // Attempt to compare with directory of the file, for YAML directory\n  // backend.\n  return objIDs.find(id =>\n    id === parsed.dir || id === path.join(parsed.dir, parsed.name)\n  ) !== undefined;\n}\n"]}