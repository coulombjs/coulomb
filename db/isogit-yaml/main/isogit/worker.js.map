{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../../../../src/db/isogit-yaml/main/isogit/worker.ts"],"names":[],"mappings":"AAAA,sEAAsE;AACtE,gEAAgE;AAChE,+BAA+B;AAE/B,uCAAuC;AAEvC,OAAO,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC;AAEjC,OAAO,EAAE,MAAM,UAAU,CAAC;AAC1B,OAAO,SAAS,MAAM,YAAY,CAAC;AAEnC,OAAO,GAAG,MAAM,gBAAgB,CAAC;AACjC,OAAO,IAAI,MAAM,0BAA0B,CAAC;AAM5C,MAAM,OAAO,GAAG,IAAI,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC;AAajE,MAAM,gBAAgB,GAAkB;IAEtC,KAAK,CAAC,KAAK,CAAC,GAAwB;QAClC,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;SACjC;QACD,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE;YACpC,IAAI;gBACF,MAAM,GAAG,CAAC,KAAK,CAAC;oBACd,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,MAAM;oBACzB,mCAAmC;oBACnC,sFAAsF;oBACtF,mFAAmF;oBACnF,mFAAmF;oBACnF,IAAI;oBACJ,EAAE;oBACF,GAAG,EAAE,GAAG,CAAC,OAAO;oBAChB,GAAG,EAAE,QAAQ;oBACb,YAAY,EAAE,IAAI;oBAClB,KAAK,EAAE,CAAC;oBACR,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI;iBACvB,CAAC,CAAC;aACJ;YAAC,OAAO,CAAC,EAAE;gBACV,+DAA+D;gBAC/D,MAAM,CAAC,CAAC;aACT;QACH,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAuB;QAChC,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE;YACpC,IAAI;gBACF,MAAM,GAAG,CAAC,IAAI,CAAC;oBACb,IAAI;oBACJ,EAAE;oBACF,GAAG,EAAE,GAAG,CAAC,OAAO;oBAChB,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,MAAM;oBACzB,YAAY,EAAE,IAAI;oBAClB,eAAe,EAAE,IAAI;oBACrB,MAAM,EAAE,GAAG,CAAC,MAAM;oBAClB,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI;iBACvB,CAAC,CAAC;aACJ;YAAC,OAAO,CAAC,EAAE;gBACV,oEAAoE;gBACpE,MAAM,CAAC,CAAC;aACT;QACH,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,GAAuB;QAChC,MAAM,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE;YACpC,IAAI;gBACF,MAAM,GAAG,CAAC,IAAI,CAAC;oBACb,IAAI;oBACJ,EAAE;oBACF,GAAG,EAAE,GAAG,CAAC,OAAO;oBAChB,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,MAAM;oBACzB,MAAM,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,IAAI;iBACvB,CAAC,CAAC;aACJ;YAAC,OAAO,CAAC,EAAE;gBACV,kEAAkE;gBAClE,MAAM,CAAC,CAAC;aACT;QACH,CAAC,CAAC,CAAC;QACH,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;IAC3B,CAAC;CAEF,CAAA;AAED,MAAM,CAAC,gBAAgB,CAAC,CAAC","sourcesContent":["// NOTE: This module cannot use electron-log, since it for some reason\n// fails to obtain the paths required for file transport to work\n// when in Node worker context.\n\n// TODO: Make electron-log work somehow\n\nimport { expose } from 'threads';\n\nimport fs from 'fs-extra';\nimport AsyncLock from 'async-lock';\n\nimport git from 'isomorphic-git';\nimport http from 'isomorphic-git/http/node';\n\nimport { CloneRequestMessage, PullRequestMessage, PushRequestMessage } from './types';\nimport { ModuleMethods } from 'threads/dist/types/master';\n\n\nconst gitLock = new AsyncLock({ timeout: 20000, maxPending: 4 });\n\n\nexport interface GitMethods {\n  clone: (msg: CloneRequestMessage) => Promise<{ success: true }>\n  pull: (msg: PullRequestMessage) => Promise<{ success: true }>\n  push: (msg: PushRequestMessage) => Promise<{ success: true }>\n}\n\n\nexport type GitWorkerSpec = ModuleMethods & GitMethods;\n\n\nconst gitWorkerMethods: GitWorkerSpec = {\n\n  async clone(msg: CloneRequestMessage): Promise<{ success: true }> {\n    if (gitLock.isBusy()) {\n      throw new Error(\"Lock is busy\");\n    }\n    await gitLock.acquire('1', async () => {\n      try {\n        await git.clone({\n          url: `${msg.repoURL}.git`,\n          // ^^ .git suffix is required here:\n          // https://github.com/isomorphic-git/isomorphic-git/issues/1145#issuecomment-653819147\n          // TODO: Support non-GitHub repositories by removing force-adding this suffix here,\n          // and provide migration instructions for Coulomb-based apps that work with GitHub.\n          http,\n          fs,\n          dir: msg.workDir,\n          ref: 'master',\n          singleBranch: true,\n          depth: 5,\n          onAuth: () => msg.auth,\n        });\n      } catch (e) {\n        //log.error(`C/db/isogit/worker: Error cloning repository`, e);\n        throw e;\n      }\n    });\n    return { success: true };\n  },\n\n  async pull(msg: PullRequestMessage): Promise<{ success: true }> {\n    await gitLock.acquire('1', async () => {\n      try {\n        await git.pull({\n          http,\n          fs,\n          dir: msg.workDir,\n          url: `${msg.repoURL}.git`,\n          singleBranch: true,\n          fastForwardOnly: true,\n          author: msg.author,\n          onAuth: () => msg.auth,\n        });\n      } catch (e) {\n        //log.error(`C/db/isogit/worker: Error pulling from repository`, e);\n        throw e;\n      }\n    });\n    return { success: true };\n  },\n\n  async push(msg: PushRequestMessage): Promise<{ success: true }> {\n    await gitLock.acquire('1', async () => {\n      try {\n        await git.push({\n          http,\n          fs,\n          dir: msg.workDir,\n          url: `${msg.repoURL}.git`,\n          onAuth: () => msg.auth,\n        });\n      } catch (e) {\n        //log.error(`C/db/isogit/worker: Error pushing to repository`, e);\n        throw e;\n      }\n    });\n    return { success: true };\n  },\n\n}\n\nexpose(gitWorkerMethods);\n"]}