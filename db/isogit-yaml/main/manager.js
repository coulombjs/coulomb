import * as path from 'path';
import { listen } from '../../../ipc/main';
import { CommitError, } from '../../main/base';
import { isGitError } from './isogit/base';
class Manager {
    /* Combines a filesystem storage with Git. */
    constructor(db, managerConfig, modelConfig) {
        this.db = db;
        this.managerConfig = managerConfig;
        this.modelConfig = modelConfig;
        db.registerManager(this);
    }
    managesFileAtPath(filePath) {
        return true;
    }
    // CRUD methods
    async create(obj, commit = false) {
        const objID = obj[this.managerConfig.idField];
        await this.db.create(obj, this.getDBRef(objID), this.managerConfig.metaFields);
        if (commit !== false) {
            await this.commitOne(objID, commit !== true ? commit : null, 'create');
        }
    }
    async read(objID) {
        return await this.db.read(this.getDBRef(objID), this.managerConfig.metaFields);
    }
    async commit(objIDs, message) {
        if (objIDs.length > 0) {
            await this.db.commit(objIDs.map(objID => this.getDBRef(objID)), message);
        }
    }
    async discard(objIDs) {
        if (objIDs.length > 0) {
            await this.db.discard(objIDs.map(objID => this.getDBRef(objID)));
        }
    }
    async listUncommitted() {
        if (this.db.listUncommitted) {
            const dbRefs = await this.db.listUncommitted();
            const objIDs = dbRefs.
                filter(ref => this.managesFileAtPath(ref)).
                map(ref => this.getObjID(ref));
            return objIDs.filter(function (objID, idx, self) {
                // Discard duplicates from the list
                return idx === self.indexOf(objID);
            });
        }
        else {
            throw new Error("listUncommitted() is not implemented by DB backend");
        }
    }
    async readAll() {
        var idx = await this.db.readAll(this.managerConfig.idField);
        ;
        return idx;
    }
    async update(objID, newData, commit = false) {
        if (objID !== newData[this.managerConfig.idField]) {
            throw new Error("Updating object IDs is not supported at the moment.");
        }
        await this.db.update(this.getDBRef(objID), newData, this.managerConfig.idField);
        if (commit !== false) {
            await this.commitOne(objID, commit !== true ? commit : null, 'update', newData);
        }
    }
    async delete(objID, commit = false) {
        await this.db.delete(this.getDBRef(objID));
        if (commit !== false) {
            await this.commitOne(objID, commit !== true ? commit : null, 'delete');
        }
    }
    async commitOne(objID, commitMessage, verb, obj) {
        try {
            await this.db.commit([this.getDBRef(objID)], commitMessage !== null
                ? commitMessage
                : this.formatCommitMessage(verb, objID, obj));
        }
        catch (e) {
            if (isGitError(e)) {
                throw new CommitError(e.code, e.message);
            }
            else {
                throw e;
            }
        }
    }
    formatObjectName(objID, obj) {
        return `${objID}`;
    }
    formatCommitMessage(verb, objID, obj) {
        return `${verb} ${this.modelConfig.shortName} ${this.formatObjectName(objID, obj)}`;
    }
    getDBRef(objID) {
        /* Returns DB backendâ€™s full ID given object ID. */
        return path.join(this.managerConfig.workDir, `${objID}`);
    }
    getObjID(dbRef) {
        if (path.isAbsolute(dbRef)) {
            throw new Error("getObjID() received dbRef which is an absolute filesystem path");
        }
        const relativeRef = path.relative(this.managerConfig.workDir, dbRef);
        const baseComponent = relativeRef.split(path.sep)[0];
        // if (!objId || !(await this.isValidId(objId))) {
        //   throw new Error(`Unable to resolve object ID for path ${filepath}`);
        // }
        return baseComponent;
    }
    setUpIPC(modelName) {
        const prefix = `model-${modelName}`;
        listen(`${prefix}-read-all`, async () => {
            return await this.readAll();
        });
        listen(`${prefix}-read-one`, async ({ objectID }) => {
            return await this.read(objectID);
        });
        listen(`${prefix}-read-uncommitted-ids`, async () => {
            return await this.listUncommitted();
        });
        listen(`${prefix}-commit-objects`, async ({ objectIDs, commitMessage }) => {
            await this.commit(objectIDs, commitMessage);
            return { success: true };
        });
        listen(`${prefix}-discard-all-uncommitted`, async ({ objectIDs }) => {
            await this.discard(objectIDs);
            return { success: true };
        });
    }
}
export default Manager;
//# sourceMappingURL=data:application/json;base64,