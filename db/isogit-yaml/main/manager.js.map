{"version":3,"file":"manager.js","sourceRoot":"","sources":["../../../../src/db/isogit-yaml/main/manager.ts"],"names":[],"mappings":"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","sourcesContent":["import * as log from 'electron-log';\nimport * as path from 'path';\n\nimport { listen } from '../../../ipc/main';\n\nimport { ModelInfo } from '../../../config/app';\n\nimport {\n  ManagerClass as BaseManagerClass,\n  ManagerOptions as BaseManagerOptions,\n} from '../../../config/main';\n\nimport { Model, AnyIDType } from '../../models';\nimport { Index } from '../../query';\nimport { default as Backend } from './base';\nimport { ModelManager, FilesystemManager, CommitError, ManagedDataChangeReporter } from '../../main/base';\n\nimport { isGitError } from './isogit/base';\n\n\nexport interface ManagerOptions<M extends Model> extends BaseManagerOptions<M> {\n  // Path to data for this model, relative to DB’s work directory\n  workDir: string\n\n  // List of fields that go into meta.yaml\n  // TODO: Ties the manager to DB’s YAMLDirectoryWrapper\n  metaFields?: (keyof M)[]\n\n  // Name of model field containing unqiue identifier equivalent\n  idField: keyof M\n}\n\n\ninterface BasicQuery<IDType extends AnyIDType> {\n  onlyIDs?: IDType[]\n}\n\n\nclass Manager<M extends Model, IDType extends AnyIDType, Q extends BasicQuery<IDType> = BasicQuery<IDType>>\nextends ModelManager<M, IDType, Q> implements FilesystemManager {\n\n  constructor(\n      protected db: Backend,\n      private managerConfig: ManagerOptions<M>,\n      private modelInfo: ModelInfo,\n      public reportUpdatedData: ManagedDataChangeReporter<IDType>) {\n    super();\n\n    db.registerManager(this);\n  }\n\n  public async getLocalFilesystemPath(id: IDType) {\n    return `${await this.db.getLocalFilesystemPath(this.getDBRef(id))}`;\n  }\n\n  public managesFileAtPath(filePath: string) {\n    return true;\n  }\n\n  public async listIDs(query?: Q) {\n    return (await this.db.listIDs({ subdir: this.managerConfig.workDir })).\n    map(ref => this.getObjID(ref));\n  }\n\n  public async count(query?: Q) {\n    return (await this.listIDs(query)).length;\n  }\n\n\n  // CRUD methods\n\n  public async create(obj: M, commit: boolean | string = false) {\n    const objID = obj[this.managerConfig.idField];\n    await this.db.create(obj, this.getDBRef(objID), this.managerConfig.metaFields);\n\n    if (commit !== false) {\n      await this.commitOne(\n        objID,\n        commit !== true ? commit : null,\n        'create',\n        false);\n      await this.reportUpdatedData([objID]);\n    }\n  }\n\n  public async read(objID: IDType) {\n    return await this.db.read(\n      this.getDBRef(objID),\n      this.managerConfig.metaFields ? (this.managerConfig.metaFields as string[]) : undefined) as M;\n  }\n\n  public async readVersion(objID: IDType, version: string) {\n    return await this.db.readVersion(this.getDBRef(objID), version);\n  }\n\n  public async commit(objIDs: IDType[], message: string) {\n    if (objIDs.length > 0) {\n      await this.db.commit(objIDs.map(objID => this.getDBRef(objID)), message);\n      await this.reportUpdatedData(objIDs);\n    }\n  }\n\n  public async discard(objIDs: IDType[]) {\n    if (objIDs.length > 0) {\n      await this.db.discard(objIDs.map(objID => this.getDBRef(objID)));\n      await this.reportUpdatedData(objIDs);\n    }\n  }\n\n  public async listUncommitted() {\n    if (this.db.listUncommitted) {  \n      const dbRefs = await this.db.listUncommitted();\n\n      const objIDs: IDType[] = dbRefs.\n        filter(ref => this.managesFileAtPath(ref)).\n        map(ref => this.getObjID(ref));\n\n      return objIDs.filter(function (objID, idx, self) {\n        // Discard duplicates from the list\n        return idx === self.indexOf(objID);\n      });\n    } else {\n      throw new Error(\"listUncommitted() is not implemented by DB backend\");\n    }\n  }\n\n  public async readAll(query?: Q) {\n    var idx: Index<M> = await this.db.getIndex(\n      this.managerConfig.workDir,\n      this.managerConfig.idField as string,\n      query?.onlyIDs !== undefined\n        ? query.onlyIDs.map(id => this.getDBRef(id))\n        : undefined,\n      this.managerConfig.metaFields\n        ? (this.managerConfig.metaFields as string[])\n        : undefined);\n    return idx;\n  }\n\n  // Update skipping commit and notifications\n  public async rawUpdate(objID: IDType, newData: M) {\n    if (objID !== newData[this.managerConfig.idField]) {\n      log.error(\"Attempt to update object ID\", objID, newData);\n      throw new Error(\"Updating object IDs is not supported at the moment.\");\n    }\n\n    await this.db.update(\n      this.getDBRef(objID),\n      newData,\n      this.managerConfig.metaFields\n        ? (this.managerConfig.metaFields as string[])\n        : undefined);\n  }\n\n  public async update(objID: IDType, newData: M, commit: boolean | string = false) {\n    await this.rawUpdate(objID, newData);\n\n    await this.reportUpdatedData([objID]);\n\n    if (commit !== false) {\n      await this.commitOne(\n        objID,\n        commit !== true ? commit : null,\n        'update',\n        false,\n        newData);\n    }\n  }\n\n  public async delete(objID: IDType, commit: string | boolean = false) {\n    await this.db.delete(this.getDBRef(objID));\n\n    if (commit !== false) {\n      await this.commitOne(\n        objID,\n        commit !== true ? commit : null,\n        'delete',\n        true);\n      await this.reportUpdatedData([objID]);\n    }\n  }\n\n  private async commitOne(objID: IDType, commitMessage: string | null, verb: string, removing = false, obj?: M) {\n    try {\n      await this.db.commit(\n        [this.getDBRef(objID)],\n        commitMessage !== null\n          ? commitMessage\n          : this.formatCommitMessage(verb, objID, obj),\n        removing);\n\n    } catch (e) {\n      // TODO: This is the only thing that makes this manager Git-specific.\n      // Get rid of it and make it generic!\n      if (isGitError(e)) {\n        throw new CommitError(e.code, e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  private formatObjectName(objID: IDType, obj?: M) {\n    return `${objID}`;\n  }\n\n  private formatCommitMessage(verb: string, objID: IDType, obj?: M) {\n    return `${verb} ${this.modelInfo.shortName} ${this.formatObjectName(objID, obj)}`;\n  }\n\n  protected getDBRef(objID: IDType | string) {\n    /* Returns DB backend’s full ID given object ID. */\n    return path.join(this.managerConfig.workDir, `${objID}`);\n  }\n\n  protected getObjID(dbRef: string) {\n    if (path.isAbsolute(dbRef)) {\n      throw new Error(\"getObjID() received dbRef which is an absolute filesystem path\");\n    }\n\n    var relativeRef = path.relative(this.managerConfig.workDir, dbRef);\n    // `path.relative()` prepends unnecessary \"../\" when DB ref is plain filename.\n    // This condition is necessary when DB ref is received from `db.listIDs()`,\n    // and not necessary when DB ref is received from `db.listUncommitted()`.\n    // TODO: See how `listUncommitted()` results are and make `listIDs()` consistent.\n    if (relativeRef.startsWith('../')) { relativeRef = relativeRef.replace('../', ''); }\n\n    const baseComponent = relativeRef.split(path.sep)[0];\n\n    // if (!objId || !(await this.isValidId(objId))) {\n    //   throw new Error(`Unable to resolve object ID for path ${filepath}`);\n    // }\n\n    return baseComponent as IDType;\n    // NOTE: Will cause errors if IDType is not a string.\n    // If IDType is not a string, subclass must cast properly.\n  }\n\n  public setUpIPC(modelName: string) {\n    super.setUpIPC(modelName);\n\n    const prefix = `model-${modelName}`;\n\n    listen<{}, IDType[]>\n    (`${prefix}-read-uncommitted-ids`, async () => {\n      return await this.listUncommitted();\n    });\n\n    listen<{ objectID: IDType }, { modified: boolean }>\n    (`${prefix}-get-modified-status`, async ({ objectID }) => {\n      return { modified: (await this.listUncommitted()).includes(objectID) };\n    });\n\n    listen<\n      { objectIDs: IDType[], commitMessage: string },\n      { success: true }>\n    (`${prefix}-commit-objects`, async ({ objectIDs, commitMessage }) => {\n      await this.commit(objectIDs, commitMessage);\n      return { success: true };\n    });\n\n    listen<{ objectIDs: IDType[] }, { success: true }>\n    (`${prefix}-discard-all-uncommitted`, async ({ objectIDs }) => {\n      await this.discard(objectIDs);\n      return { success: true };\n    });\n\n    listen<{ objectID: IDType }, { path: string }>\n    (`${prefix}-get-filesystem-path`, async ({ objectID }) => {\n      return { path: await this.getLocalFilesystemPath(objectID) };\n    });\n  }\n}\n\nexport const ManagerClass: BaseManagerClass<any, any, ManagerOptions<any>, Backend> = Manager;\n\nexport default Manager;\n"]}