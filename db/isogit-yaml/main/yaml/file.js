import * as log from 'electron-log';
import * as path from 'path';
import * as yaml from 'js-yaml';
import { AbstractLockingFilesystemWrapper } from '../../../main/fs-wrapper';
import { Schema } from './schema';
import { YAML_EXT } from './base';
class YAMLWrapper extends AbstractLockingFilesystemWrapper {
    isYAMLFile(objID) {
        return path.extname(objID) === YAML_EXT;
    }
    async isValidID(objID) {
        return this.isYAMLFile(objID);
    }
    expandPath(objID) {
        // In this case, path to object should include YAML extension.
        return `${super.expandPath(objID)}${YAML_EXT}`;
    }
    async listIDs(query, ...listArg) {
        const ids = await super.listIDs(query);
        return ids.
            map(id => path.basename(id, YAML_EXT)).
            map(id => query.subdir ? path.join(query.subdir, id) : id);
    }
    parseData(data) {
        return yaml.load(data, { schema: Schema });
    }
    dumpData(data) {
        if (data !== undefined && data !== null) {
            try {
                return yaml.dump(data, {
                    schema: Schema,
                    noRefs: true,
                    noCompatMode: true,
                });
            }
            catch (e) {
                log.debug("Dumping data encountered an exception", data);
                log.error("Failed to dump data.");
                throw e;
            }
        }
        else {
            throw new Error("Attempt to write invalid data (null or undefined)");
        }
    }
}
export default YAMLWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYi9pc29naXQteWFtbC9tYWluL3lhbWwvZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssR0FBRyxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEtBQUssSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxRQUFRLEVBQVEsTUFBTSxRQUFRLENBQUM7QUFHeEMsTUFBTSxXQUFtQyxTQUFRLGdDQUFtQztJQUN4RSxVQUFVLENBQUMsS0FBYTtRQUNoQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxDQUFDO0lBQzFDLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQWE7UUFDbEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxVQUFVLENBQUMsS0FBYTtRQUM3Qiw4REFBOEQ7UUFDOUQsT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBMEIsRUFBRSxHQUFHLE9BQWM7UUFDaEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sR0FBRztZQUNWLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVNLFNBQVMsQ0FBQyxJQUFZO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRVMsUUFBUSxDQUFDLElBQVM7UUFDMUIsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDdkMsSUFBSTtnQkFDRixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO29CQUNyQixNQUFNLEVBQUUsTUFBTTtvQkFDZCxNQUFNLEVBQUUsSUFBSTtvQkFDWixZQUFZLEVBQUUsSUFBSTtpQkFDbkIsQ0FBQyxDQUFDO2FBRUo7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixHQUFHLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN6RCxHQUFHLENBQUMsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7Z0JBQ2xDLE1BQU0sQ0FBQyxDQUFDO2FBQ1Q7U0FFRjthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO1NBRXRFO0lBQ0gsQ0FBQztDQUNGO0FBRUQsZUFBZSxXQUFXLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBsb2cgZnJvbSAnZWxlY3Ryb24tbG9nJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgKiBhcyB5YW1sIGZyb20gJ2pzLXlhbWwnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdExvY2tpbmdGaWxlc3lzdGVtV3JhcHBlciB9IGZyb20gJy4uLy4uLy4uL21haW4vZnMtd3JhcHBlcic7XG5cbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4vc2NoZW1hJztcbmltcG9ydCB7IFlBTUxfRVhULCBZQU1MIH0gZnJvbSAnLi9iYXNlJztcblxuXG5jbGFzcyBZQU1MV3JhcHBlcjxUIGV4dGVuZHMgWUFNTCA9IFlBTUw+IGV4dGVuZHMgQWJzdHJhY3RMb2NraW5nRmlsZXN5c3RlbVdyYXBwZXI8VD4ge1xuICBwcm90ZWN0ZWQgaXNZQU1MRmlsZShvYmpJRDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHBhdGguZXh0bmFtZShvYmpJRCkgPT09IFlBTUxfRVhUO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGlzVmFsaWRJRChvYmpJRDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNZQU1MRmlsZShvYmpJRCk7XG4gIH1cblxuICBwdWJsaWMgZXhwYW5kUGF0aChvYmpJRDogc3RyaW5nKSB7XG4gICAgLy8gSW4gdGhpcyBjYXNlLCBwYXRoIHRvIG9iamVjdCBzaG91bGQgaW5jbHVkZSBZQU1MIGV4dGVuc2lvbi5cbiAgICByZXR1cm4gYCR7c3VwZXIuZXhwYW5kUGF0aChvYmpJRCl9JHtZQU1MX0VYVH1gO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RJRHMocXVlcnk6IHsgc3ViZGlyPzogc3RyaW5nIH0sIC4uLmxpc3RBcmc6IGFueVtdKSB7XG4gICAgY29uc3QgaWRzID0gYXdhaXQgc3VwZXIubGlzdElEcyhxdWVyeSk7XG4gICAgcmV0dXJuIGlkcy5cbiAgICBtYXAoaWQgPT4gcGF0aC5iYXNlbmFtZShpZCwgWUFNTF9FWFQpKS5cbiAgICBtYXAoaWQgPT4gcXVlcnkuc3ViZGlyID8gcGF0aC5qb2luKHF1ZXJ5LnN1YmRpciwgaWQpIDogaWQpO1xuICB9XG5cbiAgcHVibGljIHBhcnNlRGF0YShkYXRhOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB5YW1sLmxvYWQoZGF0YSwgeyBzY2hlbWE6IFNjaGVtYSB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkdW1wRGF0YShkYXRhOiBhbnkpOiBzdHJpbmcge1xuICAgIGlmIChkYXRhICE9PSB1bmRlZmluZWQgJiYgZGF0YSAhPT0gbnVsbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHlhbWwuZHVtcChkYXRhLCB7XG4gICAgICAgICAgc2NoZW1hOiBTY2hlbWEsXG4gICAgICAgICAgbm9SZWZzOiB0cnVlLFxuICAgICAgICAgIG5vQ29tcGF0TW9kZTogdHJ1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgbG9nLmRlYnVnKFwiRHVtcGluZyBkYXRhIGVuY291bnRlcmVkIGFuIGV4Y2VwdGlvblwiLCBkYXRhKTtcbiAgICAgICAgbG9nLmVycm9yKFwiRmFpbGVkIHRvIGR1bXAgZGF0YS5cIik7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdCB0byB3cml0ZSBpbnZhbGlkIGRhdGEgKG51bGwgb3IgdW5kZWZpbmVkKVwiKTtcblxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBZQU1MV3JhcHBlcjtcbiJdfQ==