import * as path from 'path';
import * as yaml from 'js-yaml';
import { AbstractLockingFilesystemWrapper } from '../../../main/fs-wrapper';
import { Schema } from './schema';
import { YAML_EXT } from './base';
class YAMLWrapper extends AbstractLockingFilesystemWrapper {
    isYAMLFile(objID) {
        return path.extname(objID) === YAML_EXT;
    }
    async isValidID(objID) {
        return this.isYAMLFile(objID);
    }
    expandPath(objID) {
        // In this case, path to object should include YAML extension.
        return `${super.expandPath(objID)}${YAML_EXT}`;
    }
    async listIDs(query, ...listArg) {
        const ids = await super.listIDs(query);
        return ids.
            map(id => path.basename(id, YAML_EXT)).
            map(id => query.subdir ? path.join(query.subdir, id) : id);
    }
    parseData(data) {
        return yaml.load(data, { schema: Schema });
    }
    dumpData(data) {
        if (data !== undefined && data !== null) {
            return yaml.dump(data, {
                schema: Schema,
                noRefs: true,
                noCompatMode: true,
            });
        }
        else {
            throw new Error("Attempt to write invalid data (null or undefined)");
        }
    }
}
export default YAMLWrapper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9kYi9pc29naXQteWFtbC9tYWluL3lhbWwvZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEtBQUssSUFBSSxNQUFNLFNBQVMsQ0FBQztBQUVoQyxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU1RSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxRQUFRLEVBQVEsTUFBTSxRQUFRLENBQUM7QUFHeEMsTUFBTSxXQUFtQyxTQUFRLGdDQUFtQztJQUN4RSxVQUFVLENBQUMsS0FBYTtRQUNoQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssUUFBUSxDQUFDO0lBQzFDLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUyxDQUFDLEtBQWE7UUFDbEMsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxVQUFVLENBQUMsS0FBYTtRQUM3Qiw4REFBOEQ7UUFDOUQsT0FBTyxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBMEIsRUFBRSxHQUFHLE9BQWM7UUFDaEUsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sR0FBRztZQUNWLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVNLFNBQVMsQ0FBQyxJQUFZO1FBQzNCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRVMsUUFBUSxDQUFDLElBQVM7UUFDMUIsSUFBSSxJQUFJLEtBQUssU0FBUyxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7WUFDdkMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDckIsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLElBQUk7Z0JBQ1osWUFBWSxFQUFFLElBQUk7YUFDbkIsQ0FBQyxDQUFDO1NBRUo7YUFBTTtZQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztTQUV0RTtJQUNILENBQUM7Q0FDRjtBQUVELGVBQWUsV0FBVyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIHlhbWwgZnJvbSAnanMteWFtbCc7XG5cbmltcG9ydCB7IEFic3RyYWN0TG9ja2luZ0ZpbGVzeXN0ZW1XcmFwcGVyIH0gZnJvbSAnLi4vLi4vLi4vbWFpbi9mcy13cmFwcGVyJztcblxuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xuaW1wb3J0IHsgWUFNTF9FWFQsIFlBTUwgfSBmcm9tICcuL2Jhc2UnO1xuXG5cbmNsYXNzIFlBTUxXcmFwcGVyPFQgZXh0ZW5kcyBZQU1MID0gWUFNTD4gZXh0ZW5kcyBBYnN0cmFjdExvY2tpbmdGaWxlc3lzdGVtV3JhcHBlcjxUPiB7XG4gIHByb3RlY3RlZCBpc1lBTUxGaWxlKG9iaklEOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gcGF0aC5leHRuYW1lKG9iaklEKSA9PT0gWUFNTF9FWFQ7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaXNWYWxpZElEKG9iaklEOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5pc1lBTUxGaWxlKG9iaklEKTtcbiAgfVxuXG4gIHB1YmxpYyBleHBhbmRQYXRoKG9iaklEOiBzdHJpbmcpIHtcbiAgICAvLyBJbiB0aGlzIGNhc2UsIHBhdGggdG8gb2JqZWN0IHNob3VsZCBpbmNsdWRlIFlBTUwgZXh0ZW5zaW9uLlxuICAgIHJldHVybiBgJHtzdXBlci5leHBhbmRQYXRoKG9iaklEKX0ke1lBTUxfRVhUfWA7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgbGlzdElEcyhxdWVyeTogeyBzdWJkaXI/OiBzdHJpbmcgfSwgLi4ubGlzdEFyZzogYW55W10pIHtcbiAgICBjb25zdCBpZHMgPSBhd2FpdCBzdXBlci5saXN0SURzKHF1ZXJ5KTtcbiAgICByZXR1cm4gaWRzLlxuICAgIG1hcChpZCA9PiBwYXRoLmJhc2VuYW1lKGlkLCBZQU1MX0VYVCkpLlxuICAgIG1hcChpZCA9PiBxdWVyeS5zdWJkaXIgPyBwYXRoLmpvaW4ocXVlcnkuc3ViZGlyLCBpZCkgOiBpZCk7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VEYXRhKGRhdGE6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHlhbWwubG9hZChkYXRhLCB7IHNjaGVtYTogU2NoZW1hIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGR1bXBEYXRhKGRhdGE6IGFueSk6IHN0cmluZyB7XG4gICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCAmJiBkYXRhICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4geWFtbC5kdW1wKGRhdGEsIHtcbiAgICAgICAgc2NoZW1hOiBTY2hlbWEsXG4gICAgICAgIG5vUmVmczogdHJ1ZSxcbiAgICAgICAgbm9Db21wYXRNb2RlOiB0cnVlLFxuICAgICAgfSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdCB0byB3cml0ZSBpbnZhbGlkIGRhdGEgKG51bGwgb3IgdW5kZWZpbmVkKVwiKTtcblxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBZQU1MV3JhcHBlcjtcbiJdfQ==