{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../../../src/db/isogit-yaml/main/yaml/file.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,GAAG,MAAM,cAAc,CAAC;AACpC,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,KAAK,IAAI,MAAM,SAAS,CAAC;AAEhC,OAAO,EAAE,gCAAgC,EAAE,MAAM,0BAA0B,CAAC;AAE5E,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,QAAQ,EAAQ,MAAM,QAAQ,CAAC;AAGxC,MAAM,WAAmC,SAAQ,gCAAmC;IACxE,UAAU,CAAC,KAAa;QAChC,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,QAAQ,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,SAAS,CAAC,KAAa;QAClC,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAEM,UAAU,CAAC,KAAa;QAC7B,8DAA8D;QAC9D,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,QAAQ,EAAE,CAAC;IACjD,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,KAA0B,EAAE,GAAG,OAAc;QAChE,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACvC,OAAO,GAAG;YACV,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YACtC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAC7D,CAAC;IAEM,SAAS,CAAC,IAAY;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAC7C,CAAC;IAES,QAAQ,CAAC,IAAS;QAC1B,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;YACvC,IAAI;gBACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;oBACrB,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,IAAI;oBACZ,YAAY,EAAE,IAAI;iBACnB,CAAC,CAAC;aAEJ;YAAC,OAAO,CAAC,EAAE;gBACV,GAAG,CAAC,KAAK,CAAC,uCAAuC,EAAE,IAAI,CAAC,CAAC;gBACzD,GAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;gBAClC,MAAM,CAAC,CAAC;aACT;SAEF;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;SAEtE;IACH,CAAC;CACF;AAED,eAAe,WAAW,CAAC","sourcesContent":["import * as log from 'electron-log';\nimport * as path from 'path';\nimport * as yaml from 'js-yaml';\n\nimport { AbstractLockingFilesystemWrapper } from '../../../main/fs-wrapper';\n\nimport { Schema } from './schema';\nimport { YAML_EXT, YAML } from './base';\n\n\nclass YAMLWrapper<T extends YAML = YAML> extends AbstractLockingFilesystemWrapper<T> {\n  protected isYAMLFile(objID: string) {\n    return path.extname(objID) === YAML_EXT;\n  }\n\n  public async isValidID(objID: string) {\n    return this.isYAMLFile(objID);\n  }\n\n  public expandPath(objID: string) {\n    // In this case, path to object should include YAML extension.\n    return `${super.expandPath(objID)}${YAML_EXT}`;\n  }\n\n  public async listIDs(query: { subdir?: string }, ...listArg: any[]) {\n    const ids = await super.listIDs(query);\n    return ids.\n    map(id => path.basename(id, YAML_EXT)).\n    map(id => query.subdir ? path.join(query.subdir, id) : id);\n  }\n\n  public parseData(data: string): any {\n    return yaml.load(data, { schema: Schema });\n  }\n\n  protected dumpData(data: any): string {\n    if (data !== undefined && data !== null) {\n      try {\n        return yaml.dump(data, {\n          schema: Schema,\n          noRefs: true,\n          noCompatMode: true,\n        });\n\n      } catch (e) {\n        log.debug(\"Dumping data encountered an exception\", data);\n        log.error(\"Failed to dump data.\");\n        throw e;\n      }\n\n    } else {\n      throw new Error(\"Attempt to write invalid data (null or undefined)\");\n\n    }\n  }\n}\n\nexport default YAMLWrapper;\n"]}