import React, { useState } from 'react';
import { Button, FormGroup, InputGroup, ButtonGroup, NonIdealState, Spinner, } from '@blueprintjs/core';
import { callIPC, useIPCValue } from '../../../ipc/renderer';
import styles from './status.scss';
const BackendDetails = function ({ dbIPCPrefix, status, description }) {
    const ipcPrefix = dbIPCPrefix;
    const numUncommitted = useIPCValue(`${ipcPrefix}-count-uncommitted`, { numUncommitted: 0 }).
        value.numUncommitted;
    return (React.createElement(ButtonGroup, { fill: true, vertical: true, alignText: "left" },
        React.createElement(Button, { className: styles.sourceInfo, title: `${description.gitUsername}@${description.gitRepo}`, icon: "git-repo", onClick: () => {
                if (description.gitRepo) {
                    require('electron').shell.openExternal(description.gitRepo);
                }
            } },
            description.gitUsername,
            "@",
            description.gitRepo),
        React.createElement(ActionableStatus, { status: status, uncommittedFileCount: numUncommitted, onRequestSync: async () => await callIPC(`${ipcPrefix}-git-trigger-sync`), onShowSettingsWindow: () => callIPC('open-predefined-window', { id: 'settings' }) })));
};
export default BackendDetails;
const ActionableStatus = function ({ status, uncommittedFileCount, onRequestSync, onShowSettingsWindow }) {
    let statusIcon;
    let tooltipText;
    let statusIntent;
    let action;
    if (status.isMisconfigured) {
        statusIcon = "error";
        tooltipText = "Configure";
        statusIntent = "danger";
        action = onShowSettingsWindow;
    }
    else if (status.isOnline !== true) {
        statusIcon = "offline";
        tooltipText = "Sync now";
        statusIntent = "primary";
        action = onRequestSync;
    }
    else if (status.hasLocalChanges && uncommittedFileCount > 0) {
        statusIcon = "git-commit";
        tooltipText = "Sync now";
        statusIntent = undefined;
        action = onRequestSync;
    }
    else if (status.statusRelativeToLocal === 'diverged') {
        statusIcon = "git-branch";
        tooltipText = "Resolve conflict and sync";
        statusIntent = "warning";
        action = onRequestSync;
    }
    else if (status.statusRelativeToLocal === 'behind') {
        statusIcon = "cloud-upload";
        tooltipText = "Sync now";
        statusIntent = "primary";
        action = onRequestSync;
    }
    else {
        statusIcon = "updated";
        tooltipText = "Sync now";
        statusIntent = "primary";
        action = onRequestSync;
    }
    return (React.createElement(Button, { className: styles.backendStatus, onClick: action || (() => { }), icon: statusIcon, intent: statusIntent, disabled: action === null }, tooltipText));
};
export const PasswordPrompt = function ({ dbIPCPrefix, onConfirm }) {
    const [value, setValue] = useState('');
    async function handlePasswordConfirm() {
        await callIPC(`${dbIPCPrefix}-git-set-password`, { password: value });
        onConfirm();
    }
    return React.createElement("div", { className: styles.passwordPrompt },
        React.createElement(FormGroup, { label: "Please enter repository password:", helperText: "The password will be kept in memory and not stored to disk." },
            React.createElement(InputGroup, { type: "password", value: value, onChange: (event) => setValue(event.target.value), leftIcon: "key", rightElement: value.trim() === ''
                    ? undefined
                    : React.createElement(Button, { minimal: true, onClick: handlePasswordConfirm, icon: "tick", intent: "primary" }, "Confirm") })));
};
export const DBSyncScreen = function ({ dbName, db, onDismiss }) {
    var _a;
    let dbInitializationScreen;
    if (((_a = db) === null || _a === void 0 ? void 0 : _a.status) === undefined) {
        dbInitializationScreen = React.createElement(NonIdealState, { icon: React.createElement(Spinner, null), title: "Initializing database" });
    }
    else if (db.status.needsPassword) {
        dbInitializationScreen = React.createElement(NonIdealState, { icon: "key", title: "Password required", description: React.createElement(PasswordPrompt, { dbIPCPrefix: `db-${dbName}`, onConfirm: () => void 0 }) });
    }
    else if (db.status.isPushing || db.status.isPulling) {
        dbInitializationScreen = React.createElement(NonIdealState, { icon: db.status.isPushing ? "cloud-upload" : "cloud-download", title: "Synchronizing data", description: db.status.isPushing ? "Pushing changes" : "Pulling changes" });
    }
    else if (db.status.lastSynchronized === null && db.status.hasLocalChanges === false) {
        dbInitializationScreen = React.createElement(NonIdealState, { icon: React.createElement(Spinner, null), title: "Connecting" });
    }
    else if (db.status.lastSynchronized !== null) {
        dbInitializationScreen = React.createElement(NonIdealState, { icon: "tick", title: "Ready", description: React.createElement(Button, { onClick: onDismiss, intent: "primary" }, "Dismiss") });
    }
    else {
        dbInitializationScreen = React.createElement(NonIdealState, { icon: "tick", title: "Ready", description: React.createElement(Button, { onClick: onDismiss, intent: "primary" }, "Dismiss") });
    }
    return dbInitializationScreen;
};
//# sourceMappingURL=data:application/json;base64,