import React, { useEffect, useState } from 'react';
import { Button, FormGroup, InputGroup, Popover, Position, ButtonGroup } from '@blueprintjs/core';
import { callIPC, useIPCValue } from '../../../ipc/renderer';
import styles from './status.scss';
const BackendDetails = function ({ dbIPCPrefix, status, description }) {
    const ipcPrefix = dbIPCPrefix;
    const numUncommitted = useIPCValue(`${ipcPrefix}-count-uncommitted`, { numUncommitted: 0 }).
        value.numUncommitted;
    useEffect(() => {
        openPasswordPrompt(status.needsPassword);
    }, [status.needsPassword]);
    const [passwordPromptIsOpen, openPasswordPrompt] = useState(false);
    async function setPassword(password) {
        await callIPC(`${ipcPrefix}-git-set-password`, { password });
    }
    return (React.createElement(Popover, { boundary: "viewport", isOpen: passwordPromptIsOpen, position: Position.BOTTOM, targetTagName: "div", targetClassName: styles.base, content: React.createElement(PasswordPrompt, { onConfirm: async (password) => {
                setPassword(password);
                openPasswordPrompt(false);
            } }) },
        React.createElement(ButtonGroup, { fill: true, vertical: true, alignText: "left" },
            React.createElement(Button, { className: styles.sourceInfo, title: `${description.gitUsername}@${description.gitRepo}`, icon: "git-repo", onClick: () => {
                    if (description.gitRepo) {
                        require('electron').shell.openExternal(description.gitRepo);
                    }
                } },
                description.gitUsername,
                "@",
                description.gitRepo),
            React.createElement(ActionableStatus, { status: status, uncommittedFileCount: numUncommitted, onRequestSync: async () => await callIPC(`${ipcPrefix}-git-trigger-sync`), onDiscardUnstaged: async () => await callIPC(`${ipcPrefix}-git-discard-unstaged`), onPromptPassword: () => openPasswordPrompt(true), onShowCommitWindow: () => callIPC('open-predefined-window', { id: 'batchCommit' }), onShowSettingsWindow: () => callIPC('open-predefined-window', { id: 'settings' }) }))));
};
export default BackendDetails;
const ActionableStatus = function ({ status, uncommittedFileCount, onRequestSync, onDiscardUnstaged, onPromptPassword, onShowCommitWindow, onShowSettingsWindow }) {
    let statusIcon;
    let tooltipText;
    let statusIntent;
    let action;
    if (status.isMisconfigured) {
        statusIcon = "error";
        tooltipText = "Configure";
        statusIntent = "danger";
        action = onShowSettingsWindow;
    }
    else if (status.isOnline !== true) {
        statusIcon = "offline";
        tooltipText = "Sync now";
        statusIntent = "primary";
        action = status.needsPassword ? onPromptPassword : onRequestSync;
    }
    else if (status.needsPassword) {
        statusIcon = "lock";
        tooltipText = "Provide password & sync";
        statusIntent = "primary";
        action = onPromptPassword;
    }
    else if (status.hasLocalChanges) {
        statusIcon = "git-commit";
        tooltipText = "Commit & sync";
        statusIntent = "primary";
        action = async () => {
            if (status.hasLocalChanges && uncommittedFileCount < 1) {
                // NOTE: If hasLocalChanges says yes, but uncommitted file count says no, try to fix it.
                await onDiscardUnstaged();
                await onRequestSync();
            }
            else {
                onShowCommitWindow();
            }
        };
    }
    else if (status.isPulling) {
        statusIcon = "cloud-download";
        tooltipText = "Syncing…";
        statusIntent = "primary";
        action = null;
    }
    else if (status.isPushing) {
        statusIcon = "cloud-upload";
        tooltipText = "Syncing…";
        statusIntent = "primary";
        action = null;
    }
    else if (status.statusRelativeToLocal === 'diverged') {
        statusIcon = "git-branch";
        tooltipText = "Resolve conflict and sync";
        statusIntent = "warning";
        action = onRequestSync;
    }
    else if (status.statusRelativeToLocal === 'behind') {
        statusIcon = "cloud-upload";
        tooltipText = "Sync now";
        statusIntent = "primary";
        action = onRequestSync;
    }
    else {
        statusIcon = "updated";
        tooltipText = "Sync now";
        statusIntent = "primary";
        action = onRequestSync;
    }
    return (React.createElement(Button, { className: styles.backendStatus, onClick: action || (() => { }), icon: statusIcon, intent: statusIntent, disabled: action === null, loading: action === null }, tooltipText));
};
const PasswordPrompt = function ({ onConfirm }) {
    const [value, setValue] = useState('');
    return React.createElement("div", { className: styles.passwordPrompt },
        React.createElement(FormGroup, { label: "Please enter repository password:", helperText: "The password will be kept in memory and not stored to disk." },
            React.createElement(InputGroup, { type: "password", value: value, onChange: (event) => setValue(event.target.value), leftIcon: "key", rightElement: value.trim() === ''
                    ? undefined
                    : React.createElement(Button, { minimal: true, onClick: async () => await onConfirm(value), icon: "tick", intent: "primary" }, "Confirm") })));
};
//# sourceMappingURL=data:application/json;base64,