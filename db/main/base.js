import { listen } from '../../ipc/main';
// Generic backend.
export class Backend {
    setUpIPC(dbID) {
        /* Initializes IPC endpoints to enable the user to e.g. configure the data store
           or invoke housekeeping or utility routines. */
        const prefix = `db-${dbID}`;
        listen(`${prefix}-describe`, async () => {
            return await this.describe();
        });
    }
}
// Versioned backend & compatible manager.
export class VersionedBackend extends Backend {
}
export class ModelManager {
    setUpIPC(modelName) {
        /* Initializes IPC endpoints to query or update data objects. */
        const prefix = `model-${modelName}`;
        listen(`${prefix}-list-ids`, async ({ query }) => ({ ids: (await this.listIDs(query)) }));
        listen(`${prefix}-count`, async ({ query }) => ({ count: await this.count(query) }));
        listen(`${prefix}-read-all`, async ({ query }) => this.readAll(query));
        listen(`${prefix}-read-one`, async ({ objectID }) => {
            if (objectID === null) {
                return { object: null };
            }
            else {
                return { object: await this.read(objectID) };
            }
        });
    }
}
export class CommitError extends Error {
    constructor(code, msg) {
        super(msg);
        this.code = code;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
// Versioned backend specifically based on local filesystem,
// and requisite manager interface
export class VersionedFilesystemBackend extends VersionedBackend {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYi9tYWluL2Jhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR3hDLG1CQUFtQjtBQUVuQixNQUFNLE9BQWdCLE9BQU87SUE0QjNCLFFBQVEsQ0FBQyxJQUFZO1FBQ25CO3lEQUNpRDtRQUVqRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBRTVCLE1BQU0sQ0FDTCxHQUFHLE1BQU0sV0FBVyxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ2hDLE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUEwREQsMENBQTBDO0FBRTFDLE1BQU0sT0FBZ0IsZ0JBQXFDLFNBQVEsT0FBZTtDQVlqRjtBQUdELE1BQU0sT0FBZ0IsWUFBWTtJQW1CaEMsUUFBUSxDQUFDLFNBQWlCO1FBQ3hCLGdFQUFnRTtRQUVoRSxNQUFNLE1BQU0sR0FBRyxTQUFTLFNBQVMsRUFBRSxDQUFDO1FBRXBDLE1BQU0sQ0FDTCxHQUFHLE1BQU0sV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFcEYsTUFBTSxDQUNMLEdBQUcsTUFBTSxRQUFRLEVBQUUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRS9FLE1BQU0sQ0FDTCxHQUFHLE1BQU0sV0FBVyxFQUFFLEtBQUssRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFakUsTUFBTSxDQUNMLEdBQUcsTUFBTSxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUM1QyxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUU7Z0JBQ3JCLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDekI7aUJBQU07Z0JBQ0wsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQzthQUM5QztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFPLFdBQVksU0FBUSxLQUFLO0lBQ3BDLFlBQW1CLElBQVksRUFBRSxHQUFXO1FBQzFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQURNLFNBQUksR0FBSixJQUFJLENBQVE7UUFFN0IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwRCxDQUFDO0NBQ0Y7QUFHRCw0REFBNEQ7QUFDNUQsa0NBQWtDO0FBRWxDLE1BQU0sT0FBZ0IsMEJBQTJCLFNBQVEsZ0JBQXdCO0NBb0JoRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFueUlEVHlwZSwgTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgU2V0dGluZ01hbmFnZXIgfSBmcm9tICcuLi8uLi9zZXR0aW5ncy9tYWluJztcbmltcG9ydCB7IEluZGV4IH0gZnJvbSAnLi4vcXVlcnknO1xuaW1wb3J0IHsgQmFja2VuZERlc2NyaXB0aW9uIH0gZnJvbSAnLi4vYmFzZSc7XG5pbXBvcnQgeyBsaXN0ZW4gfSBmcm9tICcuLi8uLi9pcGMvbWFpbic7XG5cblxuLy8gR2VuZXJpYyBiYWNrZW5kLlxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFja2VuZDxJRFR5cGUgPSBBbnlJRFR5cGU+IHtcbiAgYWJzdHJhY3QgaW5pdCgpOiBQcm9taXNlPHZvaWQ+XG4gIC8qIEluaXRpYWxpemVzIHRoZSBiYWNrZW5kLlxuICAgICBUaGlzIG1heSBpbnZvbHZlIGxvYWRpbmcgZGF0YSBmcm9tIHJlbW90ZSBzdG9yYWdlLFxuICAgICB0aHVzIGluaXRpYWwgYXV0aGVudGljYXRpb24sIGV0Yy4gKi9cblxuICBhYnN0cmFjdCBkZXNjcmliZSgpOiBQcm9taXNlPEJhY2tlbmREZXNjcmlwdGlvbjxhbnk+PlxuXG4gIC8vIEZvbGxvd2luZyBhcmUgZGF0YSBxdWVyeSAmIHVwZGF0ZSBtZXRob2RzLlxuICAvLyBPbmUgREIgbWF5IG9wZXJhdGUgYSBoZXRlcm9nZW5lb3VzIGNvbGxlY3Rpb24gb2Ygb2JqZWN0cy5cbiAgLy8gUmVjb2duaXppbmcgdGhlaXIgdHlwZXMgaXMgbm90IHdpdGhpbiBEQiBiYWNrZW5k4oCZcyBzY29wZS5cbiAgLy8gVGhlc2UgbWV0aG9kcyByYXRoZXIgb3BlcmF0ZSBsb3dlci1sZXZlbFxuICAvLyBnZW5lcmljIG9iamVjdCBwYXlsb2FkcyBhbmQgb2JqZWN0IElEcy5cbiAgLy9cbiAgLy8gUmVjb2duaXppbmcgcGFydGljdWxhciBkYXRhIHR5cGVzIGlzIE1hbmFnZXLigJlzIGpvYjpcbiAgLy8gdGhlIGFwcCB3b3VsZCBxdWVyeSBkYXRhIG9iamVjdHMgdmlhIGNvcnJlc3BvbmRpbmcgbWFuYWdlcixcbiAgLy8gd2hpY2ggaW4gdHVybiB3b3VsZCBjYWxsIHRoZXNlIG1ldGhvZHNcbiAgLy8gZmlsbGluZyBpbiBhcHByb3ByaWF0ZSBhcmd1bWVudHMuXG5cbiAgYWJzdHJhY3QgZ2V0SW5kZXgoaWRGaWVsZDogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSk6IFByb21pc2U8SW5kZXg8YW55Pj5cbiAgLy8gREVQUkVDQVRFRDogUmVhZGluZyBhbGwgREIgb2JqZWN0cyB3aXRob3V0IGFueSBmaWx0ZXJpbmcgcXVlcnkgd2lsbCBiZSB0b28gc2xvdy5cblxuICBhYnN0cmFjdCBsaXN0SURzKHF1ZXJ5OiBvYmplY3QpOiBQcm9taXNlPElEVHlwZVtdPlxuICBhYnN0cmFjdCByZWFkKG9iaklEOiBJRFR5cGUsIC4uLmFyZ3M6IGFueVtdKTogUHJvbWlzZTxvYmplY3Q+XG4gIGFic3RyYWN0IGNyZWF0ZShvYmo6IG9iamVjdCwgLi4uYXJnczogYW55W10pOiBQcm9taXNlPHZvaWQ+XG4gIGFic3RyYWN0IHVwZGF0ZShvYmpJRDogSURUeXBlLCBvYmo6IG9iamVjdCwgLi4uYXJnczogYW55W10pOiBQcm9taXNlPHZvaWQ+XG4gIGFic3RyYWN0IGRlbGV0ZShvYmpJRDogSURUeXBlLCAuLi5hcmdzOiBhbnlbXSk6IFByb21pc2U8dm9pZD5cblxuICBzZXRVcElQQyhkYklEOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAvKiBJbml0aWFsaXplcyBJUEMgZW5kcG9pbnRzIHRvIGVuYWJsZSB0aGUgdXNlciB0byBlLmcuIGNvbmZpZ3VyZSB0aGUgZGF0YSBzdG9yZVxuICAgICAgIG9yIGludm9rZSBob3VzZWtlZXBpbmcgb3IgdXRpbGl0eSByb3V0aW5lcy4gKi9cblxuICAgIGNvbnN0IHByZWZpeCA9IGBkYi0ke2RiSUR9YDtcblxuICAgIGxpc3Rlbjx7fSwgQmFja2VuZERlc2NyaXB0aW9uPGFueT4+XG4gICAgKGAke3ByZWZpeH0tZGVzY3JpYmVgLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5kZXNjcmliZSgpO1xuICAgIH0pO1xuICB9XG59XG5cblxuZXhwb3J0IHR5cGUgTWFuYWdlZERhdGFDaGFuZ2VSZXBvcnRlcjxJRFR5cGU+ID1cbihjaGFuZ2VkSURzPzogSURUeXBlW10pID0+IFByb21pc2U8dm9pZD47XG4vKiBGdW5jdGlvbiBvZiB0aGlzIHNpZ25hdHVyZSB3aWxsIGJlIHBhc3NlZCB0byBtYW5hZ2VyIGNvbnN0cnVjdG9yLFxuICAgdG8gYmUgY2FsbGVkIHdoZW4gbWFuYWdlciByZXBvcnRzIGRhdGEgdXBkYXRlcyB0byBhcHAgd2luZG93cyxcbiAgIGxldHRpbmcgYW55IG9iamVjdCBsaXN0cyByZS1xdWVyeSB0aGUgZGF0YS5cblxuICAgYGNoYW5nZWRJRHNgIGlzIGludGVuZGVkIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHJlLXF1ZXJ5aW5nLlxuICAgQW4gb2JqZWN0IHJlZmVyZW5jZWQgaW4gaXQgbWF5IGhhdmUgYmVlbiBjcmVhdGVkLFxuICAgbW9kaWZpZWQgb3IgZGVsZXRlZC5cbiAgIFxuICAgTWFuYWdlciBtdXN0IG9taXQgYGNoYW5nZWRJRHNgIGlmIGl0IGlzIG5vdCBzdXJlXG4gICB3aGljaCBleGFjdGx5IG9iamVjdHMgZGlkIGNoYW5nZS4gKi9cblxuXG5leHBvcnQgdHlwZSBCYWNrZW5kU3RhdHVzUmVwb3J0ZXI8U3RhdHVzPiA9XG4ocGF5bG9hZDogUGFydGlhbDxTdGF0dXM+KSA9PiBQcm9taXNlPHZvaWQ+O1xuLyogRnVuY3Rpb24gb2YgdGhpcyBzaWduYXR1cmUgd2lsbCBiZSBwYXNzZWQgdG8gYmFja2VuZCBjb25zdHJ1Y3RvcixcbiAgIHRvIGJlIGNhbGxlZCB3aGVuIGJhY2tlbmQgbmVlZHMgdG8gcmVwb3J0IHN0YXR1cyB0byBhcHAgd2luZG93cy4gKi9cblxuXG5leHBvcnQgaW50ZXJmYWNlIEJhY2tlbmRDbGFzczxcbiAgICBJbml0aWFsT3B0aW9ucyBleHRlbmRzIG9iamVjdCxcbiAgICBPcHRpb25zIGV4dGVuZHMgSW5pdGlhbE9wdGlvbnMsXG4gICAgU3RhdHVzIGV4dGVuZHMgb2JqZWN0PiB7XG4gIC8qIEluaXRpYWwgb3B0aW9ucyBhcmUgc3VwcGxpZWQgYnkgdGhlIGRldmVsb3Blci5cbiAgICAgRnVsbCBvcHRpb25zIGluY2x1ZGUgb3B0aW9ucyBjb25maWd1cmFibGUgYnkgdGhlIHVzZXIsIHNvbWUgb2Ygd2hpY2ggbWF5IGJlIHJlcXVpcmVkLlxuXG4gICAgIE5PVEU6IEJ5IOKAnE9wdGlvbuKAnSwgYmFja2VuZCBjb25zdHJ1Y3RvciBwYXJhbWV0ZXIgaXMgbWVhbnQuXG4gICAgIFRPRE86IFRoaXMgaXMgYSBtaXNub21lciBzaW5jZSBzb21lIG9mIHRob3NlIGFyZSBub24tb3B0aW9uYWwuICovXG5cbiAgbmV3IChcbiAgICBvcHRpb25zOiBPcHRpb25zLFxuICAgIHJlcG9ydEJhY2tlbmRTdGF0dXM6IEJhY2tlbmRTdGF0dXNSZXBvcnRlcjxTdGF0dXM+LFxuICApOiBCYWNrZW5kXG4gIC8vIEJhY2tlbmQgY2xhc3NlcyBhcmUgaW5zdGFudGlhdGVkIGJ5IHRoZSBmcmFtZXdvcmsgZHVyaW5nIGFwcCBpbml0aWFsaXphdGlvbi5cblxuICByZWdpc3RlclNldHRpbmdzRm9yQ29uZmlndXJhYmxlT3B0aW9ucz8oXG4gICAgc2V0dGluZ3M6IFNldHRpbmdNYW5hZ2VyLFxuICAgIGluaXRpYWxPcHRpb25zOiBQYXJ0aWFsPEluaXRpYWxPcHRpb25zPixcbiAgICBkYklEOiBzdHJpbmcpOiB2b2lkXG4gIC8qIEdpdmVuIGluaXRpYWwgb3B0aW9ucyBhbmQgYSBzZXR0aW5ncyBtYW5hZ2VyLFxuICAgICByZWdpc3RlciB1c2VyLWNvbmZpZ3VyYWJsZSBzZXR0aW5ncyB0aGF0IGNvbnRyb2wgdGhpcyBEQuKAmXMgYmVoYXZpb3IuXG4gICAgIFRoaXMgbWV0aG9kIGNhbiBtYWtlIGEgc2V0dGluZyByZXF1aXJlZCBpZiBjb3JyZXNwb25kaW5nIG9wdGlvblxuICAgICBpcyBub3QgcHJvdmlkZWQgYnkgdGhlIGRldmVsb3BlciBpbiB0aGUgaW5pdGlhbCBvcHRpb25zLiAqL1xuXG4gIGNvbXBsZXRlT3B0aW9uc0Zyb21TZXR0aW5ncz8oXG4gICAgc2V0dGluZ3M6IFNldHRpbmdNYW5hZ2VyLFxuICAgIGluaXRpYWxPcHRpb25zOiBQYXJ0aWFsPEluaXRpYWxPcHRpb25zPixcbiAgICBkYklEOiBzdHJpbmcpOiBQcm9taXNlPE9wdGlvbnM+XG4gIC8qIEdpdmVuIGluaXRpYWwgb3B0aW9ucyBhbmQgYSBzZXR0aW5ncyBtYW5hZ2VyLFxuICAgICByZXRyaWV2ZSBhbnkgdXNlci1jb25maWd1cmVkIG9wdGlvbnMgaWYgbmVlZGVkXG4gICAgIGFuZCByZXR1cm4gZnVsbCBvcHRpb25zIG9iamVjdCByZXF1aXJlZCBieSB0aGlzIGJhY2tlbmQuICovXG59XG5cblxuLy8gVmVyc2lvbmVkIGJhY2tlbmQgJiBjb21wYXRpYmxlIG1hbmFnZXIuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWZXJzaW9uZWRCYWNrZW5kPElEVHlwZSA9IEFueUlEVHlwZT4gZXh0ZW5kcyBCYWNrZW5kPElEVHlwZT4ge1xuXG4gIGFic3RyYWN0IGRpc2NhcmQob2JqSURzOiBJRFR5cGVbXSk6IFByb21pc2U8dm9pZD5cbiAgLyogRGlzY2FyZCBhbnkgdW5jb21taXR0ZWQgY2hhbmdlcyBtYWRlIHRvIG9iamVjdHMgd2l0aCBzcGVjaWZpZWQgSURzLiAqL1xuXG4gIGFic3RyYWN0IGNvbW1pdChvYmpJRHM6IElEVHlwZVtdLCBjb21taXRNZXNzYWdlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+XG4gIC8qIENvbW1pdCBhbnkgdW5jb21taXR0ZWQgY2hhbmdlcyBtYWRlIHRvIG9iamVjdHMgd2l0aCBzcGVjaWZpZWQgSURzLFxuICAgICB3aXRoIHNwZWNpZmllZCBjb21taXQgbWVzc2FnZS4gKi9cblxuICBhYnN0cmFjdCBsaXN0VW5jb21taXR0ZWQ/KCk6IFByb21pc2U8SURUeXBlW10+XG4gIC8qIExpc3QgSURzIG9mIG9iamVjdHMgd2l0aCB1bmNvbW1pdHRlZCBjaGFuZ2VzLiAqL1xuXG59XG5cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE1vZGVsTWFuYWdlcjxNIGV4dGVuZHMgTW9kZWwsIElEVHlwZSBleHRlbmRzIEFueUlEVHlwZSwgUSBleHRlbmRzIG9iamVjdCA9IG9iamVjdD4ge1xuICAvKiBQYXNzZXMgY2FsbHMgb24gdG8gY29ycmVzcG9uZGluZyBCYWNrZW5kIChvciBzdWJjbGFzcykgbWV0aG9kcyxcbiAgICAgYnV0IGxpbWl0cyB0aGVpciBzY29wZSBvbmx5IHRvIG9iamVjdHMgbWFuaXB1bGF0ZWQgYnkgdGhpcyBtYW5hZ2VyLiAqL1xuXG4gIGFic3RyYWN0IGNvdW50KHF1ZXJ5PzogUSk6IFByb21pc2U8bnVtYmVyPlxuXG4gIGFic3RyYWN0IGxpc3RJRHMocXVlcnk/OiBRKTogUHJvbWlzZTxJRFR5cGVbXT5cbiAgLy8gVE9ETzogUmV0dXJuZWQgSURzIGNhbm5vdCBhdXRvbWF0aWNhbGx5IGJlIGNhc3QgdG8gSURUeXBlO1xuICAvLyBnZXQgcmlkIG9mIElEVHlwZSBnZW5lcmljIGFuZCBtYW5hZ2UgdHlwZXMgaW4gc3ViY2xhc3Nlcz9cblxuICBhYnN0cmFjdCByZWFkQWxsKHF1ZXJ5OiBRKTogUHJvbWlzZTxJbmRleDxNPj5cbiAgYWJzdHJhY3QgcmVhZChpZDogSURUeXBlKTogUHJvbWlzZTxNPlxuICBhYnN0cmFjdCBjcmVhdGUob2JqOiBNLCAuLi5hcmdzOiBhbnlbXSk6IFByb21pc2U8dm9pZD5cbiAgYWJzdHJhY3QgdXBkYXRlKG9iaklEOiBJRFR5cGUsIG9iajogTSwgLi4uYXJnczogYW55W10pOiBQcm9taXNlPHZvaWQ+XG4gIGFic3RyYWN0IGRlbGV0ZShvYmpJRDogSURUeXBlLCAuLi5hcmdzOiB1bmtub3duW10pOiBQcm9taXNlPHZvaWQ+XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldERCUmVmKG9iaklEOiBJRFR5cGUgfCBzdHJpbmcpOiBzdHJpbmdcbiAgcHJvdGVjdGVkIGFic3RyYWN0IGdldE9iaklEKGRiUmVmOiBzdHJpbmcpOiBJRFR5cGVcblxuICBzZXRVcElQQyhtb2RlbE5hbWU6IHN0cmluZykge1xuICAgIC8qIEluaXRpYWxpemVzIElQQyBlbmRwb2ludHMgdG8gcXVlcnkgb3IgdXBkYXRlIGRhdGEgb2JqZWN0cy4gKi9cblxuICAgIGNvbnN0IHByZWZpeCA9IGBtb2RlbC0ke21vZGVsTmFtZX1gO1xuXG4gICAgbGlzdGVuPHsgcXVlcnk/OiBRIH0sIHsgaWRzOiBJRFR5cGVbXSB9PlxuICAgIChgJHtwcmVmaXh9LWxpc3QtaWRzYCwgYXN5bmMgKHsgcXVlcnkgfSkgPT4gKHsgaWRzOiAoYXdhaXQgdGhpcy5saXN0SURzKHF1ZXJ5KSkgfSkpO1xuXG4gICAgbGlzdGVuPHsgcXVlcnk/OiBRIH0sIHsgY291bnQ6IG51bWJlciB9PlxuICAgIChgJHtwcmVmaXh9LWNvdW50YCwgYXN5bmMgKHsgcXVlcnkgfSkgPT4gKHsgY291bnQ6IGF3YWl0IHRoaXMuY291bnQocXVlcnkpIH0pKTtcblxuICAgIGxpc3Rlbjx7IHF1ZXJ5OiBRIH0sIEluZGV4PE0+PlxuICAgIChgJHtwcmVmaXh9LXJlYWQtYWxsYCwgYXN5bmMgKHsgcXVlcnkgfSkgPT4gdGhpcy5yZWFkQWxsKHF1ZXJ5KSk7XG5cbiAgICBsaXN0ZW48eyBvYmplY3RJRDogSURUeXBlIHwgbnVsbCB9LCB7IG9iamVjdDogTSB8IG51bGwgfT5cbiAgICAoYCR7cHJlZml4fS1yZWFkLW9uZWAsIGFzeW5jICh7IG9iamVjdElEIH0pID0+IHtcbiAgICAgIGlmIChvYmplY3RJRCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4geyBvYmplY3Q6IG51bGwgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7IG9iamVjdDogYXdhaXQgdGhpcy5yZWFkKG9iamVjdElEKSB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIENvbW1pdEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29kZTogc3RyaW5nLCBtc2c6IHN0cmluZykge1xuICAgIHN1cGVyKG1zZyk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIG5ldy50YXJnZXQucHJvdG90eXBlKTtcbiAgfVxufVxuXG5cbi8vIFZlcnNpb25lZCBiYWNrZW5kIHNwZWNpZmljYWxseSBiYXNlZCBvbiBsb2NhbCBmaWxlc3lzdGVtLFxuLy8gYW5kIHJlcXVpc2l0ZSBtYW5hZ2VyIGludGVyZmFjZVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmVyc2lvbmVkRmlsZXN5c3RlbUJhY2tlbmQgZXh0ZW5kcyBWZXJzaW9uZWRCYWNrZW5kPHN0cmluZz4ge1xuXG4gIGFic3RyYWN0IGdldEluZGV4KGlkRmllbGQ6IHN0cmluZywgc3ViZGlyOiBzdHJpbmcpOiBQcm9taXNlPEluZGV4PGFueT4+XG5cbiAgYWJzdHJhY3QgcmVnaXN0ZXJNYW5hZ2VyKG1hbmFnZXI6IEZpbGVzeXN0ZW1NYW5hZ2VyKTogdm9pZFxuICAvKiBFbmFibGVzIGluc3RhbmNlcyBvZiB0aGlzIGJhY2tlbmQgdG8ga2VlcCB0cmFjayBvZiBtYW5hZ2VycyxcbiAgICAgd2hpY2ggaXMgcmVxdWlyZWQgZm9yIHRoZSBwdXJwb3NlIG9mIGV4Y2x1ZGluZyBmaWxlc1xuICAgICBjcmVhdGVkIGFyYml0cmFyaWx5IGJ5IE9TIG9yIG90aGVyIHNvZnR3YXJlXG4gICAgIGZyb20gdmVyc2lvbiBjb250cm9sIChzZWUgYHJlc2V0T3JwaGFuZWRGaWxlQ2hhbmdlcygpYCkuXG5cbiAgICAgTk9URTogU28gZmFyIHRoaXMgaXMgdGhlIG9ubHkgcmVhc29uIERCIGJhY2tlbmQgbmVlZHMgdG8ga2VlcCB0cmFja1xuICAgICBvZiBhc3NvY2lhdGVkIG1hbmFnZXJzLlxuICAgICBDb3VsZCBEQiBiYWNrZW5kIGJlIG1hZGUgYXdhcmUgb2Ygd2hpY2ggZmlsZXNcbiAgICAgaXTigJlzIHJlc3BvbnNpYmxlIGZvcj9cbiAgICAgQXZvaWRpbmcgdGhpcyBkZXBlbmRlbmN5IG9uIG1hbmFnZXJzXG4gICAgIHdvdWxkIGJlIGJlbmVmaWNpYWwsIGlmIHRoZXJl4oCZcyBhbiBlbGVnYW50IHdheSBvZiBkb2luZyBpdC4gKi9cblxuICBhYnN0cmFjdCByZXNldE9ycGhhbmVkRmlsZUNoYW5nZXMoKTogUHJvbWlzZTx2b2lkPlxuICAvKiBIb3VzZWtlZXBpbmcgbWV0aG9kIGZvciBmaWxlLWJhc2VkIERCIGJhY2tlbmQuICovXG5cbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbGVzeXN0ZW1NYW5hZ2VyIHtcbiAgbWFuYWdlc0ZpbGVBdFBhdGgoZmlsZVBhdGg6IHN0cmluZyk6IGJvb2xlYW5cbiAgLyogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBtYW5hZ2VyIGluc3RhbmNlIGlzIHJlc3BvbnNpYmxlIGZvciB0aGUgZmlsZVxuICAgICB1bmRlciBnaXZlbiBwYXRoLiAqL1xufVxuIl19