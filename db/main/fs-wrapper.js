import * as fs from 'fs-extra';
import * as path from 'path';
import AsyncLock from 'async-lock';
export class StringLockingFilesystemWrapper {
    constructor(baseDir) {
        this.baseDir = baseDir;
        this.fileAccessLock = new AsyncLock({ maxPending: 100000 });
    }
    expandPath(objID) {
        return path.join(this.baseDir, objID);
    }
    makeRelativePath(absPath) {
        if (path.isAbsolute(absPath)) {
            return path.relative(this.baseDir, absPath);
        }
        else {
            throw new Error("Expecting an absolute path, but got relative");
        }
    }
    async isValidID(value) {
        return true;
    }
    async listIDs(query, ...listArg) {
        const dir = query.subdir ? path.join(this.baseDir, query.subdir) : this.baseDir;
        const potentialIDs = (await fs.readdir(dir));
        var ids = [];
        for (const maybeID of potentialIDs) {
            if (await this.isValidID(maybeID)) {
                ids.push(maybeID);
            }
        }
        return ids;
    }
    async readAll(query, ...readArgs) {
        var objIDs = await this.listIDs(query);
        if (query.onlyIDs !== undefined) {
            objIDs = objIDs.filter(id => { var _a; return (_a = query.onlyIDs) === null || _a === void 0 ? void 0 : _a.includes(id); });
        }
        var objs = [];
        for (const objID of objIDs) {
            objs.push(await this.read(objID, ...readArgs));
        }
        return objs;
    }
    async exists(objID) {
        return await fs.pathExists(this.expandPath(objID));
    }
    async read(objID, ...args) {
        return this.parseData(await this.readRaw(objID));
    }
    async readRaw(objID) {
        const filePath = this.expandPath(objID);
        return await this.fileAccessLock.acquire(filePath, async () => {
            return await fs.readFile(filePath, { encoding: 'utf8' });
        });
    }
    async write(objID, newContents, ...args) {
        const filePath = this.expandPath(objID);
        return await this.fileAccessLock.acquire(filePath, async () => {
            await fs.ensureDir(path.dirname(filePath));
            if (newContents !== undefined) {
                await fs.writeFile(filePath, this.dumpData(newContents), { encoding: 'utf8' });
            }
            else {
                await fs.remove(filePath);
            }
            return [this.makeRelativePath(filePath)];
        });
    }
    parseData(contents) {
        return contents;
    }
    dumpData(data) {
        return data;
    }
}
export class AbstractLockingFilesystemWrapper extends StringLockingFilesystemWrapper {
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnMtd3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYi9tYWluL2ZzLXdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBaUVuQyxNQUFNLE9BQWdCLDhCQUE4QjtJQVlsRCxZQUFtQixPQUFlO1FBQWYsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNoQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLFVBQVUsQ0FBQyxLQUFhO1FBQzdCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxPQUFlO1FBQ3JDLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM1QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1NBQ2pFO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBYTtRQUNsQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQTBCLEVBQUUsR0FBRyxPQUFjO1FBQ2hFLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENB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LENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxTQUFTLENBQUMsUUFBZ0I7UUFDL0IsT0FBTyxRQUF3QixDQUFBO0lBQ2pDLENBQUM7SUFFUyxRQUFRLENBQUMsSUFBTztRQUN4QixPQUFPLElBQXlCLENBQUE7SUFDbEMsQ0FBQztDQUNGO0FBR0QsTUFBTSxPQUFnQixnQ0FDdEIsU0FBUSw4QkFBaUM7Q0FHeEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEFzeW5jTG9jayBmcm9tICdhc3luYy1sb2NrJztcblxuXG50eXBlIEZpbGVzeXN0ZW1QYXRoID0gc3RyaW5nO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgRmlsZXN5c3RlbVdyYXBwZXI8VD4ge1xuICAvKiBTcGVjIGZvciBmaWxlc3lzdGVtIGJhY2tlbmRzXG4gICAgIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCBHaXQgZmlsZXN5c3RlbSBvYmplY3Qgc3RvcmUuXG5cbiAgICAgSXQgaGFzIGl0cyBvd24gY29uY2VwdCBvZiDigJxvYmplY3QgSURz4oCdLFxuICAgICB3aGljaCBhcmUgcmVmZXJlbmNlcyB0byBmaWxlc3lzdGVtIGVudHJpZXMuXG4gICAgIElmIGJhY2tlbmQgb3BlcmF0ZXMgb24gZmlsZXMgb2Ygc2luZ2xlIHR5cGUsXG4gICAgIG9iamVjdCBJRHMgd291bGQgcHJvYmFibHkgZXhjbHVkZSBmaWxlbmFtZSBleHRlbnNpb24uXG4gICAgIFRoZSBTdG9yZSB1c2luZyB0aGlzIGJhY2tlbmQgd291bGQgY29udmVydCBvYmplY3QgSURzIHRvICovXG5cbiAgLy8gVE9ETzogTWFrZSBub24tZ2VuZXJpYyBhbmQgb3BlcmF0ZSBvbiBgYW55YCxcbiAgLy8gbGV0IG90aGVyIGxheWVycyBkZWFsIHdpdGggbmFycm93ZXIgdHlwZXMgKD8pXG5cbiAgYmFzZURpcjogc3RyaW5nO1xuICAvKiBBYnNvbHV0ZSBwYXRoLlxuICAgICBCYWNrZW5kIGlzIG5vdCBjb25jZXJuZWQgd2l0aCBmaWxlcyBvdXRzaWRlIHRoaXMgcGF0aC5cbiAgICAgVE9ETzogQ291bGQgYmV0dGVyIGJlIG1hZGUgcmVhZC1vbmx5LCBiZWhpbmQgYWNjZXNzb3IgbWV0aG9kLiAqL1xuXG4gIHJlYWRSYXcob2JqSUQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPjtcblxuICByZWFkKG9iaklEOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKTogUHJvbWlzZTxUPjtcblxuICBsaXN0SURzKHF1ZXJ5OiB7IHN1YmRpcj86IHN0cmluZyB9LCAuLi5saXN0QXJnczogYW55W10pOiBQcm9taXNlPHN0cmluZ1tdPjtcblxuICByZWFkQWxsKHF1ZXJ5OiB7IHN1YmRpcj86IHN0cmluZywgb25seUlEcz86IHN0cmluZ1tdIH0sIC4uLnJlYWRBcmdzOiBhbnlbXSk6IFByb21pc2U8VFtdPjtcbiAgLyogU2NhbiBmaWxlc3lzdGVtIGFuZCByZXR1cm5zIGFsbCB0aGUgb2JqZWN0cyBmb3VuZC4gKi9cblxuICB3cml0ZShvYmpJRDogc3RyaW5nLCBuZXdEYXRhOiBUIHwgdW5kZWZpbmVkLCAuLi5hcmdzOiBhbnlbXSk6IFByb21pc2U8RmlsZXN5c3RlbVBhdGhbXT47XG4gIC8qIFVwZGF0ZXMgZ2l2ZW4gb2JqZWN0IGFuZCByZXR1cm5zIGEgbGlzdCBvZiBmaWxlc3lzdGVtIHBhdGhzIHRoYXQgY291bGQgYmUgYWZmZWN0ZWQuXG4gICAgIElmIGBuZXdEYXRhYCBpcyB1bmRlZmluZWQsIHRoZSBvYmplY3QgaXMgZXhwZWN0ZWQgdG8gYmUgZGVsZXRlZC4gKi9cblxuXG4gIC8vIFRPRE86IEZvbGxvd2luZyB0d28gY2FuIGJlIHJlbmFtZWQgZm9yIGNsYXJpdHkuXG5cbiAgZXhwYW5kUGF0aChvYmpJRDogc3RyaW5nKTogc3RyaW5nO1xuICAvKiBSZXR1cm5zIGFuIGFic29sdXRlIHBhdGggdG8gb2JqZWN0IGZpbGUgb3Igcm9vdCBkaXJlY3RvcnksXG4gICAgIGdpdmVuIG9iamVjdCBJRC4gQWRkcyBhbiBleHRlbnNpb24gd2hlcmUgYXBwbGljYWJsZS5cbiAgICAgVXNlZCBieSByZWFkKCksIHdyaXRlKCkgdW5kZXIgdGhlIGhvb2QuIFRPRE86IFNob3VsZCBiZSBtYWRlIHByaXZhdGU/ICovXG5cbiAgZXhpc3RzKG9iaklEOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAvKiBHaXZlbiBvYmplY3QgSUQsIHJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGFjdHVhbGx5IGV4aXN0cy5cbiAgICAgVXNlZCB3aGVuIHN0b3JpbmcgZS5nLiB0byBhdm9pZCBvdmVyd3JpdGluZyBhbiBleGlzdGluZyBvYmplY3QuICovXG5cbiAgaXNWYWxpZElEKGZpbGVwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+O1xuICAvKiBHaXZlbiBhIHBhdGgsIHJldHVybnMgdHJ1ZSBpZiBpdCBsb29rcyBsaWtlIGEgdmFsaWQgb2JqZWN0IElELlxuXG4gICAgIFRoaXMgaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBmb3Igd2VlZGluZyBvdXQgcmFuZG9tIGZpbGVzXG4gICAgIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBkYXRhYmFzZSwgZS5nLiBzeXN0ZW0gZmlsZXMvZGlyZWN0b3JpZXMsXG4gICAgIHdoZW4gbG9hZGluZyBvYmplY3RzIGZyb20gZmlsZXN5c3RlbS5cblxuICAgICBUaGlzIGNhbiBiZSBhcyBzaW1wbGUgYXMgY29tcGFyaW5nIHRoZSBleHRlbnNpb25cbiAgICAgYnV0IGlmIG5lY2Vzc2FyeSBjYW4gZG8gZnVydGhlciBjaGVja3Mgb24gZmlsZS9kaXJlY3RvcnkgY29udGVudHMuICovXG5cbiAgcGFyc2VEYXRhKGNvbnRlbnRzOiBzdHJpbmcpOiBUO1xuICAvKiBHaXZlbiBzdHJpbmcgY29udGVudHMsIHJldHVybnMgdGhlIG9iamVjdCBvZiBleHBlZWN0ZWQgdHlwZVxuICAgICAoZS5nLiwgZGVjb2Rpbmcgc2VyaWFsaXplZCBmb3JtYXQpLiAqL1xufVxuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTdHJpbmdMb2NraW5nRmlsZXN5c3RlbVdyYXBwZXI8VCA9IHN0cmluZz5cbmltcGxlbWVudHMgRmlsZXN5c3RlbVdyYXBwZXI8VD4ge1xuICAvKiBCYXNpYyBmaWxlc3lzdGVtIGJhY2tlbmQgYXJvdW5kIE5vZGUuanMgZnMtZXh0cmFcbiAgICAgaW1wbGVtZW50aW5nIGxvY2tpbmcgYXJvdW5kIGZpbGUgcmVhZHMvd3JpdGVzXG4gICAgIChsb2NrcyBiYXNlZCBvbiBmaWxlIHBhdGgsIHNvIHRoYXQgaXQgY2Fubm90IGJlIHdyaXR0ZW4gdG9cbiAgICAgIHdoaWxlIGl04oCZcyBiZWluZyByZWFkIGZyb20vd3JpdHRlbiB0bykuXG5cbiAgICAgIFdvcmtzIHdpdGggc3RyaW5ncy5cbiAgKi9cblxuICBwcml2YXRlIGZpbGVBY2Nlc3NMb2NrOiBBc3luY0xvY2s7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGJhc2VEaXI6IHN0cmluZykge1xuICAgIHRoaXMuZmlsZUFjY2Vzc0xvY2sgPSBuZXcgQXN5bmNMb2NrKHsgbWF4UGVuZGluZzogMTAwMDAwIH0pO1xuICB9XG5cbiAgcHVibGljIGV4cGFuZFBhdGgob2JqSUQ6IHN0cmluZykge1xuICAgIHJldHVybiBwYXRoLmpvaW4odGhpcy5iYXNlRGlyLCBvYmpJRCk7XG4gIH1cblxuICBwdWJsaWMgbWFrZVJlbGF0aXZlUGF0aChhYnNQYXRoOiBzdHJpbmcpIHtcbiAgICBpZiAocGF0aC5pc0Fic29sdXRlKGFic1BhdGgpKSB7XG4gICAgICByZXR1cm4gcGF0aC5yZWxhdGl2ZSh0aGlzLmJhc2VEaXIsIGFic1BhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RpbmcgYW4gYWJzb2x1dGUgcGF0aCwgYnV0IGdvdCByZWxhdGl2ZVwiKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgaXNWYWxpZElEKHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBsaXN0SURzKHF1ZXJ5OiB7IHN1YmRpcj86IHN0cmluZyB9LCAuLi5saXN0QXJnOiBhbnlbXSkge1xuICAgIGNvbnN0IGRpciA9IHF1ZXJ5LnN1YmRpciA/IHBhdGguam9pbih0aGlzLmJhc2VEaXIsIHF1ZXJ5LnN1YmRpcikgOiB0aGlzLmJhc2VEaXI7XG5cbiAgICBjb25zdCBwb3RlbnRpYWxJRHMgPSAoYXdhaXQgZnMucmVhZGRpcihkaXIpKTtcbiAgICB2YXIgaWRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgbWF5YmVJRCBvZiBwb3RlbnRpYWxJRHMpIHtcbiAgICAgIGlmIChhd2FpdCB0aGlzLmlzVmFsaWRJRChtYXliZUlEKSkge1xuICAgICAgICBpZHMucHVzaChtYXliZUlEKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkcztcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkQWxsKHF1ZXJ5OiB7IHN1YmRpcj86IHN0cmluZywgb25seUlEcz86IHN0cmluZ1tdIH0sIC4uLnJlYWRBcmdzOiBhbnlbXSkge1xuICAgIHZhciBvYmpJRHMgPSBhd2FpdCB0aGlzLmxpc3RJRHMocXVlcnkpO1xuXG4gICAgaWYgKHF1ZXJ5Lm9ubHlJRHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb2JqSURzID0gb2JqSURzLmZpbHRlcihpZCA9PiBxdWVyeS5vbmx5SURzPy5pbmNsdWRlcyhpZCkpO1xuICAgIH1cblxuICAgIHZhciBvYmpzID0gW107XG4gICAgZm9yIChjb25zdCBvYmpJRCBvZiBvYmpJRHMpIHtcbiAgICAgIG9ianMucHVzaChhd2FpdCB0aGlzLnJlYWQob2JqSUQsIC4uLnJlYWRBcmdzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9ianM7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZXhpc3RzKG9iaklEOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gYXdhaXQgZnMucGF0aEV4aXN0cyh0aGlzLmV4cGFuZFBhdGgob2JqSUQpKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyByZWFkKG9iaklEOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgcmV0dXJuIHRoaXMucGFyc2VEYXRhKGF3YWl0IHRoaXMucmVhZFJhdyhvYmpJRCkpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIHJlYWRSYXcob2JqSUQ6IHN0cmluZykge1xuICAgIGNvbnN0IGZpbGVQYXRoID0gdGhpcy5leHBhbmRQYXRoKG9iaklEKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5maWxlQWNjZXNzTG9jay5hY3F1aXJlKGZpbGVQYXRoLCBhc3luYyAoKSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUoZmlsZVBhdGgsIHsgZW5jb2Rpbmc6ICd1dGY4JyB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyB3cml0ZShvYmpJRDogc3RyaW5nLCBuZXdDb250ZW50czogVCB8IHVuZGVmaW5lZCwgLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zdCBmaWxlUGF0aCA9IHRoaXMuZXhwYW5kUGF0aChvYmpJRCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZmlsZUFjY2Vzc0xvY2suYWNxdWlyZShmaWxlUGF0aCwgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZnMuZW5zdXJlRGlyKHBhdGguZGlybmFtZShmaWxlUGF0aCkpO1xuICAgICAgaWYgKG5ld0NvbnRlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgYXdhaXQgZnMud3JpdGVGaWxlKGZpbGVQYXRoLCB0aGlzLmR1bXBEYXRhKG5ld0NvbnRlbnRzKSwgeyBlbmNvZGluZzogJ3V0ZjgnIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXdhaXQgZnMucmVtb3ZlKGZpbGVQYXRoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBbdGhpcy5tYWtlUmVsYXRpdmVQYXRoKGZpbGVQYXRoKV07XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcGFyc2VEYXRhKGNvbnRlbnRzOiBzdHJpbmcpOiBUIHtcbiAgICByZXR1cm4gY29udGVudHMgYXMgdW5rbm93biBhcyBUXG4gIH1cblxuICBwcm90ZWN0ZWQgZHVtcERhdGEoZGF0YTogVCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGRhdGEgYXMgdW5rbm93biBhcyBzdHJpbmdcbiAgfVxufVxuXG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdExvY2tpbmdGaWxlc3lzdGVtV3JhcHBlcjxUPlxuZXh0ZW5kcyBTdHJpbmdMb2NraW5nRmlsZXN5c3RlbVdyYXBwZXI8VD4ge1xuICBwdWJsaWMgYWJzdHJhY3QgcGFyc2VEYXRhKGNvbnRlbnRzOiBzdHJpbmcpOiBUXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBkdW1wRGF0YShkYXRhOiBUKTogc3RyaW5nXG59XG4iXX0=