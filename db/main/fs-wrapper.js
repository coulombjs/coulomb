import * as fs from 'fs-extra';
import * as path from 'path';
import AsyncLock from 'async-lock';
export class AbstractLockingFilesystemWrapper {
    constructor(baseDir) {
        this.baseDir = baseDir;
        this.fileAccessLock = new AsyncLock();
    }
    expandPath(objID) {
        return path.join(this.baseDir, objID);
    }
    makeRelativePath(absPath) {
        if (path.isAbsolute(absPath)) {
            return path.relative(this.baseDir, absPath);
        }
        else {
            throw new Error("Expecting an absolute path, but got relative");
        }
    }
    async isValidID(value) {
        return true;
    }
    async readAll(...args) {
        const objIDs = await fs.readdir(this.baseDir);
        var objs = [];
        for (const objID of objIDs) {
            if (await this.isValidID(objID)) {
                objs.push(await this.read(objID, ...args));
            }
        }
        return objs;
    }
    async exists(objID) {
        return await fs.pathExists(this.expandPath(objID));
    }
    async read(objID, ...args) {
        const filePath = this.expandPath(objID);
        return await this.fileAccessLock.acquire(filePath, async () => {
            return this.parseData(await fs.readFile(filePath, { encoding: 'utf8' }));
        });
    }
    async write(objID, newContents, ...args) {
        const filePath = this.expandPath(objID);
        return await this.fileAccessLock.acquire(filePath, async () => {
            if (newContents !== undefined) {
                await fs.writeFile(filePath, this.dumpData(newContents), { encoding: 'utf8' });
            }
            else {
                await fs.remove(filePath);
            }
            return [this.makeRelativePath(filePath)];
        });
    }
}
//# sourceMappingURL=data:application/json;base64,