export class QuerySet {
    constructor(index, order = sortAlphabeticallyAscending, items = undefined, ordered = false) {
        this.index = index;
        this.items = items === undefined ? Object.entries(index) : items;
        this.order = order;
        this._ordered = ordered;
    }
    get(id) {
        return this.index[id];
    }
    add(obj) {
        this.index[obj.id] = obj;
    }
    orderBy(comparison) {
        return new QuerySet(this.index, this.order, [...this.items].sort(comparison), true);
    }
    filter(func) {
        return new QuerySet(this.index, this.order, this.items.filter(func), this._ordered);
    }
    all() {
        return this._ordered
            ? this.items.map(item => item[1])
            : this.orderBy(this.order).items.map(item => item[1]);
    }
}
export const sortAlphabeticallyAscending = function (a, b) {
    return a[0].localeCompare(b[0]);
};
export const sortIntegerDescending = function (a, b) {
    return parseInt(b[0], 10) - parseInt(a[0], 10);
};
export const sortIntegerAscending = function (a, b) {
    return parseInt(a[0], 10) - parseInt(b[0], 10);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGIvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU0EsTUFBTSxPQUFPLFFBQVE7SUFRbkIsWUFDSSxLQUFlLEVBQ2YsUUFBcUIsMkJBQTJCLEVBQ2hELFFBQW1DLFNBQVMsRUFDNUMsT0FBTyxHQUFHLEtBQUs7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDakUsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUNELEdBQUcsQ0FBQyxFQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxHQUFHLENBQUMsR0FBTTtRQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUMzQixDQUFDO0lBQ0QsT0FBTyxDQUFDLFVBQXVCO1FBQzdCLE9BQU8sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFDRCxNQUFNLENBQUMsSUFBb0M7UUFDekMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RGLENBQUM7SUFDRCxHQUFHO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUTtZQUNsQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0NBQ0Y7QUFJRCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBZ0IsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUNwRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFBO0FBQ0QsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQWdCLFVBQVUsQ0FBb0IsRUFBRSxDQUFvQjtJQUNwRyxPQUFPLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNqRCxDQUFDLENBQUE7QUFDRCxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBZ0IsVUFBVSxDQUFvQixFQUFFLENBQW9CO0lBQ25HLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2pELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZGVsIH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5cbmV4cG9ydCB0eXBlIEluZGV4PE0gZXh0ZW5kcyBNb2RlbD4gPSBSZWNvcmQ8c3RyaW5nLCBNPjtcblxuXG5pbnRlcmZhY2UgQXJyYXlTb3J0ZXIgeyAoYTogW3N0cmluZywgdW5rbm93bl0sIGI6IFtzdHJpbmcsIHVua25vd25dKTogbnVtYmVyIH1cblxuXG5leHBvcnQgY2xhc3MgUXVlcnlTZXQ8TSBleHRlbmRzIE1vZGVsPiB7XG4gIC8qIFNpbXBsaWZpZXMgc29tZSBvcGVyYXRpb25zIG9uIGluZGV4ZXMsIGxpa2UgYSBtaW5pLXBzZXVkby1PUk0uICovXG5cbiAgaW5kZXg6IEluZGV4PE0+O1xuICBvcmRlcjogQXJyYXlTb3J0ZXI7XG4gIGl0ZW1zOiBbc3RyaW5nLCBNXVtdO1xuICBfb3JkZXJlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGluZGV4OiBJbmRleDxNPixcbiAgICAgIG9yZGVyOiBBcnJheVNvcnRlciA9IHNvcnRBbHBoYWJldGljYWxseUFzY2VuZGluZyxcbiAgICAgIGl0ZW1zOiBbc3RyaW5nLCBNXVtdIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkLFxuICAgICAgb3JkZXJlZCA9IGZhbHNlKSB7XG4gICAgdGhpcy5pbmRleCA9IGluZGV4O1xuICAgIHRoaXMuaXRlbXMgPSBpdGVtcyA9PT0gdW5kZWZpbmVkID8gT2JqZWN0LmVudHJpZXMoaW5kZXgpIDogaXRlbXM7XG4gICAgdGhpcy5vcmRlciA9IG9yZGVyO1xuICAgIHRoaXMuX29yZGVyZWQgPSBvcmRlcmVkO1xuICB9XG4gIGdldChpZDogc3RyaW5nKTogTSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXhbaWRdO1xuICB9XG4gIGFkZChvYmo6IE0pOiB2b2lkIHtcbiAgICB0aGlzLmluZGV4W29iai5pZF0gPSBvYmo7XG4gIH1cbiAgb3JkZXJCeShjb21wYXJpc29uOiBBcnJheVNvcnRlcikge1xuICAgIHJldHVybiBuZXcgUXVlcnlTZXQodGhpcy5pbmRleCwgdGhpcy5vcmRlciwgWy4uLnRoaXMuaXRlbXNdLnNvcnQoY29tcGFyaXNvbiksIHRydWUpO1xuICB9XG4gIGZpbHRlcihmdW5jOiAoaXRlbTogW3N0cmluZywgTV0pID0+IGJvb2xlYW4pIHtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5U2V0KHRoaXMuaW5kZXgsIHRoaXMub3JkZXIsIHRoaXMuaXRlbXMuZmlsdGVyKGZ1bmMpLCB0aGlzLl9vcmRlcmVkKTtcbiAgfVxuICBhbGwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29yZGVyZWRcbiAgICAgID8gdGhpcy5pdGVtcy5tYXAoaXRlbSA9PiBpdGVtWzFdKVxuICAgICAgOiB0aGlzLm9yZGVyQnkodGhpcy5vcmRlcikuaXRlbXMubWFwKGl0ZW0gPT4gaXRlbVsxXSk7XG4gIH1cbn1cblxuXG5cbmV4cG9ydCBjb25zdCBzb3J0QWxwaGFiZXRpY2FsbHlBc2NlbmRpbmc6IEFycmF5U29ydGVyID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0ubG9jYWxlQ29tcGFyZShiWzBdKTtcbn1cbmV4cG9ydCBjb25zdCBzb3J0SW50ZWdlckRlc2NlbmRpbmc6IEFycmF5U29ydGVyID0gZnVuY3Rpb24gKGE6IFtzdHJpbmcsIHVua25vd25dLCBiOiBbc3RyaW5nLCB1bmtub3duXSk6IG51bWJlciB7XG4gIHJldHVybiBwYXJzZUludChiWzBdLCAxMCkgLSBwYXJzZUludChhWzBdLCAxMCk7XG59XG5leHBvcnQgY29uc3Qgc29ydEludGVnZXJBc2NlbmRpbmc6IEFycmF5U29ydGVyID0gZnVuY3Rpb24gKGE6IFtzdHJpbmcsIHVua25vd25dLCBiOiBbc3RyaW5nLCB1bmtub3duXSk6IG51bWJlciB7XG4gIHJldHVybiBwYXJzZUludChhWzBdLCAxMCkgLSBwYXJzZUludChiWzBdLCAxMCk7XG59XG4iXX0=