{"version":3,"file":"single-db-status-context-provider.js","sourceRoot":"","sources":["../../../src/db/renderer/single-db-status-context-provider.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACvC,OAAO,KAAK,GAAG,MAAM,cAAc,CAAC;AACpC,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAOjD,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,CAAC,aAAa,CAAiC;IACvF,WAAW,EAAE,EAAE;IACf,MAAM,EAAE,EAAE;CACX,CAAC,CAAC;AACH,MAAM,6BAA6B,GAAyC,UAAU,KAAK;IAEzF,MAAM,SAAS,GAAG,MAAM,KAAK,CAAC,MAAM,EAAE,CAAC;IAEvC,MAAM,CAAC,aAAa,EAAE,mBAAmB,CAAC,GAAG,QAAQ,CAAC,SAA+B,CAAC,CAAC;IACvF,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,SAAS,WAAW,EAAE,IAAsC,CAAC,CAAC;IAEjG,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC,EAAE,CAAC,GAAG,SAAS,SAAS,EAAE,eAAe,CAAC,CAAC;QACvD,OAAO,SAAS,OAAO;YACrB,WAAW,CAAC,cAAc,CAAC,GAAG,SAAS,SAAS,EAAE,eAAe,CAAC,CAAC;QACrE,CAAC,CAAA;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,2BAA2B;IAC3B,SAAS,eAAe,CAAC,GAAQ,EAAE,SAAc;QAC/C,GAAG,CAAC,KAAK,CAAC,4BAA4B,EAAE,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QACjE,mBAAmB,CAAC,SAAS,CAAC,CAAC;IACjC,CAAC;IAED,OAAO,CACL,oBAAC,qBAAqB,CAAC,QAAQ,IAC3B,KAAK,EAAE,WAAW,CAAC,KAAK,KAAK,IAAI;YAC/B,CAAC,iCAAM,WAAW,CAAC,KAAK,KAAE,MAAM,EAAE,aAAa,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,IAC3E,CAAC,CAAC,IAAI,IACT,KAAK,CAAC,QAAQ,CACgB,CAClC,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,6BAA6B,CAAC","sourcesContent":["import { ipcRenderer } from 'electron';\nimport * as log from 'electron-log';\nimport React, { useState, useEffect } from 'react';\nimport { useIPCValue } from '../../ipc/renderer';\nimport { BackendDescription } from '../base';\n\n\nexport type SingleDBStatusContextProps = {\n  dbName: string\n};\nexport const SingleDBStatusContext = React.createContext<null | BackendDescription<any>>({\n  verboseName: '',\n  status: {},\n});\nconst SingleDBStatusContextProvider: React.FC<SingleDBStatusContextProps> = function (props) {\n\n  const ipcPrefix = `db-${props.dbName}`;\n\n  const [backendStatus, updateBackendStatus] = useState(undefined as undefined | object);\n  const description = useIPCValue(`${ipcPrefix}-describe`, null as null | BackendDescription<any>);\n\n  useEffect(() => {\n    ipcRenderer.on(`${ipcPrefix}-status`, handleNewStatus);\n    return function cleanup() {\n      ipcRenderer.removeListener(`${ipcPrefix}-status`, handleNewStatus);\n    }\n  }, []);\n\n  // Listen to status updates\n  function handleNewStatus(evt: any, newStatus: any) {\n    log.debug(\"Received new status for DB\", props.dbName, newStatus);\n    updateBackendStatus(newStatus);\n  }\n\n  return (\n    <SingleDBStatusContext.Provider\n        value={description.value !== null\n          ? { ...description.value, status: backendStatus || description.value.status }\n          : null}>\n      {props.children}\n    </SingleDBStatusContext.Provider>\n  );\n};\n\nexport default SingleDBStatusContextProvider;\n"]}