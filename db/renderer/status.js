import { ipcRenderer } from 'electron';
import * as log from 'electron-log';
import React, { useEffect, useState } from 'react';
import { Spinner } from '@blueprintjs/core';
import { useIPCValue } from '../../ipc/renderer';
import styles from './status.scss';
export const DatabaseList = function ({ databases, databaseStatusComponents }) {
    const [dbs, updateDBs] = useState({});
    useEffect(() => {
        (async () => {
            for (const [dbID, meta] of Object.entries(databases)) {
                const backendDetailsComponentResolver = async () => (await databaseStatusComponents[dbID]()).default;
                updateDBs(Object.assign(Object.assign({}, dbs), { [dbID]: { meta, backendDetailsComponentResolver } }));
            }
        })();
    }, []);
    return (React.createElement(React.Fragment, null, Object.entries(dbs).map(([dbID, dbData]) => React.createElement(DBStatus, { key: dbID, dbName: dbID, meta: dbData.meta, backendDetailsComponentResolver: dbData.backendDetailsComponentResolver }))));
};
export const DBStatus = function ({ dbName, meta, backendDetailsComponentResolver }) {
    var _a, _b;
    const description = useIPCValue(`db-${dbName}-describe`, null);
    const [status, updateStatus] = useState(null);
    const [BackendDetails, setBackendDetailsComponent] = useState(null);
    const ipcPrefix = `db-${dbName}`;
    // TODO: Redo pluggable backend widget? Move most of the presentation here;
    // make backend provide context provider component with actions & info.
    useEffect(() => {
        // Fetch component configured to display this DB status appropriately
        (async () => {
            const BackendDetails = (await backendDetailsComponentResolver());
            log.debug("Resolved backend details widget", BackendDetails);
            setBackendDetailsComponent(() => BackendDetails);
        })();
        // Listen to status updates
        function handleNewStatus(evt, newStatus) {
            log.debug("Received new status for DB", dbName, newStatus);
            updateStatus(newStatus);
        }
        ipcRenderer.on(`${ipcPrefix}-status`, handleNewStatus);
        return function cleanup() {
            ipcRenderer.removeListener(`${ipcPrefix}-status`, handleNewStatus);
        };
    }, []);
    if (description.value !== null && BackendDetails !== null) {
        log.silly("Rendering DB status widget for", dbName, meta.verboseName, description.value, status);
        log.silly("Using widget", BackendDetails);
    }
    const backendType = (_a = description.value) === null || _a === void 0 ? void 0 : _a.verboseName;
    return (React.createElement("div", { className: `
        ${styles.base}
        ${BackendDetails === null ? styles.widgetLoading : ''}
        ${description.value === null ? styles.descriptionLoading : ''}` },
        React.createElement("div", { className: styles.dbLabel },
            React.createElement("span", { className: styles.dbName }, meta.verboseName),
            backendType
                ? React.createElement("span", { className: styles.backendType }, backendType)
                : null),
        React.createElement("div", { className: styles.backendDetails }, description.value !== null && BackendDetails !== null
            ? React.createElement(BackendDetails, { dbIPCPrefix: ipcPrefix, status: status || ((_b = description.value) === null || _b === void 0 ? void 0 : _b.status), description: description.value })
            : React.createElement(Spinner, null))));
};
//# sourceMappingURL=data:application/json;base64,