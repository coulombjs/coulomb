{"version":3,"file":"status.js","sourceRoot":"","sources":["../../../src/db/renderer/status.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ipcRenderer } from 'electron';\nimport * as log from 'electron-log';\n\nimport React, { useEffect, useState, useMemo } from 'react';\nimport { FormGroup, Classes } from '@blueprintjs/core';\n\nimport { AppConfig, DatabaseInfo } from '../../config/app';\nimport { RendererConfig, DatabaseStatusComponentProps } from '../../config/renderer';\nimport { useIPCValue } from '../../ipc/renderer';\nimport { BackendDescription } from '../base';\n\nimport styles from './status.scss';\n\n\ntype UnknownDBStatusComponent = React.FC<DatabaseStatusComponentProps<any, any>>;\n\ninterface DatabaseListProps {\n  databases: AppConfig[\"databases\"]\n  databaseStatusComponents: RendererConfig<any>[\"databaseStatusComponents\"]\n}\nexport const DatabaseList: React.FC<DatabaseListProps> =\nfunction ({ databases, databaseStatusComponents }) {\n  type Databases = {\n    [dbName in keyof typeof databases]: {\n      meta: DatabaseInfo\n      backendDetailsComponentResolver:\n        () => Promise<UnknownDBStatusComponent>\n    }\n  };\n\n  const dbs: Databases = useMemo(() => (Object.entries(databases).map(([dbID, meta]) => {\n    const backendDetailsComponentResolver =\n      async () => (await databaseStatusComponents[dbID]()).default;\n    return { [dbID]: { meta, backendDetailsComponentResolver } };\n  }).reduce((prev, curr) => ({ ...prev, ...curr }))), Object.keys(databases));\n\n  return (\n    <>\n      {Object.entries(dbs).map(([dbID, dbData]) =>\n        <DBStatus\n          key={dbID}\n          dbName={dbID}\n          meta={dbData.meta}\n          backendDetailsComponentResolver={dbData.backendDetailsComponentResolver}\n        />)}\n    </>\n  );\n};\n\n\ninterface DBStatusProps {\n  dbName: string\n  meta: DatabaseInfo\n  backendDetailsComponentResolver: () => Promise<UnknownDBStatusComponent>\n}\nexport const DBStatus: React.FC<DBStatusProps> = function ({ dbName, meta, backendDetailsComponentResolver }) {\n  const description = useIPCValue(`db-${dbName}-describe`, null as null | BackendDescription<any>);\n  const [status, updateStatus] = useState(null as null | object);\n  const [BackendDetails, setBackendDetailsComponent] = useState(null as (null | (() => UnknownDBStatusComponent)));\n  const ipcPrefix = `db-${dbName}`;\n\n  // TODO: Redo pluggable backend widget? Move most of the presentation here;\n  // make backend provide context provider component with actions & info.\n\n  // Listen to status updates\n  function handleNewStatus(evt: any, newStatus: any) {\n    log.debug(\"Received new status for DB\", dbName, newStatus);\n    updateStatus(newStatus);\n  }\n\n  useEffect(() => {\n    // Fetch component configured to display this DB status appropriately\n    (async () => {\n      const BackendDetails = (await backendDetailsComponentResolver());\n      log.debug(\"Resolved backend details widget\", BackendDetails)\n      setBackendDetailsComponent(() => BackendDetails);\n    })();\n\n    ipcRenderer.on(`${ipcPrefix}-status`, handleNewStatus);\n    return function cleanup() {\n      ipcRenderer.removeListener(`${ipcPrefix}-status`, handleNewStatus);\n    }\n  }, []);\n\n  // if (description.value !== null && BackendDetails !== null) {\n  //   log.silly(\"Rendering DB status widget for\", dbName, meta.verboseName, description.value, status);\n  //   log.silly(\"Using widget\", BackendDetails);\n  // }\n\n  const backendData = description.value;\n\n  const backendView: JSX.Element = backendData !== null\n    ? <span className={styles.backendType} title={backendData.verboseNameLong}>\n        {backendData.verboseName}\n      </span>\n    : <span className={Classes.SKELETON}>Loading…</span>;\n\n  return (\n    <FormGroup\n        className={`\n          ${styles.base}\n          ${BackendDetails === null ? styles.widgetLoading : ''}\n          ${description.value === null ? styles.descriptionLoading : ''}`}\n        label={meta.verboseName}\n        labelInfo={backendView}>\n\n      <div className={styles.backendDetails}>\n        {description.value !== null && BackendDetails !== null\n          ? <BackendDetails\n              dbIPCPrefix={ipcPrefix}\n              status={status || description.value?.status}\n              description={description.value} />\n          : <div className={Classes.SKELETON}>Loading…</div>}\n      </div>\n    </FormGroup>\n  );\n};"]}