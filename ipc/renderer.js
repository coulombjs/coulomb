/* Wraps IPC communication in React hooks & locking queue. */
import AsyncLock from 'async-lock';
import { ipcRenderer } from 'electron';
import { useEffect, useState } from 'react';
import { reviveJsonValue } from './utils';
class IPCFailure extends Error {
    constructor(errorMessageList) {
        super(errorMessageList.join('; '));
        this.errorMessageList = errorMessageList;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
export function useIPCValue(endpointName, initialValue, payload) {
    const [value, updateValue] = useState(initialValue);
    const [errors, updateErrors] = useState([]);
    const [reqCounter, updateReqCounter] = useState(0);
    useEffect(() => {
        ipcEndpointRequestLock.acquire(endpointName, async function () {
            const resp = await ipcRenderer.invoke(endpointName, JSON.stringify(payload || {}));
            const data = JSON.parse(resp, reviveJsonValue);
            if (data.errors !== undefined) {
                const resp = data;
                updateValue(data.result);
                if (resp.result === undefined) {
                    if (resp.errors.length > 0) {
                        updateErrors(resp.errors);
                    }
                    else {
                        updateErrors(["Unknown error"]);
                    }
                }
            }
            else {
                updateValue(data);
            }
        });
    }, []);
    return {
        value: value,
        errors: errors,
        refresh: () => updateReqCounter(counter => { return counter += 1; }),
        _reqCounter: reqCounter,
    };
}
export function useIPCRequest(endpointName, payload) {
    return ipcEndpointRequestLock.acquire(endpointName, async function () {
        const rawData = await ipcRenderer.invoke(endpointName, JSON.stringify(payload));
        return new Promise((resolve, reject) => {
            const data = JSON.parse(rawData, reviveJsonValue);
            if (data.errors !== undefined) {
                // Means main is using listen(), new API
                const resp = data;
                if (resp.result === undefined) {
                    if (resp.errors.length > 0) {
                        reject(new IPCFailure(resp.errors));
                    }
                    else {
                        reject(new IPCFailure(["Unknown error"]));
                    }
                }
                resolve(data.result);
            }
            else {
                // Means main is using makeEndpoint(), legacy API
                const result = data;
                resolve(result);
            }
        });
    });
}
export async function useIPCWindowEventRelayer(payload) {
    return await useIPCRequest('relay-event-to-all-windows', payload);
}
const ipcEndpointRequestLock = new AsyncLock();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaXBjL3JlbmRlcmVyLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFFN0QsT0FBTyxTQUFTLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFFNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQVMxQyxNQUFNLFVBQVcsU0FBUSxLQUFLO0lBQzVCLFlBQW1CLGdCQUEwQjtRQUMzQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFEbEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFVO1FBRTNDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGO0FBR0QsTUFBTSxVQUFVLFdBQVcsQ0FDMUIsWUFBb0IsRUFBRSxZQUFlLEVBQUUsT0FBVztJQUNqRCxNQUFNLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNwRCxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxFQUFjLENBQUMsQ0FBQztJQUN4RCxNQUFNLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRW5ELFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixzQkFBc0IsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEtBQUs7WUFDaEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ25GLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBRS9DLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLE1BQU0sSUFBSSxHQUFHLElBQXNCLENBQUM7Z0JBQ3BDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Z0JBRXpCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7b0JBQzdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUMxQixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUMzQjt5QkFBTTt3QkFDTCxZQUFZLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO3FCQUNqQztpQkFDRjthQUNGO2lCQUFNO2dCQUNMLFdBQVcsQ0FBQyxJQUFTLENBQUMsQ0FBQzthQUN4QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRVAsT0FBTztRQUNMLEtBQUssRUFBRSxLQUFLO1FBQ1osTUFBTSxFQUFFLE1BQU07UUFDZCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxPQUFPLE9BQU8sSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUM7UUFDbkUsV0FBVyxFQUFFLFVBQVU7S0FDeEIsQ0FBQztBQUNKLENBQUM7QUFHRCxNQUFNLFVBQVUsYUFBYSxDQUM1QixZQUFvQixFQUFFLE9BQVc7SUFDaEMsT0FBTyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEtBQUs7UUFDdkQsTUFBTSxPQUFPLEdBQUcsTUFBTSxXQUFXLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDaEYsT0FBTyxJQUFJLE9BQU8sQ0FBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztZQUNsRCxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUM3Qix3Q0FBd0M7Z0JBQ3hDLE1BQU0sSUFBSSxHQUFtQixJQUFJLENBQUM7Z0JBRWxDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxTQUFTLEVBQUU7b0JBQzdCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUMxQixNQUFNLENBQUMsSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7cUJBQ3JDO3lCQUFNO3dCQUNMLE1BQU0sQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDM0M7aUJBQ0Y7Z0JBQ0QsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN0QjtpQkFBTTtnQkFDTCxpREFBaUQ7Z0JBQ2pELE1BQU0sTUFBTSxHQUFNLElBQUksQ0FBQztnQkFDdkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ2pCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFHRCxNQUFNLENBQUMsS0FBSyxVQUFVLHdCQUF3QixDQUs3QyxPQUFVO0lBQ1QsT0FBTyxNQUFNLGFBQWEsQ0FBTyw0QkFBNEIsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBV0QsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLFNBQVMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogV3JhcHMgSVBDIGNvbW11bmljYXRpb24gaW4gUmVhY3QgaG9va3MgJiBsb2NraW5nIHF1ZXVlLiAqL1xuXG5pbXBvcnQgQXN5bmNMb2NrIGZyb20gJ2FzeW5jLWxvY2snO1xuaW1wb3J0IHsgaXBjUmVuZGVyZXIgfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyByZXZpdmVKc29uVmFsdWUgfSBmcm9tICcuL3V0aWxzJztcblxuXG50eXBlIElQQ1Jlc3BvbnNlPE8+ID0ge1xuICBlcnJvcnM6IHN0cmluZ1tdXG4gIHJlc3VsdDogTyB8IHVuZGVmaW5lZFxufTtcblxuXG5jbGFzcyBJUENGYWlsdXJlIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZXJyb3JNZXNzYWdlTGlzdDogc3RyaW5nW10pIHtcbiAgICBzdXBlcihlcnJvck1lc3NhZ2VMaXN0LmpvaW4oJzsgJykpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBuZXcudGFyZ2V0LnByb3RvdHlwZSk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gdXNlSVBDVmFsdWU8SSBleHRlbmRzIG9iamVjdCwgTz5cbihlbmRwb2ludE5hbWU6IHN0cmluZywgaW5pdGlhbFZhbHVlOiBPLCBwYXlsb2FkPzogSSk6IElQQ0hvb2s8Tz4ge1xuICBjb25zdCBbdmFsdWUsIHVwZGF0ZVZhbHVlXSA9IHVzZVN0YXRlKGluaXRpYWxWYWx1ZSk7XG4gIGNvbnN0IFtlcnJvcnMsIHVwZGF0ZUVycm9yc10gPSB1c2VTdGF0ZShbXSBhcyBzdHJpbmdbXSk7XG4gIGNvbnN0IFtyZXFDb3VudGVyLCB1cGRhdGVSZXFDb3VudGVyXSA9IHVzZVN0YXRlKDApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXBjRW5kcG9pbnRSZXF1ZXN0TG9jay5hY3F1aXJlKGVuZHBvaW50TmFtZSwgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IGlwY1JlbmRlcmVyLmludm9rZShlbmRwb2ludE5hbWUsIEpTT04uc3RyaW5naWZ5KHBheWxvYWQgfHwge30pKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKHJlc3AsIHJldml2ZUpzb25WYWx1ZSk7XG5cbiAgICAgIGlmIChkYXRhLmVycm9ycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHJlc3AgPSBkYXRhIGFzIElQQ1Jlc3BvbnNlPE8+O1xuICAgICAgICB1cGRhdGVWYWx1ZShkYXRhLnJlc3VsdCk7XG5cbiAgICAgICAgaWYgKHJlc3AucmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzcC5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdXBkYXRlRXJyb3JzKHJlc3AuZXJyb3JzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXBkYXRlRXJyb3JzKFtcIlVua25vd24gZXJyb3JcIl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlVmFsdWUoZGF0YSBhcyBPKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGVycm9yczogZXJyb3JzLFxuICAgIHJlZnJlc2g6ICgpID0+IHVwZGF0ZVJlcUNvdW50ZXIoY291bnRlciA9PiB7IHJldHVybiBjb3VudGVyICs9IDEgfSksXG4gICAgX3JlcUNvdW50ZXI6IHJlcUNvdW50ZXIsXG4gIH07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUlQQ1JlcXVlc3Q8SSBleHRlbmRzIG9iamVjdCwgTz5cbihlbmRwb2ludE5hbWU6IHN0cmluZywgcGF5bG9hZD86IEkpOiBQcm9taXNlPE8+IHtcbiAgcmV0dXJuIGlwY0VuZHBvaW50UmVxdWVzdExvY2suYWNxdWlyZShlbmRwb2ludE5hbWUsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCByYXdEYXRhID0gYXdhaXQgaXBjUmVuZGVyZXIuaW52b2tlKGVuZHBvaW50TmFtZSwgSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxPPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShyYXdEYXRhLCByZXZpdmVKc29uVmFsdWUpO1xuICAgICAgaWYgKGRhdGEuZXJyb3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTWVhbnMgbWFpbiBpcyB1c2luZyBsaXN0ZW4oKSwgbmV3IEFQSVxuICAgICAgICBjb25zdCByZXNwOiBJUENSZXNwb25zZTxPPiA9IGRhdGE7XG5cbiAgICAgICAgaWYgKHJlc3AucmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAocmVzcC5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBJUENGYWlsdXJlKHJlc3AuZXJyb3JzKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgSVBDRmFpbHVyZShbXCJVbmtub3duIGVycm9yXCJdKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlc29sdmUoZGF0YS5yZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWVhbnMgbWFpbiBpcyB1c2luZyBtYWtlRW5kcG9pbnQoKSwgbGVnYWN5IEFQSVxuICAgICAgICBjb25zdCByZXN1bHQ6IE8gPSBkYXRhO1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1c2VJUENXaW5kb3dFdmVudFJlbGF5ZXJcbjxcbiAgSSBleHRlbmRzIG9iamVjdCA9IHsgZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50UGF5bG9hZD86IGFueSB9LFxuICBPID0geyBzdWNjZXNzOiB0cnVlIH0sXG4+XG4ocGF5bG9hZDogSSk6IFByb21pc2U8Tz4ge1xuICByZXR1cm4gYXdhaXQgdXNlSVBDUmVxdWVzdDxJLCBPPigncmVsYXktZXZlbnQtdG8tYWxsLXdpbmRvd3MnLCBwYXlsb2FkKTtcbn1cblxuXG5pbnRlcmZhY2UgSVBDSG9vazxUPiB7XG4gIHZhbHVlOiBULFxuICBlcnJvcnM6IHN0cmluZ1tdLFxuICByZWZyZXNoOiAoKSA9PiB2b2lkLFxuICBfcmVxQ291bnRlcjogbnVtYmVyLFxufVxuXG5cbmNvbnN0IGlwY0VuZHBvaW50UmVxdWVzdExvY2sgPSBuZXcgQXN5bmNMb2NrKCk7Il19