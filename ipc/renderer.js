/* Wraps IPC communication in React hooks & locking queue. */
import { debounce } from 'throttle-debounce';
import AsyncLock from 'async-lock';
import * as log from 'electron-log';
import { ipcRenderer } from 'electron';
import { useEffect, useState } from 'react';
import { reviveJsonValue } from './utils';
var cache = {};
class IPCFailure extends Error {
    constructor(errorMessageList) {
        super(errorMessageList.join('; '));
        this.errorMessageList = errorMessageList;
        Object.setPrototypeOf(this, new.target.prototype);
    }
}
export function useIPCEvent(endpointName, handler) {
    /* Sets up main -> renderer event listener & cleanup on component destruction. */
    useEffect(() => {
        function handleEvent(evt, payload) {
            log.debug("Handling IPC event", endpointName);
            handler(payload);
        }
        ipcRenderer.on(endpointName, handleEvent);
        return function cleanup() {
            ipcRenderer.removeListener(endpointName, handleEvent);
        };
    }, []);
}
export function useIPCValue(endpointName, initialValue, payload) {
    /* Invokes an endpoint and provides result state in the form of a hook.
       State can be updated by calling `refresh()`. */
    const [value, updateValue] = useState(initialValue);
    const [errors, updateErrors] = useState([]);
    const [isUpdating, setUpdating] = useState(false);
    const [reqCounter, updateReqCounter] = useState(0);
    const payloadSnapshot = JSON.stringify(payload || {});
    useEffect(() => {
        setUpdating(false);
    }, [value]);
    useEffect(() => {
        setUpdating(true);
        const cacheKey = `${endpointName}${reqCounter}${payloadSnapshot}`;
        const doQuery = debounce(400, async () => {
            let resp;
            const cachedResp = cache[cacheKey];
            if (cachedResp !== undefined) {
                resp = cachedResp;
            }
            else {
                //(async () => {
                //updateValue(initialValue);
                resp = await ipcEndpointRequestLock.acquire(endpointName, async function () {
                    const payloadToSend = JSON.stringify(payload || {});
                    return await ipcRenderer.invoke(endpointName, payloadToSend);
                });
                cache[cacheKey] = resp;
                //})();
            }
            const data = JSON.parse(resp, reviveJsonValue);
            if (data.errors !== undefined) {
                const resp = data;
                if (resp.result === undefined) {
                    if (resp.errors.length > 0) {
                        updateErrors(resp.errors);
                    }
                    else {
                        updateErrors(["Unknown error"]);
                    }
                    updateValue(initialValue);
                }
                else {
                    updateValue(data.result);
                }
            }
            else {
                updateValue(data);
            }
        });
        doQuery();
    }, [reqCounter, payloadSnapshot]);
    return {
        value: value,
        errors: errors,
        isUpdating: isUpdating,
        refresh: () => updateReqCounter(counter => { return counter += 1; }),
        _reqCounter: reqCounter,
    };
}
export async function callIPC(endpointName, payload) {
    return ipcEndpointRequestLock.acquire(endpointName, async function () {
        const rawData = await ipcRenderer.invoke(endpointName, JSON.stringify(payload));
        return new Promise((resolve, reject) => {
            const data = JSON.parse(rawData, reviveJsonValue);
            if (data.errors !== undefined) {
                // Means main is using listen(), new API
                const resp = data;
                if (resp.result === undefined) {
                    if (resp.errors.length > 0) {
                        reject(new IPCFailure(resp.errors));
                    }
                    else {
                        reject(new IPCFailure(["Unknown error"]));
                    }
                }
                resolve(data.result);
            }
            else {
                // Means main is using makeEndpoint(), legacy API
                const result = data;
                resolve(result);
            }
        });
    });
}
export async function relayIPCEvent(payload) {
    return await callIPC('relay-event-to-all-windows', payload);
}
const ipcEndpointRequestLock = new AsyncLock({ maxPending: 100000 });
//# sourceMappingURL=data:application/json;base64,