{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../src/ipc/renderer.tsx"],"names":[],"mappings":"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","sourcesContent":["/* Wraps IPC communication in React hooks & locking queue. */\n\nimport AsyncLock from 'async-lock';\nimport * as log from 'electron-log';\nimport { ipcRenderer } from 'electron';\nimport { useEffect, useState } from 'react';\n\nimport { reviveJsonValue } from './utils';\n\n\nipcRenderer.setMaxListeners(50);\n\n\ninterface IPCHook<T> {\n  value: T\n  errors: string[]\n  isUpdating: boolean\n  refresh: () => void\n  _reqCounter: number\n}\n\ninterface IPCResponse<O> {\n  errors: string[]\n  result: O | undefined\n};\n\nclass IPCFailure extends Error {\n  constructor(public errorMessageList: string[]) {\n    super(errorMessageList.join('; '));\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\n\nconst ipcEndpointRequestLock = new AsyncLock({ maxPending: 1000 });\n\n\nexport function useIPCEvent<P extends object>\n(endpointName: string, handler: (payload: P) => void, memoizeArguments: any[] = []) {\n  /* Sets up main -> renderer event listener & cleanup on component destruction. */\n\n  function handleEvent(evt: Electron.Event, payload: P) {\n    log.silly(\"C/ipc/useIPCEvent: Handling IPC event\", endpointName, payload);\n    handler(payload);\n  }\n\n  useEffect(() => {\n    ipcRenderer.on(endpointName, handleEvent);\n    return function cleanup() {\n      ipcRenderer.removeListener(endpointName, handleEvent);\n    }\n  }, memoizeArguments);\n}\n\n\nexport function useIPCValue<I extends object, O>\n(endpointName: string, initialValue: O, payload?: I): IPCHook<O> {\n  /* Invokes an endpoint and provides result state in the form of a hook.\n     State can be updated by calling `refresh()`. */\n\n  const [value, updateValue] = useState(initialValue);\n  const [errors, updateErrors] = useState([] as string[]);\n  const [isUpdating, setUpdating] = useState(true);\n\n  const [reqCounter, updateReqCounter] = useState(0);\n  const payloadSnapshot = JSON.stringify(payload || {});\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function doQuery() {\n      setUpdating(true);\n\n      const resp = await ipcRenderer.invoke(endpointName, payloadSnapshot);\n      const data = JSON.parse(resp, reviveJsonValue);\n\n      if (cancelled) { return; }\n\n      if (data.errors !== undefined) {\n        const resp = data as IPCResponse<O>;\n\n        if (resp.result === undefined) {\n          if (resp.errors.length > 0) {\n            updateErrors(resp.errors);\n          } else {\n            updateErrors([\"Unknown error\"]);\n          }\n          updateValue(initialValue);\n        } else {\n          updateErrors([]);\n          updateValue(data.result);\n        }\n      } else {\n        updateValue(data as O);\n      }\n\n      setUpdating(false);\n    };\n\n    doQuery();\n\n    return () => {\n      cancelled = true;\n    }\n\n  }, [endpointName, reqCounter, payloadSnapshot]);\n\n  return {\n    value: value,\n    errors: errors,\n    isUpdating: isUpdating,\n    refresh: () => updateReqCounter(counter => { return counter += 1 }),\n    _reqCounter: reqCounter,\n  };\n}\n\n\nexport async function callIPC<I extends object, O>\n(endpointName: string, payload?: I): Promise<O> {\n  return ipcEndpointRequestLock.acquire(endpointName, async function () {\n    const rawData = await ipcRenderer.invoke(endpointName, JSON.stringify(payload));\n    return new Promise<O>((resolve, reject) => {\n      const data = JSON.parse(rawData, reviveJsonValue);\n      if (data.errors !== undefined) {\n        // Means main is using listen(), new API\n        const resp: IPCResponse<O> = data;\n\n        if (resp.result === undefined) {\n          if (resp.errors.length > 0) {\n            reject(new IPCFailure(resp.errors));\n          } else {\n            reject(new IPCFailure([\"Unknown error\"]));\n          }\n        }\n        resolve(data.result);\n      } else {\n        // Means main is using makeEndpoint(), legacy API\n        const result: O = data;\n        resolve(result);\n      }\n    });\n  });\n}\n\n\nexport async function relayIPCEvent\n<\n  I extends object = { eventName: string, eventPayload?: any },\n  O = { success: true },\n>\n(payload: I): Promise<O> {\n  return await callIPC<I, O>('relay-event-to-all-windows', payload);\n}\n"]}