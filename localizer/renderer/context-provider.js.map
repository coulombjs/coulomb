{"version":3,"file":"context-provider.js","sourceRoot":"","sources":["../../../src/localizer/renderer/context-provider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAGxC,OAAO,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAc9C,MAAM,wBAAwB,GAAkC,UAAU,KAAK;IAC7E,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAC;QAC3C,SAAS,EAAE,KAAK,CAAC,SAAS;QAC1B,OAAO,EAAE,KAAK,CAAC,OAAiB;QAChC,QAAQ,EAAE,KAAK,CAAC,QAAkB;QAClC,MAAM,EAAE,CAAC,MAAoC,EAAE,EAAE;YAC/C,aAAa,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;QACnF,CAAC;KACF,CAAC,CAAC;IAEH,OAAO,CACL,oBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,UAAU,IAC1C,KAAK,CAAC,QAAQ,CACY,CAC9B,CAAC;AACJ,CAAC,CAAC;AAGF,eAAe,wBAAwB,CAAC","sourcesContent":["import React, { useState } from 'react';\n\nimport { SupportedLanguages } from '../types';\nimport { LangConfigContext } from './context';\nimport { ContextProviderConfig } from '../../config/renderer';\n\n\nexport type LocalizerProps<Languages extends SupportedLanguages> = {\n  available: Languages\n  default: keyof Languages\n  selected: keyof Languages\n};\n\n\nexport type LocalizerContextProviderConfig = ContextProviderConfig<LocalizerProps<any>>;\n\n\nconst LocalizerContextProvider: React.FC<LocalizerProps<any>> = function (props) {\n  const [langConfig, setLangConfig] = useState({\n    available: props.available,\n    default: props.default as string,\n    selected: props.selected as string,\n    select: (langId: keyof typeof props.available) => {\n      setLangConfig(langConfig => Object.assign({}, langConfig, { selected: langId }));\n    },\n  });\n\n  return (\n    <LangConfigContext.Provider value={langConfig}>\n      {props.children}\n    </LangConfigContext.Provider>\n  );\n};\n\n\nexport default LocalizerContextProvider;\n"]}