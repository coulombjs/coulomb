import React, { useContext } from 'react';
import { Button, ButtonGroup } from '@blueprintjs/core';
import { LangConfigContext } from './context';
export const Trans = function ({ what }) {
    const lang = useContext(LangConfigContext);
    const translated = what[lang.selected];
    const untranslated = what[lang.default];
    // const translated = translatable[lang.selected.id];
    // if (!translated) {
    //   // Register missing translation
    // }
    return React.createElement("span", null, translated || untranslated || '(malformed translatable string)');
};
export const LangSelector = function ({ exclude, value, untranslatedProps, translatedProps, groupProps }) {
    const cfg = useContext(LangConfigContext);
    return (React.createElement(ButtonGroup, Object.assign({}, groupProps), Object.keys(cfg.available).
        filter(langID => (exclude || []).indexOf(langID) < 0).
        map(langId => React.createElement(LangSelectorButton, { key: langId, id: langId, title: cfg.available[langId], isSelected: langId === cfg.selected, onSelect: () => cfg.select(langId), untranslatedProps: untranslatedProps, translatedProps: translatedProps, hasTranslation: (value !== undefined) ? (value[langId] !== undefined) : undefined }))));
};
const LangSelectorButton = function (props) {
    return (React.createElement(Button, Object.assign({ active: props.isSelected, onClick: props.onSelect }, (!props.hasTranslation ? props.untranslatedProps : {}), (props.hasTranslation ? props.translatedProps : {})), props.id));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2NhbGl6ZXIvcmVuZGVyZXIvd2lkZ2V0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQW1DLE1BQU0sbUJBQW1CLENBQUM7QUFJekYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBTTlDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBeUMsVUFBVSxFQUFFLElBQUksRUFBRTtJQUMzRSxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEMscURBQXFEO0lBQ3JELHFCQUFxQjtJQUNyQixvQ0FBb0M7SUFDcEMsSUFBSTtJQUVKLE9BQU8sa0NBQU8sVUFBVSxJQUFJLFlBQVksSUFBSSxpQ0FBaUMsQ0FBUSxDQUFDO0FBQ3hGLENBQUMsQ0FBQztBQVVGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FDekIsVUFBVSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRTtJQUMxRSxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUUxQyxPQUFPLENBQ0wsb0JBQUMsV0FBVyxvQkFBSyxVQUFVLEdBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQztRQUN2QixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3JELEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUNmLG9CQUFDLGtCQUFrQixJQUNqQixHQUFHLEVBQUUsTUFBTSxFQUNYLEVBQUUsRUFBRSxNQUFNLEVBQ1YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQzVCLFVBQVUsRUFBRSxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsRUFDbkMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ2xDLGlCQUFpQixFQUFFLGlCQUFpQixFQUNwQyxlQUFlLEVBQUUsZUFBZSxFQUNoQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQ2pGLENBQ0gsQ0FDVyxDQUNmLENBQUM7QUFDSixDQUFDLENBQUM7QUFZRixNQUFNLGtCQUFrQixHQUFzQyxVQUFVLEtBQUs7SUFDM0UsT0FBTyxDQUNMLG9CQUFDLE1BQU0sa0JBQ0gsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQ3hCLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxJQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDdEQsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FDeEQsS0FBSyxDQUFDLEVBQUUsQ0FDRixDQUNWLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJ1dHRvbiwgQnV0dG9uR3JvdXAsIElCdXR0b25Hcm91cFByb3BzLCBJQnV0dG9uUHJvcHMgfSBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5cbmltcG9ydCB7IFRyYW5zbGF0YWJsZSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHsgTGFuZ0NvbmZpZ0NvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnO1xuXG5cbmludGVyZmFjZSBUcmFuc2xhdGFibGVDb21wb25lbnRQcm9wcyB7XG4gIHdoYXQ6IFRyYW5zbGF0YWJsZTxzdHJpbmc+XG59XG5leHBvcnQgY29uc3QgVHJhbnM6IFJlYWN0LkZDPFRyYW5zbGF0YWJsZUNvbXBvbmVudFByb3BzPiA9IGZ1bmN0aW9uICh7IHdoYXQgfSkge1xuICBjb25zdCBsYW5nID0gdXNlQ29udGV4dChMYW5nQ29uZmlnQ29udGV4dCk7XG4gIGNvbnN0IHRyYW5zbGF0ZWQgPSB3aGF0W2xhbmcuc2VsZWN0ZWRdO1xuICBjb25zdCB1bnRyYW5zbGF0ZWQgPSB3aGF0W2xhbmcuZGVmYXVsdF07XG5cbiAgLy8gY29uc3QgdHJhbnNsYXRlZCA9IHRyYW5zbGF0YWJsZVtsYW5nLnNlbGVjdGVkLmlkXTtcbiAgLy8gaWYgKCF0cmFuc2xhdGVkKSB7XG4gIC8vICAgLy8gUmVnaXN0ZXIgbWlzc2luZyB0cmFuc2xhdGlvblxuICAvLyB9XG5cbiAgcmV0dXJuIDxzcGFuPnt0cmFuc2xhdGVkIHx8IHVudHJhbnNsYXRlZCB8fCAnKG1hbGZvcm1lZCB0cmFuc2xhdGFibGUgc3RyaW5nKSd9PC9zcGFuPjtcbn07XG5cblxuaW50ZXJmYWNlIExhbmdTZWxlY3RvclByb3BzIHtcbiAgdmFsdWU/OiBUcmFuc2xhdGFibGU8YW55PlxuICBncm91cFByb3BzPzogSUJ1dHRvbkdyb3VwUHJvcHNcbiAgZXhjbHVkZT86IHN0cmluZ1tdXG4gIHVudHJhbnNsYXRlZFByb3BzPzogSUJ1dHRvblByb3BzXG4gIHRyYW5zbGF0ZWRQcm9wcz86IElCdXR0b25Qcm9wc1xufVxuZXhwb3J0IGNvbnN0IExhbmdTZWxlY3RvcjogUmVhY3QuRkM8TGFuZ1NlbGVjdG9yUHJvcHM+ID1cbmZ1bmN0aW9uICh7IGV4Y2x1ZGUsIHZhbHVlLCB1bnRyYW5zbGF0ZWRQcm9wcywgdHJhbnNsYXRlZFByb3BzLCBncm91cFByb3BzIH0pIHtcbiAgY29uc3QgY2ZnID0gdXNlQ29udGV4dChMYW5nQ29uZmlnQ29udGV4dCk7XG5cbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uR3JvdXAgey4uLmdyb3VwUHJvcHN9PlxuICAgICAge09iamVjdC5rZXlzKGNmZy5hdmFpbGFibGUpLlxuICAgICAgICAgIGZpbHRlcihsYW5nSUQgPT4gKGV4Y2x1ZGUgfHwgW10pLmluZGV4T2YobGFuZ0lEKSA8IDApLlxuICAgICAgICAgIG1hcChsYW5nSWQgPT5cbiAgICAgICAgPExhbmdTZWxlY3RvckJ1dHRvblxuICAgICAgICAgIGtleT17bGFuZ0lkfVxuICAgICAgICAgIGlkPXtsYW5nSWR9XG4gICAgICAgICAgdGl0bGU9e2NmZy5hdmFpbGFibGVbbGFuZ0lkXX1cbiAgICAgICAgICBpc1NlbGVjdGVkPXtsYW5nSWQgPT09IGNmZy5zZWxlY3RlZH1cbiAgICAgICAgICBvblNlbGVjdD17KCkgPT4gY2ZnLnNlbGVjdChsYW5nSWQpfVxuICAgICAgICAgIHVudHJhbnNsYXRlZFByb3BzPXt1bnRyYW5zbGF0ZWRQcm9wc31cbiAgICAgICAgICB0cmFuc2xhdGVkUHJvcHM9e3RyYW5zbGF0ZWRQcm9wc31cbiAgICAgICAgICBoYXNUcmFuc2xhdGlvbj17KHZhbHVlICE9PSB1bmRlZmluZWQpID8gKHZhbHVlW2xhbmdJZF0gIT09IHVuZGVmaW5lZCkgOiB1bmRlZmluZWR9XG4gICAgICAgIC8+XG4gICAgICApfVxuICAgIDwvQnV0dG9uR3JvdXA+XG4gICk7XG59O1xuXG5cbmludGVyZmFjZSBMYW5nU2VsZWN0b3JCdXR0b25Qcm9wcyB7XG4gIGlkOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBpc1NlbGVjdGVkOiBib29sZWFuXG4gIG9uU2VsZWN0OiAoKSA9PiB2b2lkXG4gIGhhc1RyYW5zbGF0aW9uPzogYm9vbGVhblxuICB1bnRyYW5zbGF0ZWRQcm9wcz86IElCdXR0b25Qcm9wc1xuICB0cmFuc2xhdGVkUHJvcHM/OiBJQnV0dG9uUHJvcHNcbn1cbmNvbnN0IExhbmdTZWxlY3RvckJ1dHRvbjogUmVhY3QuRkM8TGFuZ1NlbGVjdG9yQnV0dG9uUHJvcHM+ID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPEJ1dHRvblxuICAgICAgICBhY3RpdmU9e3Byb3BzLmlzU2VsZWN0ZWR9XG4gICAgICAgIG9uQ2xpY2s9e3Byb3BzLm9uU2VsZWN0fVxuICAgICAgICB7Li4uKCFwcm9wcy5oYXNUcmFuc2xhdGlvbiA/IHByb3BzLnVudHJhbnNsYXRlZFByb3BzIDoge30pfVxuICAgICAgICB7Li4uKHByb3BzLmhhc1RyYW5zbGF0aW9uID8gcHJvcHMudHJhbnNsYXRlZFByb3BzIDoge30pfT5cbiAgICAgIHtwcm9wcy5pZH1cbiAgICA8L0J1dHRvbj5cbiAgKTtcbn07XG4iXX0=