import React, { useContext } from 'react';
import { Button, ButtonGroup } from '@blueprintjs/core';
import { LangConfigContext } from './context';
export const Trans = function ({ what }) {
    const lang = useContext(LangConfigContext);
    const translated = what[lang.selected];
    const untranslated = what[lang.default];
    // const translated = translatable[lang.selected.id];
    // if (!translated) {
    //   // Register missing translation
    // }
    return React.createElement("span", null, translated || untranslated || '(malformed translatable string)');
};
export const LangSelector = function ({ value, disableUnlessTranslated, groupProps }) {
    const cfg = useContext(LangConfigContext);
    return (React.createElement(ButtonGroup, Object.assign({}, groupProps), Object.keys(cfg.available).map((langId) => React.createElement(LangSelectorButton, { id: langId, title: cfg.available[langId], isSelected: langId === cfg.selected, onSelect: () => cfg.select(langId), disableUnlessTranslated: disableUnlessTranslated, hasTranslation: (value !== undefined) ? (value[langId] !== undefined) : undefined }))));
};
const LangSelectorButton = function (props) {
    return (React.createElement(Button, { active: props.isSelected, disabled: props.hasTranslation === false && props.disableUnlessTranslated === true, onClick: props.onSelect }, props.id));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2NhbGl6ZXIvcmVuZGVyZXIvd2lkZ2V0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDMUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQXFCLE1BQU0sbUJBQW1CLENBQUM7QUFJM0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBTTlDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBeUMsVUFBVSxFQUFFLElBQUksRUFBRTtJQUMzRSxNQUFNLElBQUksR0FBRyxVQUFVLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFeEMscURBQXFEO0lBQ3JELHFCQUFxQjtJQUNyQixvQ0FBb0M7SUFDcEMsSUFBSTtJQUVKLE9BQU8sa0NBQU8sVUFBVSxJQUFJLFlBQVksSUFBSSxpQ0FBaUMsQ0FBUSxDQUFDO0FBQ3hGLENBQUMsQ0FBQztBQVFGLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBZ0MsVUFBVSxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRSxVQUFVLEVBQUU7SUFDL0csTUFBTSxHQUFHLEdBQUcsVUFBVSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFFMUMsT0FBTyxDQUNMLG9CQUFDLFdBQVcsb0JBQUssVUFBVSxHQUN4QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUNqRCxvQkFBQyxrQkFBa0IsSUFDakIsRUFBRSxFQUFFLE1BQU0sRUFDVixLQUFLLEVBQUUsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFDNUIsVUFBVSxFQUFFLE1BQU0sS0FBSyxHQUFHLENBQUMsUUFBUSxFQUNuQyxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFDbEMsdUJBQXVCLEVBQUUsdUJBQXVCLEVBQ2hELGNBQWMsRUFBRSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FDakYsQ0FDSCxDQUNXLENBQ2YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQVdGLE1BQU0sa0JBQWtCLEdBQXNDLFVBQVUsS0FBSztJQUMzRSxPQUFPLENBQ0wsb0JBQUMsTUFBTSxJQUNILE1BQU0sRUFBRSxLQUFLLENBQUMsVUFBVSxFQUN4QixRQUFRLEVBQUUsS0FBSyxDQUFDLGNBQWMsS0FBSyxLQUFLLElBQUksS0FBSyxDQUFDLHVCQUF1QixLQUFLLElBQUksRUFDbEYsT0FBTyxFQUFFLEtBQUssQ0FBQyxRQUFRLElBQ3hCLEtBQUssQ0FBQyxFQUFFLENBQ0YsQ0FDVixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCdXR0b24sIEJ1dHRvbkdyb3VwLCBJQnV0dG9uR3JvdXBQcm9wcyB9IGZyb20gJ0BibHVlcHJpbnRqcy9jb3JlJztcblxuaW1wb3J0IHsgVHJhbnNsYXRhYmxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQgeyBMYW5nQ29uZmlnQ29udGV4dCB9IGZyb20gJy4vY29udGV4dCc7XG5cblxuaW50ZXJmYWNlIFRyYW5zbGF0YWJsZUNvbXBvbmVudFByb3BzIHtcbiAgd2hhdDogVHJhbnNsYXRhYmxlPHN0cmluZz5cbn1cbmV4cG9ydCBjb25zdCBUcmFuczogUmVhY3QuRkM8VHJhbnNsYXRhYmxlQ29tcG9uZW50UHJvcHM+ID0gZnVuY3Rpb24gKHsgd2hhdCB9KSB7XG4gIGNvbnN0IGxhbmcgPSB1c2VDb250ZXh0KExhbmdDb25maWdDb250ZXh0KTtcbiAgY29uc3QgdHJhbnNsYXRlZCA9IHdoYXRbbGFuZy5zZWxlY3RlZF07XG4gIGNvbnN0IHVudHJhbnNsYXRlZCA9IHdoYXRbbGFuZy5kZWZhdWx0XTtcblxuICAvLyBjb25zdCB0cmFuc2xhdGVkID0gdHJhbnNsYXRhYmxlW2xhbmcuc2VsZWN0ZWQuaWRdO1xuICAvLyBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgLy8gICAvLyBSZWdpc3RlciBtaXNzaW5nIHRyYW5zbGF0aW9uXG4gIC8vIH1cblxuICByZXR1cm4gPHNwYW4+e3RyYW5zbGF0ZWQgfHwgdW50cmFuc2xhdGVkIHx8ICcobWFsZm9ybWVkIHRyYW5zbGF0YWJsZSBzdHJpbmcpJ308L3NwYW4+O1xufTtcblxuXG5pbnRlcmZhY2UgTGFuZ1NlbGVjdG9yUHJvcHMge1xuICB2YWx1ZT86IFRyYW5zbGF0YWJsZTxhbnk+XG4gIGRpc2FibGVVbmxlc3NUcmFuc2xhdGVkPzogYm9vbGVhblxuICBncm91cFByb3BzPzogSUJ1dHRvbkdyb3VwUHJvcHNcbn1cbmV4cG9ydCBjb25zdCBMYW5nU2VsZWN0b3I6IFJlYWN0LkZDPExhbmdTZWxlY3RvclByb3BzPiA9IGZ1bmN0aW9uICh7IHZhbHVlLCBkaXNhYmxlVW5sZXNzVHJhbnNsYXRlZCwgZ3JvdXBQcm9wcyB9KSB7XG4gIGNvbnN0IGNmZyA9IHVzZUNvbnRleHQoTGFuZ0NvbmZpZ0NvbnRleHQpO1xuXG4gIHJldHVybiAoXG4gICAgPEJ1dHRvbkdyb3VwIHsuLi5ncm91cFByb3BzfT5cbiAgICAgIHtPYmplY3Qua2V5cyhjZmcuYXZhaWxhYmxlKS5tYXAoKGxhbmdJZDogc3RyaW5nKSA9PlxuICAgICAgICA8TGFuZ1NlbGVjdG9yQnV0dG9uXG4gICAgICAgICAgaWQ9e2xhbmdJZH1cbiAgICAgICAgICB0aXRsZT17Y2ZnLmF2YWlsYWJsZVtsYW5nSWRdfVxuICAgICAgICAgIGlzU2VsZWN0ZWQ9e2xhbmdJZCA9PT0gY2ZnLnNlbGVjdGVkfVxuICAgICAgICAgIG9uU2VsZWN0PXsoKSA9PiBjZmcuc2VsZWN0KGxhbmdJZCl9XG4gICAgICAgICAgZGlzYWJsZVVubGVzc1RyYW5zbGF0ZWQ9e2Rpc2FibGVVbmxlc3NUcmFuc2xhdGVkfVxuICAgICAgICAgIGhhc1RyYW5zbGF0aW9uPXsodmFsdWUgIT09IHVuZGVmaW5lZCkgPyAodmFsdWVbbGFuZ0lkXSAhPT0gdW5kZWZpbmVkKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9CdXR0b25Hcm91cD5cbiAgKTtcbn07XG5cblxuaW50ZXJmYWNlIExhbmdTZWxlY3RvckJ1dHRvblByb3BzIHtcbiAgaWQ6IHN0cmluZ1xuICB0aXRsZTogc3RyaW5nXG4gIGlzU2VsZWN0ZWQ6IGJvb2xlYW5cbiAgb25TZWxlY3Q6ICgpID0+IHZvaWRcbiAgaGFzVHJhbnNsYXRpb24/OiBib29sZWFuXG4gIGRpc2FibGVVbmxlc3NUcmFuc2xhdGVkPzogYm9vbGVhblxufVxuY29uc3QgTGFuZ1NlbGVjdG9yQnV0dG9uOiBSZWFjdC5GQzxMYW5nU2VsZWN0b3JCdXR0b25Qcm9wcz4gPSBmdW5jdGlvbiAocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QnV0dG9uXG4gICAgICAgIGFjdGl2ZT17cHJvcHMuaXNTZWxlY3RlZH1cbiAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmhhc1RyYW5zbGF0aW9uID09PSBmYWxzZSAmJiBwcm9wcy5kaXNhYmxlVW5sZXNzVHJhbnNsYXRlZCA9PT0gdHJ1ZX1cbiAgICAgICAgb25DbGljaz17cHJvcHMub25TZWxlY3R9PlxuICAgICAge3Byb3BzLmlkfVxuICAgIDwvQnV0dG9uPlxuICApO1xufTtcbiJdfQ==