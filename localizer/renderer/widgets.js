import React, { useContext } from 'react';
import { Icon } from '@blueprintjs/core';
import { LangConfigContext } from './context';
import styles from './styles.scss';
export const Trans = function ({ what }) {
    const lang = useContext(LangConfigContext);
    const translated = what[lang.selected];
    const untranslated = what[lang.default];
    // const translated = translatable[lang.selected.id];
    // if (!translated) {
    //   // Register missing translation
    // }
    return React.createElement("span", null, translated || untranslated || '(malformed translatable string)');
};
export const LangSelector = function ({ value }) {
    const cfg = useContext(LangConfigContext);
    return (React.createElement("p", { className: styles.langSelector }, Object.keys(cfg.available).map((langId) => React.createElement(LangSelectorButton, { id: langId, title: cfg.available[langId], isSelected: langId === cfg.selected, onSelect: () => cfg.select(langId), hasTranslation: (value !== undefined) ? (value[langId] === undefined) : undefined }))));
};
const LangSelectorButton = function (props) {
    return (React.createElement(React.Fragment, null,
        props.isSelected
            ? React.createElement("strong", { className: styles.lang }, props.id)
            : React.createElement("a", { className: styles.lang, title: `Select ${props.title}`, href: "javascript: void 0;", onClick: props.onSelect },
                React.createElement("span", null, props.id)),
        props.hasTranslation === false
            ? React.createElement(Icon, { icon: "error", intent: "danger", title: `Missing translation for ${props.title}`, htmlTitle: `Missing translation for ${props.title}` })
            : ''));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sb2NhbGl6ZXIvcmVuZGVyZXIvd2lkZ2V0cy50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsRUFBRSxVQUFVLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDMUMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSXpDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU5QyxPQUFPLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFJbkMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUF5QyxVQUFVLEVBQUUsSUFBSSxFQUFFO0lBQzNFLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNDLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdkMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV4QyxxREFBcUQ7SUFDckQscUJBQXFCO0lBQ3JCLG9DQUFvQztJQUNwQyxJQUFJO0lBRUosT0FBTyxrQ0FBTyxVQUFVLElBQUksWUFBWSxJQUFJLGlDQUFpQyxDQUFRLENBQUM7QUFDeEYsQ0FBQyxDQUFDO0FBTUYsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFnQyxVQUFVLEVBQUUsS0FBSyxFQUFFO0lBQzFFLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRTFDLE9BQU8sQ0FDTCwyQkFBRyxTQUFTLEVBQUUsTUFBTSxDQUFDLFlBQVksSUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FDakQsb0JBQUMsa0JBQWtCLElBQ2pCLEVBQUUsRUFBRSxNQUFNLEVBQ1YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQzVCLFVBQVUsRUFBRSxNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsRUFDbkMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ2xDLGNBQWMsRUFBRSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FDakYsQ0FDSCxDQUNDLENBQ0wsQ0FBQztBQUNKLENBQUMsQ0FBQztBQVVGLE1BQU0sa0JBQWtCLEdBQXNDLFVBQVUsS0FBSztJQUMzRSxPQUFPLENBQ0w7UUFFRyxLQUFLLENBQUMsVUFBVTtZQUNmLENBQUMsQ0FBQyxnQ0FBUSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksSUFDM0IsS0FBSyxDQUFDLEVBQUUsQ0FDRjtZQUNYLENBQUMsQ0FBQywyQkFDSSxTQUFTLEVBQUUsTUFBTSxDQUFDLElBQUksRUFDdEIsS0FBSyxFQUFFLFVBQVUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUM5QixJQUFJLEVBQUMscUJBQXFCLEVBQzFCLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDekIsa0NBQU8sS0FBSyxDQUFDLEVBQUUsQ0FBUSxDQUNyQjtRQUVQLEtBQUssQ0FBQyxjQUFjLEtBQUssS0FBSztZQUM3QixDQUFDLENBQUMsb0JBQUMsSUFBSSxJQUNILElBQUksRUFBQyxPQUFPLEVBQ1osTUFBTSxFQUFDLFFBQVEsRUFDZixLQUFLLEVBQUUsMkJBQTJCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFDL0MsU0FBUyxFQUFFLDJCQUEyQixLQUFLLENBQUMsS0FBSyxFQUFFLEdBQ25EO1lBQ0osQ0FBQyxDQUFDLEVBQUUsQ0FFTCxDQUNKLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEljb24gfSBmcm9tICdAYmx1ZXByaW50anMvY29yZSc7XG5cbmltcG9ydCB7IFRyYW5zbGF0YWJsZSB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHsgTGFuZ0NvbmZpZ0NvbnRleHQgfSBmcm9tICcuL2NvbnRleHQnO1xuXG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vc3R5bGVzLnNjc3MnO1xuXG5cbmludGVyZmFjZSBUcmFuc2xhdGFibGVDb21wb25lbnRQcm9wcyB7IHdoYXQ6IFRyYW5zbGF0YWJsZTxzdHJpbmc+IH1cbmV4cG9ydCBjb25zdCBUcmFuczogUmVhY3QuRkM8VHJhbnNsYXRhYmxlQ29tcG9uZW50UHJvcHM+ID0gZnVuY3Rpb24gKHsgd2hhdCB9KSB7XG4gIGNvbnN0IGxhbmcgPSB1c2VDb250ZXh0KExhbmdDb25maWdDb250ZXh0KTtcbiAgY29uc3QgdHJhbnNsYXRlZCA9IHdoYXRbbGFuZy5zZWxlY3RlZF07XG4gIGNvbnN0IHVudHJhbnNsYXRlZCA9IHdoYXRbbGFuZy5kZWZhdWx0XTtcblxuICAvLyBjb25zdCB0cmFuc2xhdGVkID0gdHJhbnNsYXRhYmxlW2xhbmcuc2VsZWN0ZWQuaWRdO1xuICAvLyBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgLy8gICAvLyBSZWdpc3RlciBtaXNzaW5nIHRyYW5zbGF0aW9uXG4gIC8vIH1cblxuICByZXR1cm4gPHNwYW4+e3RyYW5zbGF0ZWQgfHwgdW50cmFuc2xhdGVkIHx8ICcobWFsZm9ybWVkIHRyYW5zbGF0YWJsZSBzdHJpbmcpJ308L3NwYW4+O1xufTtcblxuXG5pbnRlcmZhY2UgTGFuZ1NlbGVjdG9yUHJvcHMge1xuICB2YWx1ZT86IFRyYW5zbGF0YWJsZTxhbnk+LFxufVxuZXhwb3J0IGNvbnN0IExhbmdTZWxlY3RvcjogUmVhY3QuRkM8TGFuZ1NlbGVjdG9yUHJvcHM+ID0gZnVuY3Rpb24gKHsgdmFsdWUgfSkge1xuICBjb25zdCBjZmcgPSB1c2VDb250ZXh0KExhbmdDb25maWdDb250ZXh0KTtcblxuICByZXR1cm4gKFxuICAgIDxwIGNsYXNzTmFtZT17c3R5bGVzLmxhbmdTZWxlY3Rvcn0+XG4gICAgICB7T2JqZWN0LmtleXMoY2ZnLmF2YWlsYWJsZSkubWFwKChsYW5nSWQ6IHN0cmluZykgPT5cbiAgICAgICAgPExhbmdTZWxlY3RvckJ1dHRvblxuICAgICAgICAgIGlkPXtsYW5nSWR9XG4gICAgICAgICAgdGl0bGU9e2NmZy5hdmFpbGFibGVbbGFuZ0lkXX1cbiAgICAgICAgICBpc1NlbGVjdGVkPXtsYW5nSWQgPT09IGNmZy5zZWxlY3RlZH1cbiAgICAgICAgICBvblNlbGVjdD17KCkgPT4gY2ZnLnNlbGVjdChsYW5nSWQpfVxuICAgICAgICAgIGhhc1RyYW5zbGF0aW9uPXsodmFsdWUgIT09IHVuZGVmaW5lZCkgPyAodmFsdWVbbGFuZ0lkXSA9PT0gdW5kZWZpbmVkKSA6IHVuZGVmaW5lZH1cbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC9wPlxuICApO1xufTtcblxuXG5pbnRlcmZhY2UgTGFuZ1NlbGVjdG9yQnV0dG9uUHJvcHMge1xuICBpZDogc3RyaW5nLFxuICB0aXRsZTogc3RyaW5nLFxuICBpc1NlbGVjdGVkOiBib29sZWFuLFxuICBvblNlbGVjdDogKCkgPT4gdm9pZCxcbiAgaGFzVHJhbnNsYXRpb246IGJvb2xlYW4gfCB1bmRlZmluZWQsXG59XG5jb25zdCBMYW5nU2VsZWN0b3JCdXR0b246IFJlYWN0LkZDPExhbmdTZWxlY3RvckJ1dHRvblByb3BzPiA9IGZ1bmN0aW9uIChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDw+XG5cbiAgICAgIHtwcm9wcy5pc1NlbGVjdGVkXG4gICAgICAgID8gPHN0cm9uZyBjbGFzc05hbWU9e3N0eWxlcy5sYW5nfT5cbiAgICAgICAgICAgIHtwcm9wcy5pZH1cbiAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgOiA8YVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e3N0eWxlcy5sYW5nfVxuICAgICAgICAgICAgICB0aXRsZT17YFNlbGVjdCAke3Byb3BzLnRpdGxlfWB9XG4gICAgICAgICAgICAgIGhyZWY9XCJqYXZhc2NyaXB0OiB2b2lkIDA7XCJcbiAgICAgICAgICAgICAgb25DbGljaz17cHJvcHMub25TZWxlY3R9PlxuICAgICAgICAgICAgPHNwYW4+e3Byb3BzLmlkfTwvc3Bhbj5cbiAgICAgICAgICA8L2E+fVxuXG4gICAgICB7cHJvcHMuaGFzVHJhbnNsYXRpb24gPT09IGZhbHNlXG4gICAgICAgID8gPEljb25cbiAgICAgICAgICAgIGljb249XCJlcnJvclwiXG4gICAgICAgICAgICBpbnRlbnQ9XCJkYW5nZXJcIlxuICAgICAgICAgICAgdGl0bGU9e2BNaXNzaW5nIHRyYW5zbGF0aW9uIGZvciAke3Byb3BzLnRpdGxlfWB9XG4gICAgICAgICAgICBodG1sVGl0bGU9e2BNaXNzaW5nIHRyYW5zbGF0aW9uIGZvciAke3Byb3BzLnRpdGxlfWB9XG4gICAgICAgICAgLz5cbiAgICAgICAgOiAnJ31cblxuICAgIDwvPlxuICApO1xufTtcbiJdfQ==