{"version":3,"file":"widgets.js","sourceRoot":"","sources":["../../../src/localizer/renderer/widgets.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,MAAM,EAAE,WAAW,EAAmC,MAAM,mBAAmB,CAAC;AAIzF,OAAO,EAAE,iBAAiB,EAAE,MAAM,WAAW,CAAC;AAM9C,MAAM,CAAC,MAAM,KAAK,GAAyC,UAAU,EAAE,IAAI,EAAE;IAC3E,MAAM,IAAI,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAC3C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACvC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAExC,qDAAqD;IACrD,qBAAqB;IACrB,oCAAoC;IACpC,IAAI;IAEJ,OAAO,kCAAO,UAAU,IAAI,YAAY,IAAI,iCAAiC,CAAQ,CAAC;AACxF,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,YAAY,GACzB,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE,eAAe,EAAE,UAAU,EAAE;IAC1E,MAAM,GAAG,GAAG,UAAU,CAAC,iBAAiB,CAAC,CAAC;IAE1C,OAAO,CACL,oBAAC,WAAW,oBAAK,UAAU,GACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;QACvB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QACrD,GAAG,CAAC,MAAM,CAAC,EAAE,CACf,oBAAC,kBAAkB,IACjB,GAAG,EAAE,MAAM,EACX,EAAE,EAAE,MAAM,EACV,KAAK,EAAE,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,EAC5B,UAAU,EAAE,MAAM,KAAK,GAAG,CAAC,QAAQ,EACnC,QAAQ,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAClC,iBAAiB,EAAE,iBAAiB,EACpC,eAAe,EAAE,eAAe,EAChC,cAAc,EAAE,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,GACjF,CACH,CACW,CACf,CAAC;AACJ,CAAC,CAAC;AAYF,MAAM,kBAAkB,GAAsC,UAAU,KAAK;IAC3E,OAAO,CACL,oBAAC,MAAM,kBACH,MAAM,EAAE,KAAK,CAAC,UAAU,EACxB,OAAO,EAAE,KAAK,CAAC,QAAQ,IACnB,CAAC,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,EACtD,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,GACxD,KAAK,CAAC,EAAE,CACF,CACV,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import React, { useContext } from 'react';\nimport { Button, ButtonGroup, IButtonGroupProps, IButtonProps } from '@blueprintjs/core';\n\nimport { Translatable } from '../types';\n\nimport { LangConfigContext } from './context';\n\n\ninterface TranslatableComponentProps {\n  what: Translatable<string>\n}\nexport const Trans: React.FC<TranslatableComponentProps> = function ({ what }) {\n  const lang = useContext(LangConfigContext);\n  const translated = what[lang.selected];\n  const untranslated = what[lang.default];\n\n  // const translated = translatable[lang.selected.id];\n  // if (!translated) {\n  //   // Register missing translation\n  // }\n\n  return <span>{translated || untranslated || '(malformed translatable string)'}</span>;\n};\n\n\ninterface LangSelectorProps {\n  value?: Translatable<any>\n  groupProps?: IButtonGroupProps\n  exclude?: string[]\n  untranslatedProps?: IButtonProps\n  translatedProps?: IButtonProps\n}\nexport const LangSelector: React.FC<LangSelectorProps> =\nfunction ({ exclude, value, untranslatedProps, translatedProps, groupProps }) {\n  const cfg = useContext(LangConfigContext);\n\n  return (\n    <ButtonGroup {...groupProps}>\n      {Object.keys(cfg.available).\n          filter(langID => (exclude || []).indexOf(langID) < 0).\n          map(langId =>\n        <LangSelectorButton\n          key={langId}\n          id={langId}\n          title={cfg.available[langId]}\n          isSelected={langId === cfg.selected}\n          onSelect={() => cfg.select(langId)}\n          untranslatedProps={untranslatedProps}\n          translatedProps={translatedProps}\n          hasTranslation={(value !== undefined) ? (value[langId] !== undefined) : undefined}\n        />\n      )}\n    </ButtonGroup>\n  );\n};\n\n\ninterface LangSelectorButtonProps {\n  id: string\n  title: string\n  isSelected: boolean\n  onSelect: () => void\n  hasTranslation?: boolean\n  untranslatedProps?: IButtonProps\n  translatedProps?: IButtonProps\n}\nconst LangSelectorButton: React.FC<LangSelectorButtonProps> = function (props) {\n  return (\n    <Button\n        active={props.isSelected}\n        onClick={props.onSelect}\n        {...(!props.hasTranslation ? props.untranslatedProps : {})}\n        {...(props.hasTranslation ? props.translatedProps : {})}>\n      {props.id}\n    </Button>\n  );\n};\n"]}