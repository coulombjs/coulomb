import * as path from 'path';
import { format as formatUrl } from 'url';
import { BrowserWindow, Menu } from 'electron';
const isDevelopment = process.env.NODE_ENV !== 'production';
const isMacOS = process.platform === 'darwin';
// Keeps track of windows and ensures (?) they do not get garbage collected
export var windows = [];
// Allows to locate window ID by label
var windowsByTitle = {};
export const openWindow = async ({ title, url, component, componentParams, dimensions, frameless, winParams, menuTemplate, ignoreCache, showWhileLoading, config }) => {
    if ((component || '').trim() === '' && (url || '').trim() === '') {
        throw new Error("openWindow() requires either `component` or `url`");
    }
    const _existingWindow = getWindowByTitle(title);
    if (_existingWindow !== undefined) {
        _existingWindow.show();
        _existingWindow.focus();
        return _existingWindow;
    }
    const _framelessOpts = {
        titleBarStyle: isMacOS ? 'hiddenInset' : undefined,
    };
    const _winParams = Object.assign(Object.assign({ width: (dimensions || {}).width, minWidth: (dimensions || {}).minWidth, height: (dimensions || {}).height, minHeight: (dimensions || {}).minHeight }, (frameless === true ? _framelessOpts : {})), winParams);
    let window;
    if (component) {
        const params = `c=${component}&${componentParams ? componentParams : ''}`;
        window = await createWindowForLocalComponent(title, params, _winParams, showWhileLoading === true, config.forceDevelopmentMode || false);
    }
    else if (url) {
        window = await createWindow(title, url, _winParams, showWhileLoading === true, ignoreCache);
    }
    else {
        throw new Error("Either component or url must be given to openWindow()");
    }
    if (menuTemplate && !isMacOS) {
        window.setMenu(Menu.buildFromTemplate(menuTemplate));
    }
    windows.push(window);
    windowsByTitle[title] = window;
    window.on('closed', () => { delete windowsByTitle[title]; cleanUpWindows(); });
    return window;
};
export function getWindowByTitle(title) {
    return windowsByTitle[title];
}
export function closeWindow(title) {
    const win = getWindowByTitle(title);
    if (win !== undefined) {
        win.close();
    }
}
export function getWindow(func) {
    return windows.find(func);
}
// Iterate over array of windows and try accessing window ID.
// If it throws, window was closed and we remove it from the array.
// Supposed to be run after any window is closed
function cleanUpWindows() {
    var deletedWindows = [];
    for (const [idx, win] of windows.entries()) {
        // When accessing the id attribute of a closed window,
        // it’ll throw. We’ll mark its index for deletion then.
        try {
            win.id;
        }
        catch (e) {
            deletedWindows.push(idx - deletedWindows.length);
        }
    }
    for (const idx of deletedWindows) {
        windows.splice(idx, 1);
    }
}
async function createWindowForLocalComponent(title, params, winParams, showWhileLoading, forceDebug) {
    let url;
    if (isDevelopment) {
        url = `http://localhost:${process.env.ELECTRON_WEBPACK_WDS_PORT}?${params}`;
    }
    else {
        url = `${formatUrl({
            pathname: path.join(__dirname, 'index.html'),
            protocol: 'file',
            slashes: true,
        })}?${params}`;
    }
    const window = await createWindow(title, url, winParams, showWhileLoading, forceDebug);
    if (forceDebug) {
        window.webContents.openDevTools();
    }
    return window;
}
async function createWindow(title, url, winParams, showWhileLoading, ignoreCache = false) {
    const window = new BrowserWindow(Object.assign({ webPreferences: { nodeIntegration: true }, title: title, show: showWhileLoading === true }, winParams));
    const promise = new Promise((resolve, reject) => {
        window.once('ready-to-show', () => {
            if (showWhileLoading !== true) {
                window.show();
            }
            resolve(window);
        });
    });
    if (ignoreCache) {
        window.loadURL(url, { 'extraHeaders': 'pragma: no-cache\n' });
    }
    else {
        window.loadURL(url);
    }
    window.webContents.on('devtools-opened', () => {
        window.focus();
        setImmediate(() => {
            window.focus();
        });
    });
    return promise;
}
export async function notifyAllWindows(eventName, payload) {
    await Promise.all(windows.map(async (window) => {
        if (window) {
            await window.webContents.send(eventName, payload);
        }
        return;
    }));
}
export async function notifyWindow(windowTitle, eventName, payload) {
    const window = getWindowByTitle(windowTitle);
    if (window) {
        await window.webContents.send(eventName, payload);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21haW4vd2luZG93LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFBO0FBQzVCLE9BQU8sRUFBRSxNQUFNLElBQUksU0FBUyxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUE4QixNQUFNLFVBQVUsQ0FBQztBQUszRSxNQUFNLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsS0FBSyxZQUFZLENBQUM7QUFDNUQsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLENBQUM7QUFFOUMsMkVBQTJFO0FBQzNFLE1BQU0sQ0FBQyxJQUFJLE9BQU8sR0FBb0IsRUFBRSxDQUFDO0FBRXpDLHNDQUFzQztBQUN0QyxJQUFJLGNBQWMsR0FBdUMsRUFBRSxDQUFDO0FBeUI1RCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQWlCLEtBQUssRUFBRSxFQUMzQyxLQUFLLEVBQ0wsR0FBRyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQy9CLFVBQVUsRUFBRSxTQUFTLEVBQ3JCLFNBQVMsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUNwQyxnQkFBZ0IsRUFDaEIsTUFBTSxFQUFFLEVBQUUsRUFBRTtJQUVkLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRSxNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7S0FDdEU7SUFFRCxNQUFNLGVBQWUsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxJQUFJLGVBQWUsS0FBSyxTQUFTLEVBQUU7UUFDakMsZUFBZSxDQUFDLElB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Q0FBQyxDQUFDO1NBQ25EO1FBQ0QsT0FBTztJQUNULENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDTixDQUFDO0FBR0QsTUFBTSxDQUFDLEtBQUssVUFBVSxZQUFZLENBQUMsV0FBbUIsRUFBRSxTQUFpQixFQUFFLE9BQWE7SUFDdEYsTUFBTSxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDN0MsSUFBSSxNQUFNLEVBQUU7UUFDVixNQUFNLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUNuRDtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBmb3JtYXQgYXMgZm9ybWF0VXJsIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IEJyb3dzZXJXaW5kb3csIE1lbnUsIE1lbnVJdGVtQ29uc3RydWN0b3JPcHRpb25zIH0gZnJvbSAnZWxlY3Ryb24nO1xuXG5pbXBvcnQgeyBBcHBDb25maWcgfSBmcm9tICcuLi9jb25maWcvYXBwJztcblxuXG5jb25zdCBpc0RldmVsb3BtZW50ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJztcbmNvbnN0IGlzTWFjT1MgPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJztcblxuLy8gS2VlcHMgdHJhY2sgb2Ygd2luZG93cyBhbmQgZW5zdXJlcyAoPykgdGhleSBkbyBub3QgZ2V0IGdhcmJhZ2UgY29sbGVjdGVkXG5leHBvcnQgdmFyIHdpbmRvd3M6IEJyb3dzZXJXaW5kb3dbXSA9IFtdO1xuXG4vLyBBbGxvd3MgdG8gbG9jYXRlIHdpbmRvdyBJRCBieSBsYWJlbFxudmFyIHdpbmRvd3NCeVRpdGxlOiB7IFt0aXRsZTogc3RyaW5nXTogQnJvd3NlcldpbmRvdyB9ID0ge307XG5cblxuLy8gT3BlbiBuZXcgd2luZG93LCBvciBmb2N1cyBpZiBvbmUgd2l0aCB0aGUgc2FtZSB0aXRsZSBhbHJlYWR5IGV4aXN0c1xuZXhwb3J0IGludGVyZmFjZSBXaW5kb3dPcGVuZXJQYXJhbXMge1xuICB0aXRsZTogc3RyaW5nXG4gIHVybD86IHN0cmluZ1xuICBjb21wb25lbnQ/OiBzdHJpbmdcbiAgY29tcG9uZW50UGFyYW1zPzogc3RyaW5nXG4gIGRpbWVuc2lvbnM/OiB7XG4gICAgbWluSGVpZ2h0PzogbnVtYmVyXG4gICAgbWluV2lkdGg/OiBudW1iZXJcbiAgICBoZWlnaHQ/OiBudW1iZXJcbiAgICB3aWR0aD86IG51bWJlclxuICAgIG1heEhlaWdodD86IG51bWJlclxuICAgIG1heFdpZHRoPzogbnVtYmVyXG4gIH1cbiAgZnJhbWVsZXNzPzogYm9vbGVhblxuICB3aW5QYXJhbXM/OiBhbnlcbiAgbWVudVRlbXBsYXRlPzogTWVudUl0ZW1Db25zdHJ1Y3Rvck9wdGlvbnNbXVxuICBpZ25vcmVDYWNoZT86IGJvb2xlYW5cbiAgc2hvd1doaWxlTG9hZGluZz86IGJvb2xlYW5cbiAgY29uZmlnOiBBcHBDb25maWdcbn1cbmV4cG9ydCB0eXBlIFdpbmRvd09wZW5lciA9IChwcm9wczogV2luZG93T3BlbmVyUGFyYW1zKSA9PiBQcm9taXNlPEJyb3dzZXJXaW5kb3c+O1xuZXhwb3J0IGNvbnN0IG9wZW5XaW5kb3c6IFdpbmRvd09wZW5lciA9IGFzeW5jICh7XG4gICAgdGl0bGUsXG4gICAgdXJsLCBjb21wb25lbnQsIGNvbXBvbmVudFBhcmFtcyxcbiAgICBkaW1lbnNpb25zLCBmcmFtZWxlc3MsXG4gICAgd2luUGFyYW1zLCBtZW51VGVtcGxhdGUsIGlnbm9yZUNhY2hlLFxuICAgIHNob3dXaGlsZUxvYWRpbmcsXG4gICAgY29uZmlnIH0pID0+IHtcblxuICBpZiAoKGNvbXBvbmVudCB8fCAnJykudHJpbSgpID09PSAnJyAmJiAodXJsIHx8ICcnKS50cmltKCkgPT09ICcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwib3BlbldpbmRvdygpIHJlcXVpcmVzIGVpdGhlciBgY29tcG9uZW50YCBvciBgdXJsYFwiKTtcbiAgfVxuXG4gIGNvbnN0IF9leGlzdGluZ1dpbmRvdyA9IGdldFdpbmRvd0J5VGl0bGUodGl0bGUpO1xuICBpZiAoX2V4aXN0aW5nV2luZG93ICE9PSB1bmRlZmluZWQpIHtcbiAgICBfZXhpc3RpbmdXaW5kb3cuc2hvdygpO1xuICAgIF9leGlzdGluZ1dpbmRvdy5mb2N1cygpO1xuICAgIHJldHVybiBfZXhpc3RpbmdXaW5kb3c7XG4gIH1cblxuICBjb25zdCBfZnJhbWVsZXNzT3B0cyA9IHtcbiAgICB0aXRsZUJhclN0eWxlOiBpc01hY09TID8gJ2hpZGRlbkluc2V0JyA6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBjb25zdCBfd2luUGFyYW1zID0ge1xuICAgIHdpZHRoOiAoZGltZW5zaW9ucyB8fCB7fSkud2lkdGgsXG4gICAgbWluV2lkdGg6IChkaW1lbnNpb25zIHx8IHt9KS5taW5XaWR0aCxcbiAgICBoZWlnaHQ6IChkaW1lbnNpb25zIHx8IHt9KS5oZWlnaHQsXG4gICAgbWluSGVpZ2h0OiAoZGltZW5zaW9ucyB8fCB7fSkubWluSGVpZ2h0LFxuICAgIC4uLihmcmFtZWxlc3MgPT09IHRydWUgPyBfZnJhbWVsZXNzT3B0cyA6IHt9KSxcbiAgICAuLi53aW5QYXJhbXMsXG4gIH07XG5cbiAgbGV0IHdpbmRvdzogQnJvd3NlcldpbmRvdztcblxuICBpZiAoY29tcG9uZW50KSB7XG4gICAgY29uc3QgcGFyYW1zID0gYGM9JHtjb21wb25lbnR9JiR7Y29tcG9uZW50UGFyYW1zID8gY29tcG9uZW50UGFyYW1zIDogJyd9YDtcbiAgICB3aW5kb3cgPSBhd2FpdCBjcmVhdGVXaW5kb3dGb3JMb2NhbENvbXBvbmVudCh0aXRsZSwgcGFyYW1zLCBfd2luUGFyYW1zLCBzaG93V2hpbGVMb2FkaW5nID09PSB0cnVlLCBjb25maWcuZm9yY2VEZXZlbG9wbWVudE1vZGUgfHwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKHVybCkge1xuICAgIHdpbmRvdyA9IGF3YWl0IGNyZWF0ZVdpbmRvdyh0aXRsZSwgdXJsLCBfd2luUGFyYW1zLCBzaG93V2hpbGVMb2FkaW5nID09PSB0cnVlLCBpZ25vcmVDYWNoZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRWl0aGVyIGNvbXBvbmVudCBvciB1cmwgbXVzdCBiZSBnaXZlbiB0byBvcGVuV2luZG93KClcIik7XG4gIH1cblxuICBpZiAobWVudVRlbXBsYXRlICYmICFpc01hY09TKSB7XG4gICAgd2luZG93LnNldE1lbnUoTWVudS5idWlsZEZyb21UZW1wbGF0ZShtZW51VGVtcGxhdGUpKTtcbiAgfVxuXG4gIHdpbmRvd3MucHVzaCh3aW5kb3cpO1xuICB3aW5kb3dzQnlUaXRsZVt0aXRsZV0gPSB3aW5kb3c7XG4gIHdpbmRvdy5vbignY2xvc2VkJywgKCkgPT4geyBkZWxldGUgd2luZG93c0J5VGl0bGVbdGl0bGVdOyBjbGVhblVwV2luZG93cygpOyB9KTtcblxuICByZXR1cm4gd2luZG93O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXaW5kb3dCeVRpdGxlKHRpdGxlOiBzdHJpbmcpOiBCcm93c2VyV2luZG93IHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHdpbmRvd3NCeVRpdGxlW3RpdGxlXTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2VXaW5kb3codGl0bGU6IHN0cmluZykge1xuICBjb25zdCB3aW4gPSBnZXRXaW5kb3dCeVRpdGxlKHRpdGxlKTtcbiAgaWYgKHdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgd2luLmNsb3NlKCk7XG4gIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2luZG93KGZ1bmM6ICh3aW46IEJyb3dzZXJXaW5kb3cpID0+IGJvb2xlYW4pOiBCcm93c2VyV2luZG93IHwgdW5kZWZpbmVkIHtcbiAgcmV0dXJuIHdpbmRvd3MuZmluZChmdW5jKTtcbn1cblxuXG4vLyBJdGVyYXRlIG92ZXIgYXJyYXkgb2Ygd2luZG93cyBhbmQgdHJ5IGFjY2Vzc2luZyB3aW5kb3cgSUQuXG4vLyBJZiBpdCB0aHJvd3MsIHdpbmRvdyB3YXMgY2xvc2VkIGFuZCB3ZSByZW1vdmUgaXQgZnJvbSB0aGUgYXJyYXkuXG4vLyBTdXBwb3NlZCB0byBiZSBydW4gYWZ0ZXIgYW55IHdpbmRvdyBpcyBjbG9zZWRcbmZ1bmN0aW9uIGNsZWFuVXBXaW5kb3dzKCkge1xuICB2YXIgZGVsZXRlZFdpbmRvd3M6IG51bWJlcltdID0gW107XG4gIGZvciAoY29uc3QgW2lkeCwgd2luXSBvZiB3aW5kb3dzLmVudHJpZXMoKSkge1xuICAgIC8vIFdoZW4gYWNjZXNzaW5nIHRoZSBpZCBhdHRyaWJ1dGUgb2YgYSBjbG9zZWQgd2luZG93LFxuICAgIC8vIGl04oCZbGwgdGhyb3cuIFdl4oCZbGwgbWFyayBpdHMgaW5kZXggZm9yIGRlbGV0aW9uIHRoZW4uXG4gICAgdHJ5IHtcbiAgICAgIHdpbi5pZDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkZWxldGVkV2luZG93cy5wdXNoKGlkeCAtIGRlbGV0ZWRXaW5kb3dzLmxlbmd0aCk7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgaWR4IG9mIGRlbGV0ZWRXaW5kb3dzKSB7XG4gICAgd2luZG93cy5zcGxpY2UoaWR4LCAxKTtcbiAgfVxufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdpbmRvd0ZvckxvY2FsQ29tcG9uZW50KFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBzdHJpbmcsXG4gICAgd2luUGFyYW1zOiBhbnksXG4gICAgc2hvd1doaWxlTG9hZGluZzogYm9vbGVhbixcbiAgICBmb3JjZURlYnVnOiBib29sZWFuKTogUHJvbWlzZTxCcm93c2VyV2luZG93PiB7XG5cbiAgbGV0IHVybDogc3RyaW5nO1xuXG4gIGlmIChpc0RldmVsb3BtZW50KSB7XG4gICAgdXJsID0gYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwcm9jZXNzLmVudi5FTEVDVFJPTl9XRUJQQUNLX1dEU19QT1JUfT8ke3BhcmFtc31gO1xuICB9XG4gIGVsc2Uge1xuICAgIHVybCA9IGAke2Zvcm1hdFVybCh7XG4gICAgICBwYXRobmFtZTogcGF0aC5qb2luKF9fZGlybmFtZSwgJ2luZGV4Lmh0bWwnKSxcbiAgICAgIHByb3RvY29sOiAnZmlsZScsXG4gICAgICBzbGFzaGVzOiB0cnVlLFxuICAgIH0pfT8ke3BhcmFtc31gO1xuICB9XG5cbiAgY29uc3Qgd2luZG93ID0gYXdhaXQgY3JlYXRlV2luZG93KHRpdGxlLCB1cmwsIHdpblBhcmFtcywgc2hvd1doaWxlTG9hZGluZywgZm9yY2VEZWJ1Zyk7XG5cbiAgaWYgKGZvcmNlRGVidWcpIHtcbiAgICB3aW5kb3cud2ViQ29udGVudHMub3BlbkRldlRvb2xzKCk7XG4gIH1cblxuICByZXR1cm4gd2luZG93O1xufVxuXG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVdpbmRvdyhcbiAgICB0aXRsZTogc3RyaW5nLFxuICAgIHVybDogc3RyaW5nLFxuICAgIHdpblBhcmFtczogYW55LFxuICAgIHNob3dXaGlsZUxvYWRpbmc6IGJvb2xlYW4sXG4gICAgaWdub3JlQ2FjaGU6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8QnJvd3NlcldpbmRvdz4ge1xuXG4gIGNvbnN0IHdpbmRvdyA9IG5ldyBCcm93c2VyV2luZG93KHtcbiAgICB3ZWJQcmVmZXJlbmNlczoge25vZGVJbnRlZ3JhdGlvbjogdHJ1ZX0sXG4gICAgdGl0bGU6IHRpdGxlLFxuICAgIHNob3c6IHNob3dXaGlsZUxvYWRpbmcgPT09IHRydWUsXG4gICAgLi4ud2luUGFyYW1zXG4gIH0pO1xuXG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZTxCcm93c2VyV2luZG93PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgd2luZG93Lm9uY2UoJ3JlYWR5LXRvLXNob3cnLCAoKSA9PiB7XG4gICAgICBpZiAoc2hvd1doaWxlTG9hZGluZyAhPT0gdHJ1ZSkge1xuICAgICAgICB3aW5kb3cuc2hvdygpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSh3aW5kb3cpO1xuICAgIH0pO1xuICB9KTtcblxuICBpZiAoaWdub3JlQ2FjaGUpIHtcbiAgICB3aW5kb3cubG9hZFVSTCh1cmwsIHsnZXh0cmFIZWFkZXJzJzogJ3ByYWdtYTogbm8tY2FjaGVcXG4nfSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvYWRVUkwodXJsKTtcbiAgfVxuXG4gIHdpbmRvdy53ZWJDb250ZW50cy5vbignZGV2dG9vbHMtb3BlbmVkJywgKCkgPT4ge1xuICAgIHdpbmRvdy5mb2N1cygpO1xuICAgIHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICB3aW5kb3cuZm9jdXMoKVxuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbm90aWZ5QWxsV2luZG93cyhldmVudE5hbWU6IHN0cmluZywgcGF5bG9hZD86IGFueSkge1xuICBhd2FpdCBQcm9taXNlLmFsbCh3aW5kb3dzLm1hcChhc3luYyAod2luZG93KSA9PiB7XG4gICAgaWYgKHdpbmRvdykge1xuICAgICAgYXdhaXQgd2luZG93LndlYkNvbnRlbnRzLnNlbmQoZXZlbnROYW1lLCBwYXlsb2FkKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9KSk7XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG5vdGlmeVdpbmRvdyh3aW5kb3dUaXRsZTogc3RyaW5nLCBldmVudE5hbWU6IHN0cmluZywgcGF5bG9hZD86IGFueSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3dCeVRpdGxlKHdpbmRvd1RpdGxlKTtcbiAgaWYgKHdpbmRvdykge1xuICAgIGF3YWl0IHdpbmRvdy53ZWJDb250ZW50cy5zZW5kKGV2ZW50TmFtZSwgcGF5bG9hZCk7XG4gIH1cbn1cbiJdfQ==