{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/settings/main.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs-extra';\nimport * as log from 'electron-log';\n\nimport { ipcMain } from 'electron';\nimport { listen } from '../ipc/main';\n\nimport { default as YAMLWrapper } from '../db/isogit-yaml/main/yaml/file';\n\n\nexport interface Pane {\n  id: string;\n  label: string;\n  icon?: string;\n  helpText?: string;\n}\n\n\nexport class Setting<T> {\n  constructor(\n\n    public paneID: string,\n    /* ID of the pane to show the setting under. */\n\n    public id: string,\n    /* Setting ID should be unique across all settings. */\n\n    public input: 'text' | 'number',\n    /* Determines input widget shown by default. */\n\n    public required: boolean,\n    /* Indicates whether the setting is required for app operation. */\n\n    public label: string,\n    /* Setting label shown to the user should be unique within given pane,\n       to avoid confusion. */\n\n    public helpText?: string,\n\n  ) {}\n\n  toUseable(val: unknown): T { return val as T }\n  /* Converts stored setting value to useable object. */\n\n  toStoreable(val: T): any { return val as any }\n  /* Converts JS/TS object to storeable version of the setting. */\n\n}\n\n\nexport class SettingManager {\n  private registry: Setting<any>[] = [];\n  private panes: Pane[] = [];\n  private data: any | null = null;\n  private yaml: YAMLWrapper;\n  private settingsPath: string;\n\n  constructor(public appDataPath: string, public settingsFileName: string) {\n    this.settingsPath = path.join(appDataPath, `${settingsFileName}.yaml`);\n    log.debug(`C/settings: Configuring w/path ${this.settingsPath}`);\n\n    this.yaml = new YAMLWrapper(appDataPath);\n  }\n\n  public async listMissingRequiredSettings(): Promise<string[]> {\n    var requiredSettingIDs: string[] = [];\n    for (const setting of this.registry) {\n      if (setting.required == true && (await this.getValue(setting.id)) === undefined) {\n        requiredSettingIDs.push(setting.id);\n      }\n    }\n    return requiredSettingIDs;\n  }\n\n  public async getValue(id: string): Promise<unknown> {\n    const setting = this.get(id);\n\n    if (setting) {\n      if (this.data === null) {\n        let settingsFileExists: boolean;\n        try {\n          settingsFileExists = (await fs.stat(this.settingsPath)).isFile();\n        } catch (e) {\n          settingsFileExists = false;\n        }\n        if (settingsFileExists) {\n          this.data = (await this.yaml.read(this.settingsFileName)) || {};\n        } else {\n          this.data = {};\n        }\n      }\n      const rawVal = this.data[id];\n      return rawVal !== undefined ? setting.toUseable(rawVal) : undefined;\n    } else {\n      log.warn(`C/settings: Attempted to get value for non-existent setting ${id}`);\n      throw new Error(`Setting to get value for is not found: ${id}`);\n    }\n  }\n\n  public async setValue(id: string, val: unknown) {\n    // DANGER: Never log settingâ€™s val in raw form\n\n    log.debug(`C/settings: Set value for setting ${id}`);\n\n    const setting = this.get(id);\n    if (setting) {\n      const storeable = setting.toStoreable(val);\n      this.data[id] = storeable;\n      await this.commit();\n    } else {\n      throw new Error(`Setting to set value for is not found: ${id}`);\n    }\n  }\n\n  public async deleteValue(id: string) {\n    log.debug(`C/settings: Delete setting: ${id}`);\n    delete this.data[id];\n    await this.commit();\n  }\n\n  private async commit() {\n    log.info(\"C/settings: Commit new settings\");\n\n    log.debug(\"C/settings: Commit: Remove file\");\n    await fs.remove(this.settingsPath);\n\n    log.debug(\"C/settings: Commit: Write new file\");\n    await this.yaml.write(this.settingsFileName, this.data);\n  }\n\n  private get(id: string): Setting<any> | undefined {\n    return this.registry.find(s => s.id === id);\n  }\n\n  public register(setting: Setting<any>) {\n    log.debug(\"C/settings: Register setting\");\n    if (this.panes.find(p => p.id === setting.paneID)) {\n      this.registry.push(setting);\n\n    } else {\n      log.error(\"C/settings: Unable to register a setting: Invalid pane ID\");\n      throw new Error(\"Invalid pane ID\");\n    }\n  }\n\n  public configurePane(pane: Pane) {\n    this.panes.push(pane);\n  }\n\n  public setUpIPC() {\n    log.verbose(\"C/settings: Register API endpoints\");\n\n    listen<{}, { panes: Pane[] }>\n    ('settingPaneList', async () => {\n      return { panes: this.panes };\n    });\n\n    listen<{}, { settings: Setting<any>[] }>\n    ('settingList', async () => {\n      return { settings: this.registry };\n    });\n\n    listen<{ name: string }, { value: any }>\n    ('settingValue', async ({ name }) => {\n      return await this.getValue(name) as any;\n    });\n\n    listen<{ name: string, value: any }, { success: true }>\n    ('commitSetting', async({ name, value }) => {\n      await this.setValue(name, value);\n      return { success: true };\n    })\n\n    ipcMain.on('set-setting', async (evt: any, name: string, value: any) => {\n      return await this.setValue(name, value);\n    });\n\n    ipcMain.on('get-setting', async (evt: any, name: string) => {\n      const value = await this.getValue(name);\n      evt.reply('get-setting', name, value);\n    });\n\n    ipcMain.on('clear-setting', async (evt: any, name: string) => {\n      log.debug(`C/settings: received clear-setting request for ${name}`);\n\n      await this.deleteValue(name);\n      evt.reply('clear-setting', 'ok');\n    });\n  }\n}\n"]}