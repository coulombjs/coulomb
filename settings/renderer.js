import React from 'react';
import { useEffect, useState } from 'react';
import { Button, Label, Tabs, Tab, InputGroup } from '@blueprintjs/core';
import { useIPCValue, useIPCRequest } from '../ipc/renderer';
export function useSetting(name, initialValue) {
    // TODO: Make setting manager send IPC event to renderer when value changed;
    // listen to that event here and relay new value so that widgets are updated.
    // Important if multiple widgets depending on the same setting
    // are shown simultaneously.
    const [localValue, setLocalValue] = useState(initialValue);
    const ipcValue = useIPCValue('settingValue', initialValue, { name });
    useEffect(() => {
        setLocalValue(ipcValue.value);
    }, [ipcValue.value]);
    async function commit() {
        await useIPCRequest('commitSetting', { name, value: localValue });
        ipcValue.refresh();
    }
    return {
        value: localValue,
        // Setting value shown in the widget
        remoteValue: ipcValue.value,
        // Setting value in storage
        changed: () => localValue !== ipcValue.value,
        // True if user manipulated widgetâ€™s local value
        // and the result is different from value in storage
        set: setLocalValue,
        // Updates local value
        commit: commit,
    };
}
const SettingsScreen = function ({ query }) {
    const panes = useIPCValue('settingPaneList', { panes: [] }).
        value.panes;
    const settings = useIPCValue('settingList', { settings: [] }).
        value.settings;
    // Determine whether user was requested to supply specific settings
    let requiredSettingIDs;
    const maybeRequiredSettings = query.get('requiredSettings');
    if (maybeRequiredSettings) {
        requiredSettingIDs = maybeRequiredSettings.split(',');
    }
    else {
        requiredSettingIDs = [];
    }
    let settingWidgetGroup;
    if (requiredSettingIDs.length > 0) {
        settingWidgetGroup = (React.createElement(SettingInputList, { settings: settings.filter(s => requiredSettingIDs.indexOf(s.id) >= 0) }));
    }
    else {
        settingWidgetGroup = (React.createElement(Tabs, null, panes.map(pane => (React.createElement(Tab, { key: pane.id, id: pane.id, title: pane.label, panel: React.createElement(SettingInputList, { settings: settings.filter(s => s.paneID === pane.id) }) })))));
    }
    return React.createElement("div", null, settingWidgetGroup);
};
const SettingInputList = function ({ settings }) {
    const ipcSettings = settings.map((setting) => useSetting(setting.id, ''));
    const hasChangedSettings = ipcSettings.map((setting) => setting.changed()).indexOf(true) >= 0;
    function commitAll() {
        for (const setting of ipcSettings) {
            setting.commit();
        }
    }
    return (React.createElement(React.Fragment, null,
        [...ipcSettings.entries()].map(([idx, s]) => React.createElement(SettingInput, { label: settings[idx].label, ipcSetting: s, key: idx })),
        hasChangedSettings
            ? React.createElement(Button, { onClick: commitAll }, "Save all")
            : null));
};
const SettingInput = function ({ label, ipcSetting }) {
    return (React.createElement(Label, null,
        label,
        React.createElement(InputGroup, { value: ipcSetting.value, type: "text", rightElement: React.createElement(Button, { disabled: !ipcSetting.changed, onClick: ipcSetting.commit, title: "Save setting", icon: "tick" }), onChange: (evt) => {
                ipcSetting.set(evt.target.value);
            } })));
};
export default SettingsScreen;
//# sourceMappingURL=data:application/json;base64,