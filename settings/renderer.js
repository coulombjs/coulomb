import React from 'react';
import { useEffect, useState } from 'react';
import { remote } from 'electron';
import { Button, Tabs, Tab, InputGroup, FormGroup } from '@blueprintjs/core';
import { useIPCValue, callIPC } from '../ipc/renderer';
import styles from './styles.scss';
export function useSetting(name, initialValue) {
    // TODO: Make setting manager send IPC event to renderer when value changed;
    // listen to that event here and relay new value so that widgets are updated.
    // Important if multiple widgets depending on the same setting
    // are shown simultaneously.
    const [localValue, setLocalValue] = useState(initialValue);
    const ipcValue = useIPCValue('settingValue', initialValue, { name });
    useEffect(() => {
        setLocalValue(ipcValue.value);
    }, [ipcValue.value]);
    async function commit() {
        await callIPC('commitSetting', { name, value: localValue });
        ipcValue.refresh();
    }
    return {
        value: localValue,
        // Setting value shown in the widget
        remoteValue: ipcValue.value,
        // Setting value in storage
        changed: () => localValue !== ipcValue.value,
        // True if user manipulated widgetâ€™s local value
        // and the result is different from value in storage
        set: setLocalValue,
        // Updates local value
        commit: commit,
    };
}
const SettingsScreen = function ({ query }) {
    const panes = useIPCValue('settingPaneList', { panes: [] }).
        value.panes;
    const settings = useIPCValue('settingList', { settings: [] }).
        value.settings;
    // Determine whether user was requested to supply specific settings
    let requiredSettingIDs;
    const maybeRequiredSettings = query.get('requiredSettings');
    if (maybeRequiredSettings) {
        requiredSettingIDs = maybeRequiredSettings.split(',');
    }
    else {
        requiredSettingIDs = [];
    }
    let settingWidgetGroup;
    if (requiredSettingIDs.length > 0) {
        settingWidgetGroup = (React.createElement(SettingInputList, { settings: settings.filter(s => requiredSettingIDs.indexOf(s.id) >= 0) }));
    }
    else {
        settingWidgetGroup = (React.createElement(Tabs, null, panes.map(pane => (React.createElement(Tab, { key: pane.id, id: pane.id, title: pane.label, panel: React.createElement(SettingInputList, { settings: settings.filter(s => s.paneID === pane.id) }) })))));
    }
    return React.createElement("div", { className: styles.base }, settingWidgetGroup);
};
const SettingInputList = function ({ settings }) {
    const ipcSettings = settings.map((setting) => useSetting(setting.id, ''));
    const hasChangedSettings = ipcSettings.map((setting) => setting.changed()).indexOf(true) >= 0;
    async function commitAllAndClose() {
        for (const setting of ipcSettings) {
            await setting.commit();
        }
        remote.getCurrentWindow().close();
    }
    return (React.createElement(React.Fragment, null,
        [...ipcSettings.entries()].map(([idx, s]) => React.createElement(SettingInput, { label: settings[idx].label, helpText: settings[idx].helpText, ipcSetting: s, key: idx })),
        hasChangedSettings
            ? React.createElement(Button, { large: true, intent: "primary", onClick: commitAllAndClose }, "Save all and close")
            : null));
};
const SettingInput = function ({ label, ipcSetting, helpText }) {
    return (React.createElement(FormGroup, { label: label, labelFor: "input", helperText: helpText },
        React.createElement(InputGroup, { id: "input", large: true, type: "text", value: ipcSetting.value, onChange: (evt) => {
                ipcSetting.set(evt.target.value);
            }, rightElement: React.createElement(Button, { disabled: !ipcSetting.changed(), onClick: ipcSetting.commit, tabIndex: -1, title: "Save setting", icon: "tick" }, "Save") })));
};
export default SettingsScreen;
//# sourceMappingURL=data:application/json;base64,