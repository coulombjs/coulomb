import React from 'react';
import { useEffect, useState } from 'react';
import { remote } from 'electron';
import { Button, Tabs, Tab, InputGroup, FormGroup } from '@blueprintjs/core';
import { useIPCValue, callIPC } from '../ipc/renderer';
import styles from './styles.scss';
export function useSetting(name, initialValue) {
    // TODO: Make setting manager send IPC event to renderer when value changed;
    // listen to that event here and relay new value so that widgets are updated.
    // Important if multiple widgets depending on the same setting
    // are shown simultaneously.
    const [localValue, setLocalValue] = useState(initialValue);
    const ipcValue = useIPCValue('settingValue', initialValue, { name });
    useEffect(() => {
        setLocalValue(ipcValue.value);
    }, [ipcValue.value]);
    async function commit() {
        await callIPC('commitSetting', { name, value: localValue });
        ipcValue.refresh();
    }
    return {
        value: localValue,
        // Setting value shown in the widget
        remoteValue: ipcValue.value,
        // Setting value in storage
        changed: () => localValue !== ipcValue.value,
        // True if user manipulated widgetâ€™s local value
        // and the result is different from value in storage
        set: setLocalValue,
        // Updates local value
        commit: commit,
    };
}
const SettingsScreen = function ({ query }) {
    const panes = useIPCValue('settingPaneList', { panes: [] }).
        value.panes;
    const settings = useIPCValue('settingList', { settings: [] }).
        value.settings;
    const [selectedTabID, selectTabID] = useState(undefined);
    useEffect(() => {
        if (panes.length > 0 && selectedTabID === undefined) {
            selectTabID(panes[0].id);
        }
    }, [panes.length]);
    // Determine whether user was requested to supply specific settings
    let requiredSettingIDs;
    const maybeRequiredSettings = query.get('requiredSettings');
    if (maybeRequiredSettings) {
        requiredSettingIDs = maybeRequiredSettings.split(',');
    }
    else {
        requiredSettingIDs = [];
    }
    let settingWidgetGroup;
    if (requiredSettingIDs.length > 0) {
        settingWidgetGroup = (React.createElement(SettingInputList, { settings: settings.filter(s => requiredSettingIDs.indexOf(s.id) >= 0) }));
    }
    else {
        settingWidgetGroup = (React.createElement(Tabs, { vertical: true, className: styles.tabs, selectedTabId: selectedTabID, onChange: (newTabID) => selectTabID(`${newTabID}`) }, panes.map(pane => (React.createElement(Tab, { key: pane.id, id: `${pane.id}`, title: pane.label, panel: React.createElement(SettingInputList, { settings: settings.filter(s => s.paneID === pane.id) }) })))));
    }
    return React.createElement("div", { className: styles.base }, settingWidgetGroup);
};
const SettingInputList = function ({ settings }) {
    const ipcSettings = settings.map((setting) => useSetting(setting.id, ''));
    const hasChangedSettings = ipcSettings.map((setting) => setting.changed()).indexOf(true) >= 0;
    async function commitAllAndClose() {
        for (const setting of ipcSettings) {
            await setting.commit();
        }
        remote.getCurrentWindow().close();
    }
    return (React.createElement(React.Fragment, null,
        [...ipcSettings.entries()].map(([idx, s]) => React.createElement(SettingInput, { label: settings[idx].label, helpText: settings[idx].helpText, ipcSetting: s, key: idx })),
        hasChangedSettings
            ? React.createElement(Button, { large: true, intent: "primary", onClick: commitAllAndClose }, "Save all and close")
            : null));
};
const SettingInput = function ({ label, ipcSetting, helpText }) {
    return (React.createElement(FormGroup, { label: label, labelFor: "input", helperText: helpText },
        React.createElement(InputGroup, { id: "input", large: true, type: "text", value: ipcSetting.value, onChange: (evt) => {
                ipcSetting.set(evt.target.value);
            }, rightElement: React.createElement(Button, { disabled: !ipcSetting.changed(), onClick: ipcSetting.commit, tabIndex: -1, title: "Save setting", icon: "tick" }, "Save") })));
};
export default SettingsScreen;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2V0dGluZ3MvcmVuZGVyZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUM1QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJN0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV2RCxPQUFPLE1BQU0sTUFBTSxlQUFlLENBQUM7QUFXbkMsTUFBTSxVQUFVLFVBQVUsQ0FBSSxJQUFZLEVBQUUsWUFBZTtJQUN6RCw0RUFBNEU7SUFDNUUsNkVBQTZFO0lBQzdFLDhEQUE4RDtJQUM5RCw0QkFBNEI7SUFFNUIsTUFBTSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsR0FBRyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFM0QsTUFBTSxRQUFRLEdBQUcsV0FBVyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXJFLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixhQUFhLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2hDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRXJCLEtBQUssVUFBVSxNQUFNO1FBQ25CLE1BQU0sT0FBTyxDQUFDLGVBQWUsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUM1RCxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckIsQ0FBQztJ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QVEsRUFBRTtJQUMxRixPQUFPLENBQ0wsb0JBQUMsU0FBUyxJQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFDLE9BQU8sRUFBQyxVQUFVLEVBQUUsUUFBUTtRQUM1RCxvQkFBQyxVQUFVLElBQ1QsRUFBRSxFQUFDLE9BQU8sRUFDVixLQUFLLFFBQ0wsSUFBSSxFQUFDLE1BQU0sRUFDWCxLQUFLLEVBQUUsVUFBVSxDQUFDLEtBQUssRUFDdkIsUUFBUSxFQUFFLENBQUMsR0FBaUMsRUFBRSxFQUFFO2dCQUM5QyxVQUFVLENBQUMsR0FBRyxDQUFFLEdBQUcsQ0FBQyxNQUEyQixDQUFDLEtBQWUsQ0FBQyxDQUFDO1lBQ25FLENBQUMsRUFDRCxZQUFZLEVBQ1Ysb0JBQUMsTUFBTSxJQUNILFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFDL0IsT0FBTyxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQzFCLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFDWixLQUFLLEVBQUMsY0FBYyxFQUNwQixJQUFJLEVBQUMsTUFBTSxXQUVOLEdBRVgsQ0FDUSxDQUNiLENBQUM7QUFDSixDQUFDLENBQUM7QUFHRixlQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgcmVtb3RlIH0gZnJvbSAnZWxlY3Ryb24nO1xuXG5pbXBvcnQgeyBCdXR0b24sIFRhYnMsIFRhYiwgSW5wdXRHcm91cCwgRm9ybUdyb3VwIH0gZnJvbSAnQGJsdWVwcmludGpzL2NvcmUnO1xuaW1wb3J0IHsgV2luZG93Q29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb25maWcvcmVuZGVyZXInO1xuXG5pbXBvcnQgeyBQYW5lLCBTZXR0aW5nIH0gZnJvbSAnLi4vc2V0dGluZ3MvbWFpbic7XG5pbXBvcnQgeyB1c2VJUENWYWx1ZSwgY2FsbElQQyB9IGZyb20gJy4uL2lwYy9yZW5kZXJlcic7XG5cbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9zdHlsZXMuc2Nzcyc7XG5cblxuaW50ZXJmYWNlIFNldHRpbmdIb29rPFQ+IHtcbiAgdmFsdWU6IFRcbiAgcmVtb3RlVmFsdWU6IFRcbiAgY29tbWl0OiAoKSA9PiBQcm9taXNlPHZvaWQ+XG4gIHNldDogKHZhbHVlOiBUKSA9PiB2b2lkXG4gIGNoYW5nZWQ6ICgpID0+IGJvb2xlYW5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVNldHRpbmc8VD4obmFtZTogc3RyaW5nLCBpbml0aWFsVmFsdWU6IFQpOiBTZXR0aW5nSG9vazxUPiB7XG4gIC8vIFRPRE86IE1ha2Ugc2V0dGluZyBtYW5hZ2VyIHNlbmQgSVBDIGV2ZW50IHRvIHJlbmRlcmVyIHdoZW4gdmFsdWUgY2hhbmdlZDtcbiAgLy8gbGlzdGVuIHRvIHRoYXQgZXZlbnQgaGVyZSBhbmQgcmVsYXkgbmV3IHZhbHVlIHNvIHRoYXQgd2lkZ2V0cyBhcmUgdXBkYXRlZC5cbiAgLy8gSW1wb3J0YW50IGlmIG11bHRpcGxlIHdpZGdldHMgZGVwZW5kaW5nIG9uIHRoZSBzYW1lIHNldHRpbmdcbiAgLy8gYXJlIHNob3duIHNpbXVsdGFuZW91c2x5LlxuXG4gIGNvbnN0IFtsb2NhbFZhbHVlLCBzZXRMb2NhbFZhbHVlXSA9IHVzZVN0YXRlKGluaXRpYWxWYWx1ZSk7XG5cbiAgY29uc3QgaXBjVmFsdWUgPSB1c2VJUENWYWx1ZSgnc2V0dGluZ1ZhbHVlJywgaW5pdGlhbFZhbHVlLCB7IG5hbWUgfSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBzZXRMb2NhbFZhbHVlKGlwY1ZhbHVlLnZhbHVlKTtcbiAgfSwgW2lwY1ZhbHVlLnZhbHVlXSk7XG5cbiAgYXN5bmMgZnVuY3Rpb24gY29tbWl0KCkge1xuICAgIGF3YWl0IGNhbGxJUEMoJ2NvbW1pdFNldHRpbmcnLCB7IG5hbWUsIHZhbHVlOiBsb2NhbFZhbHVlIH0pO1xuICAgIGlwY1ZhbHVlLnJlZnJlc2goKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IGxvY2FsVmFsdWUsXG4gICAgLy8gU2V0dGluZyB2YWx1ZSBzaG93biBpbiB0aGUgd2lkZ2V0XG5cbiAgICByZW1vdGVWYWx1ZTogaXBjVmFsdWUudmFsdWUsXG4gICAgLy8gU2V0dGluZyB2YWx1ZSBpbiBzdG9yYWdlXG5cbiAgICBjaGFuZ2VkOiAoKSA9PiBsb2NhbFZhbHVlICE9PSBpcGNWYWx1ZS52YWx1ZSxcbiAgICAvLyBUcnVlIGlmIHVzZXIgbWFuaXB1bGF0ZWQgd2lkZ2V04oCZcyBsb2NhbCB2YWx1ZVxuICAgIC8vIGFuZCB0aGUgcmVzdWx0IGlzIGRpZmZlcmVudCBmcm9tIHZhbHVlIGluIHN0b3JhZ2VcblxuICAgIHNldDogc2V0TG9jYWxWYWx1ZSxcbiAgICAvLyBVcGRhdGVzIGxvY2FsIHZhbHVlXG5cbiAgICBjb21taXQ6IGNvbW1pdCxcbiAgICAvLyBTYXZlcyBsb2NhbCB2YWx1ZSBpbiBzdG9yYWdlXG4gIH07XG59XG5cblxuY29uc3QgU2V0dGluZ3NTY3JlZW46IFJlYWN0LkZDPFdpbmRvd0NvbXBvbmVudFByb3BzPiA9IGZ1bmN0aW9uICh7IHF1ZXJ5IH0pIHtcbiAgY29uc3QgcGFuZXMgPSB1c2VJUENWYWx1ZSgnc2V0dGluZ1BhbmVMaXN0JywgeyBwYW5lczogW10gYXMgUGFuZVtdIH0pLlxuICAgIHZhbHVlLnBhbmVzO1xuICBjb25zdCBzZXR0aW5ncyA9IHVzZUlQQ1ZhbHVlKCdzZXR0aW5nTGlzdCcsIHsgc2V0dGluZ3M6IFtdIGFzIFNldHRpbmc8YW55PltdIH0pLlxuICAgIHZhbHVlLnNldHRpbmdzO1xuXG4gIGNvbnN0IFtzZWxlY3RlZFRhYklELCBzZWxlY3RUYWJJRF0gPSB1c2VTdGF0ZTxQYW5lW1wiaWRcIl0gfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocGFuZXMubGVuZ3RoID4gMCAmJiBzZWxlY3RlZFRhYklEID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNlbGVjdFRhYklEKHBhbmVzWzBdLmlkKTtcbiAgICB9XG4gIH0sIFtwYW5lcy5sZW5ndGhdKTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciB1c2VyIHdhcyByZXF1ZXN0ZWQgdG8gc3VwcGx5IHNwZWNpZmljIHNldHRpbmdzXG4gIGxldCByZXF1aXJlZFNldHRpbmdJRHM6IHN0cmluZ1tdO1xuICBjb25zdCBtYXliZVJlcXVpcmVkU2V0dGluZ3MgPSBxdWVyeS5nZXQoJ3JlcXVpcmVkU2V0dGluZ3MnKVxuICBpZiAobWF5YmVSZXF1aXJlZFNldHRpbmdzKSB7XG4gICAgcmVxdWlyZWRTZXR0aW5nSURzID0gbWF5YmVSZXF1aXJlZFNldHRpbmdzLnNwbGl0KCcsJyk7XG4gIH0gZWxzZSB7XG4gICAgcmVxdWlyZWRTZXR0aW5nSURzID0gW107XG4gIH1cblxuICBsZXQgc2V0dGluZ1dpZGdldEdyb3VwOiBKU1guRWxlbWVudDtcblxuICBpZiAocmVxdWlyZWRTZXR0aW5nSURzLmxlbmd0aCA+IDApIHtcbiAgICBzZXR0aW5nV2lkZ2V0R3JvdXAgPSAoXG4gICAgICA8U2V0dGluZ0lucHV0TGlzdFxuICAgICAgICBzZXR0aW5ncz17c2V0dGluZ3MuZmlsdGVyKHMgPT4gcmVxdWlyZWRTZXR0aW5nSURzLmluZGV4T2Yocy5pZCkgPj0gMCl9XG4gICAgICAvPlxuICAgICk7XG5cbiAgfSBlbHNlIHtcbiAgICBzZXR0aW5nV2lkZ2V0R3JvdXAgPSAoXG4gICAgICA8VGFic1xuICAgICAgICAgIHZlcnRpY2FsXG4gICAgICAgICAgY2xhc3NOYW1lPXtzdHlsZXMudGFic31cbiAgICAgICAgICBzZWxlY3RlZFRhYklkPXtzZWxlY3RlZFRhYklEfVxuICAgICAgICAgIG9uQ2hhbmdlPXsobmV3VGFiSUQpID0+IHNlbGVjdFRhYklEKGAke25ld1RhYklEfWApfT5cbiAgICAgICAge3BhbmVzLm1hcChwYW5lID0+IChcbiAgICAgICAgICA8VGFiXG4gICAgICAgICAgICBrZXk9e3BhbmUuaWR9XG4gICAgICAgICAgICBpZD17YCR7cGFuZS5pZH1gfVxuICAgICAgICAgICAgdGl0bGU9e3BhbmUubGFiZWx9XG4gICAgICAgICAgICBwYW5lbD17PFNldHRpbmdJbnB1dExpc3Qgc2V0dGluZ3M9e3NldHRpbmdzLmZpbHRlcihzID0+IHMucGFuZUlEID09PSBwYW5lLmlkKX0gLz59XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICA8L1RhYnM+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLmJhc2V9PntzZXR0aW5nV2lkZ2V0R3JvdXB9PC9kaXY+O1xufTtcblxuXG5jb25zdCBTZXR0aW5nSW5wdXRMaXN0OiBSZWFjdC5GQzx7IHNldHRpbmdzOiBTZXR0aW5nPGFueT5bXSB9PiA9IGZ1bmN0aW9uICh7IHNldHRpbmdzIH0pIHtcbiAgY29uc3QgaXBjU2V0dGluZ3MgPSBzZXR0aW5ncy5tYXAoKHNldHRpbmcpID0+IHVzZVNldHRpbmc8c3RyaW5nPihzZXR0aW5nLmlkLCAnJykpO1xuICBjb25zdCBoYXNDaGFuZ2VkU2V0dGluZ3MgPSBpcGNTZXR0aW5ncy5tYXAoKHNldHRpbmcpID0+IHNldHRpbmcuY2hhbmdlZCgpKS5pbmRleE9mKHRydWUpID49IDA7XG5cbiAgYXN5bmMgZnVuY3Rpb24gY29tbWl0QWxsQW5kQ2xvc2UoKSB7XG4gICAgZm9yIChjb25zdCBzZXR0aW5nIG9mIGlwY1NldHRpbmdzKSB7XG4gICAgICBhd2FpdCBzZXR0aW5nLmNvbW1pdCgpO1xuICAgIH1cbiAgICByZW1vdGUuZ2V0Q3VycmVudFdpbmRvdygpLmNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7Wy4uLmlwY1NldHRpbmdzLmVudHJpZXMoKV0ubWFwKChbaWR4LCBzXTogW251bWJlciwgU2V0dGluZ0hvb2s8YW55Pl0pID0+XG4gICAgICAgIDxTZXR0aW5nSW5wdXRcbiAgICAgICAgICBsYWJlbD17c2V0dGluZ3NbaWR4XS5sYWJlbH1cbiAgICAgICAgICBoZWxwVGV4dD17c2V0dGluZ3NbaWR4XS5oZWxwVGV4dH1cbiAgICAgICAgICBpcGNTZXR0aW5nPXtzfVxuICAgICAgICAgIGtleT17aWR4fVxuICAgICAgICAvPil9XG4gICAgICB7aGFzQ2hhbmdlZFNldHRpbmdzXG4gICAgICAgID8gPEJ1dHRvbiBsYXJnZSBpbnRlbnQ9XCJwcmltYXJ5XCIgb25DbGljaz17Y29tbWl0QWxsQW5kQ2xvc2V9PlNhdmUgYWxsIGFuZCBjbG9zZTwvQnV0dG9uPlxuICAgICAgICA6IG51bGx9XG4gICAgPC8+XG4gICk7XG59O1xuXG5cbmludGVyZmFjZSBTZXR0aW5nc0lucHV0UHJvcHMge1xuICBsYWJlbDogc3RyaW5nXG4gIGlwY1NldHRpbmc6IFNldHRpbmdIb29rPGFueT4gXG4gIGhlbHBUZXh0Pzogc3RyaW5nXG59XG5jb25zdCBTZXR0aW5nSW5wdXQ6IFJlYWN0LkZDPFNldHRpbmdzSW5wdXRQcm9wcz4gPSBmdW5jdGlvbiAoeyBsYWJlbCwgaXBjU2V0dGluZywgaGVscFRleHQgfSkge1xuICByZXR1cm4gKFxuICAgIDxGb3JtR3JvdXAgbGFiZWw9e2xhYmVsfSBsYWJlbEZvcj1cImlucHV0XCIgaGVscGVyVGV4dD17aGVscFRleHR9PlxuICAgICAgPElucHV0R3JvdXBcbiAgICAgICAgaWQ9XCJpbnB1dFwiXG4gICAgICAgIGxhcmdlXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgdmFsdWU9e2lwY1NldHRpbmcudmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXsoZXZ0OiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEVsZW1lbnQ+KSA9PiB7XG4gICAgICAgICAgaXBjU2V0dGluZy5zZXQoKGV2dC50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgYXMgc3RyaW5nKTtcbiAgICAgICAgfX1cbiAgICAgICAgcmlnaHRFbGVtZW50PXtcbiAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXBjU2V0dGluZy5jaGFuZ2VkKCl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2lwY1NldHRpbmcuY29tbWl0fVxuICAgICAgICAgICAgICB0YWJJbmRleD17LTF9XG4gICAgICAgICAgICAgIHRpdGxlPVwiU2F2ZSBzZXR0aW5nXCJcbiAgICAgICAgICAgICAgaWNvbj1cInRpY2tcIj5cbiAgICAgICAgICAgIFNhdmVcbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgfVxuICAgICAgLz5cbiAgICA8L0Zvcm1Hcm91cD5cbiAgKTtcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgU2V0dGluZ3NTY3JlZW47Il19