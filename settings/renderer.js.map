{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../src/settings/renderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useEffect, useState } from 'react';\nimport { remote } from 'electron';\n\nimport { Button, Tabs, Tab, InputGroup, FormGroup } from '@blueprintjs/core';\nimport { WindowComponentProps } from '../config/renderer';\n\nimport { Pane, Setting } from '../settings/main';\nimport { useIPCValue, callIPC } from '../ipc/renderer';\n\nimport styles from './styles.scss';\n\n\ninterface SettingHook<T> {\n  value: T\n  remoteValue: T\n  commit: () => Promise<void>\n  set: (value: T) => void\n  changed: () => boolean\n}\n\nexport function useSetting<T>(name: string, initialValue: T): SettingHook<T> {\n  // TODO: Make setting manager send IPC event to renderer when value changed;\n  // listen to that event here and relay new value so that widgets are updated.\n  // Important if multiple widgets depending on the same setting\n  // are shown simultaneously.\n\n  const [localValue, setLocalValue] = useState(initialValue);\n\n  const ipcValue = useIPCValue('settingValue', initialValue, { name });\n\n  useEffect(() => {\n    setLocalValue(ipcValue.value);\n  }, [ipcValue.value]);\n\n  async function commit() {\n    await callIPC('commitSetting', { name, value: localValue });\n    ipcValue.refresh();\n  }\n\n  return {\n    value: localValue,\n    // Setting value shown in the widget\n\n    remoteValue: ipcValue.value,\n    // Setting value in storage\n\n    changed: () => localValue !== ipcValue.value,\n    // True if user manipulated widgetâ€™s local value\n    // and the result is different from value in storage\n\n    set: setLocalValue,\n    // Updates local value\n\n    commit: commit,\n    // Saves local value in storage\n  };\n}\n\n\nconst SettingsScreen: React.FC<WindowComponentProps> = function ({ query }) {\n  const panes = useIPCValue('settingPaneList', { panes: [] as Pane[] }).\n    value.panes;\n  const settings = useIPCValue('settingList', { settings: [] as Setting<any>[] }).\n    value.settings;\n\n  const [selectedTabID, selectTabID] = useState<Pane[\"id\"] | undefined>(undefined);\n\n  useEffect(() => {\n    if (panes.length > 0 && selectedTabID === undefined) {\n      selectTabID(panes[0].id);\n    }\n  }, [panes.length]);\n\n  // Determine whether user was requested to supply specific settings\n  let requiredSettingIDs: string[];\n  const maybeRequiredSettings = query.get('requiredSettings')\n  if (maybeRequiredSettings) {\n    requiredSettingIDs = maybeRequiredSettings.split(',');\n  } else {\n    requiredSettingIDs = [];\n  }\n\n  let settingWidgetGroup: JSX.Element;\n\n  if (requiredSettingIDs.length > 0) {\n    settingWidgetGroup = (\n      <SettingInputList\n        settings={settings.filter(s => requiredSettingIDs.indexOf(s.id) >= 0)}\n      />\n    );\n\n  } else {\n    settingWidgetGroup = (\n      <Tabs\n          vertical\n          className={styles.tabs}\n          selectedTabId={selectedTabID}\n          onChange={(newTabID) => selectTabID(`${newTabID}`)}>\n        {panes.map(pane => (\n          <Tab\n            key={pane.id}\n            id={`${pane.id}`}\n            title={pane.label}\n            panel={<SettingInputList settings={settings.filter(s => s.paneID === pane.id)} />}\n          />\n        ))}\n      </Tabs>\n    );\n  }\n\n  return <div className={styles.base}>{settingWidgetGroup}</div>;\n};\n\n\nconst SettingInputList: React.FC<{ settings: Setting<any>[] }> = function ({ settings }) {\n  const ipcSettings = settings.map((setting) => useSetting<string>(setting.id, ''));\n  const hasChangedSettings = ipcSettings.map((setting) => setting.changed()).indexOf(true) >= 0;\n\n  async function commitAllAndClose() {\n    for (const setting of ipcSettings) {\n      await setting.commit();\n    }\n    remote.getCurrentWindow().close();\n  }\n\n  return (\n    <>\n      {[...ipcSettings.entries()].map(([idx, s]: [number, SettingHook<any>]) =>\n        <SettingInput\n          label={settings[idx].label}\n          helpText={settings[idx].helpText}\n          ipcSetting={s}\n          key={idx}\n        />)}\n      {hasChangedSettings\n        ? <Button large intent=\"primary\" onClick={commitAllAndClose}>Save all and close</Button>\n        : null}\n    </>\n  );\n};\n\n\ninterface SettingsInputProps {\n  label: string\n  ipcSetting: SettingHook<any> \n  helpText?: string\n}\nconst SettingInput: React.FC<SettingsInputProps> = function ({ label, ipcSetting, helpText }) {\n  return (\n    <FormGroup label={label} labelFor=\"input\" helperText={helpText}>\n      <InputGroup\n        id=\"input\"\n        large\n        type=\"text\"\n        value={ipcSetting.value}\n        onChange={(evt: React.FormEvent<HTMLElement>) => {\n          ipcSetting.set((evt.target as HTMLInputElement).value as string);\n        }}\n      />\n    </FormGroup>\n  );\n};\n\n\nexport default SettingsScreen;"]}